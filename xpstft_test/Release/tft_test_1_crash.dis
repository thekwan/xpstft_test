
tft_test_1.elf:     file format elf32-powerpc


Disassembly of section .text:

00000000 <_start>:
       0:	48 00 05 d1 	bl      5d0 <__cpu_init>
       4:	3c a0 00 00 	lis     r5,0
       8:	60 a5 b4 c0 	ori     r5,r5,46272
       c:	81 a5 80 14 	lwz     r13,-32748(r5)
      10:	80 45 80 18 	lwz     r2,-32744(r5)
      14:	80 c5 80 00 	lwz     r6,-32768(r5)
      18:	80 e5 80 04 	lwz     r7,-32764(r5)
      1c:	7c 86 38 40 	cmplw   cr1,r6,r7
      20:	40 84 00 3c 	bge-    cr1,5c <_start+0x5c>
      24:	38 00 00 00 	li      r0,0
      28:	7d 06 38 50 	subf    r8,r6,r7
      2c:	55 09 f0 bf 	rlwinm. r9,r8,30,2,31
      30:	41 82 00 14 	beq-    44 <_start+0x44>
      34:	7d 29 03 a6 	mtctr   r9
      38:	38 c6 ff fc 	addi    r6,r6,-4
      3c:	94 06 00 04 	stwu    r0,4(r6)
      40:	42 00 ff fc 	bdnz+   3c <_start+0x3c>
      44:	71 09 00 03 	andi.   r9,r8,3
      48:	41 82 00 14 	beq-    5c <_start+0x5c>
      4c:	7d 29 03 a6 	mtctr   r9
      50:	38 c6 ff ff 	addi    r6,r6,-1
      54:	9c 06 00 01 	stbu    r0,1(r6)
      58:	42 00 ff fc 	bdnz+   54 <_start+0x54>
      5c:	80 c5 80 08 	lwz     r6,-32760(r5)
      60:	80 e5 80 0c 	lwz     r7,-32756(r5)
      64:	7c 86 38 40 	cmplw   cr1,r6,r7
      68:	40 84 00 3c 	bge-    cr1,a4 <_start+0xa4>
      6c:	38 00 00 00 	li      r0,0
      70:	7d 06 38 50 	subf    r8,r6,r7
      74:	55 09 f0 bf 	rlwinm. r9,r8,30,2,31
      78:	41 82 00 14 	beq-    8c <_start+0x8c>
      7c:	7d 29 03 a6 	mtctr   r9
      80:	38 c6 ff fc 	addi    r6,r6,-4
      84:	94 06 00 04 	stwu    r0,4(r6)
      88:	42 00 ff fc 	bdnz+   84 <_start+0x84>
      8c:	71 09 00 03 	andi.   r9,r8,3
      90:	41 82 00 14 	beq-    a4 <_start+0xa4>
      94:	7d 29 03 a6 	mtctr   r9
      98:	38 c6 ff ff 	addi    r6,r6,-1
      9c:	9c 06 00 01 	stbu    r0,1(r6)
      a0:	42 00 ff fc 	bdnz+   9c <_start+0x9c>
      a4:	80 25 80 10 	lwz     r1,-32752(r5)
      a8:	38 21 ff f8 	addi    r1,r1,-8
      ac:	3c 00 00 00 	lis     r0,0
      b0:	90 01 00 00 	stw     r0,0(r1)
      b4:	7c 1c 43 a6 	mttbl   r0
      b8:	7c 1d 43 a6 	mttbu   r0
      bc:	48 00 2e 1d 	bl      2ed8 <__init>
      c0:	48 00 04 1d 	bl      4dc <main>
      c4:	48 00 2e 39 	bl      2efc <__fini>
      c8:	48 00 2c 29 	bl      2cf0 <exit>

000000cc <_exit>:
      cc:	48 00 00 00 	b       cc <_exit>

000000d0 <__do_global_dtors_aux>:
      d0:	94 21 ff f0 	stwu    r1,-16(r1)
      d4:	7c 08 02 a6 	mflr    r0
      d8:	93 c1 00 08 	stw     r30,8(r1)
      dc:	3f c0 00 00 	lis     r30,0
      e0:	90 01 00 14 	stw     r0,20(r1)
      e4:	88 1e 35 18 	lbz     r0,13592(r30)
      e8:	93 e1 00 0c 	stw     r31,12(r1)
      ec:	2f 80 00 00 	cmpwi   cr7,r0,0
      f0:	40 9e 00 5c 	bne-    cr7,14c <__do_global_dtors_aux+0x7c>
      f4:	3f e0 00 00 	lis     r31,0
      f8:	81 7f 2f 38 	lwz     r11,12088(r31)
      fc:	81 2b 00 00 	lwz     r9,0(r11)
     100:	2f 89 00 00 	cmpwi   cr7,r9,0
     104:	41 9e 00 24 	beq-    cr7,128 <__do_global_dtors_aux+0x58>
     108:	38 0b 00 04 	addi    r0,r11,4
     10c:	7d 29 03 a6 	mtctr   r9
     110:	90 1f 2f 38 	stw     r0,12088(r31)
     114:	4e 80 04 21 	bctrl
     118:	81 7f 2f 38 	lwz     r11,12088(r31)
     11c:	81 2b 00 00 	lwz     r9,0(r11)
     120:	2f 89 00 00 	cmpwi   cr7,r9,0
     124:	40 9e ff e4 	bne+    cr7,108 <__do_global_dtors_aux+0x38>
     128:	3d 20 00 00 	lis     r9,0
     12c:	39 29 00 00 	addi    r9,r9,0
     130:	2f 89 00 00 	cmpwi   cr7,r9,0
     134:	41 9e 00 10 	beq-    cr7,144 <__do_global_dtors_aux+0x74>
     138:	3c 60 00 00 	lis     r3,0
     13c:	38 63 34 ec 	addi    r3,r3,13548
     140:	4b ff fe c1 	bl      0 <_start>
     144:	38 00 00 01 	li      r0,1
     148:	98 1e 35 18 	stb     r0,13592(r30)
     14c:	80 01 00 14 	lwz     r0,20(r1)
     150:	83 c1 00 08 	lwz     r30,8(r1)
     154:	83 e1 00 0c 	lwz     r31,12(r1)
     158:	38 21 00 10 	addi    r1,r1,16
     15c:	7c 08 03 a6 	mtlr    r0
     160:	4e 80 00 20 	blr

00000164 <frame_dummy>:
     164:	3d 20 00 00 	lis     r9,0
     168:	94 21 ff f0 	stwu    r1,-16(r1)
     16c:	39 29 00 00 	addi    r9,r9,0
     170:	7c 08 02 a6 	mflr    r0
     174:	2f 89 00 00 	cmpwi   cr7,r9,0
     178:	3c 60 00 00 	lis     r3,0
     17c:	3c 80 00 00 	lis     r4,0
     180:	90 01 00 14 	stw     r0,20(r1)
     184:	38 63 34 ec 	addi    r3,r3,13548
     188:	38 84 35 1c 	addi    r4,r4,13596
     18c:	41 9e 00 08 	beq-    cr7,194 <frame_dummy+0x30>
     190:	4b ff fe 71 	bl      0 <_start>
     194:	3d 60 00 00 	lis     r11,0
     198:	3d 20 00 00 	lis     r9,0
     19c:	80 0b 34 f4 	lwz     r0,13556(r11)
     1a0:	39 29 00 00 	addi    r9,r9,0
     1a4:	38 6b 34 f4 	addi    r3,r11,13556
     1a8:	2f 80 00 00 	cmpwi   cr7,r0,0
     1ac:	41 9e 00 14 	beq-    cr7,1c0 <frame_dummy+0x5c>
     1b0:	2f 89 00 00 	cmpwi   cr7,r9,0
     1b4:	41 9e 00 0c 	beq-    cr7,1c0 <frame_dummy+0x5c>
     1b8:	7d 29 03 a6 	mtctr   r9
     1bc:	4e 80 04 21 	bctrl
     1c0:	80 01 00 14 	lwz     r0,20(r1)
     1c4:	38 21 00 10 	addi    r1,r1,16
     1c8:	7c 08 03 a6 	mtlr    r0
     1cc:	4e 80 00 20 	blr

000001d0 <mysleep>:
     1d0:	7c 60 1b 79 	mr.     r0,r3
     1d4:	7c 09 03 a6 	mtctr   r0
     1d8:	4d 82 00 20 	beqlr   
     1dc:	60 00 00 00 	nop
     1e0:	60 00 00 00 	nop
     1e4:	60 00 00 00 	nop
     1e8:	60 00 00 00 	nop
     1ec:	60 00 00 00 	nop
     1f0:	60 00 00 00 	nop
     1f4:	60 00 00 00 	nop
     1f8:	60 00 00 00 	nop
     1fc:	60 00 00 00 	nop
     200:	60 00 00 00 	nop
     204:	60 00 00 00 	nop
     208:	60 00 00 00 	nop
     20c:	60 00 00 00 	nop
     210:	60 00 00 00 	nop
     214:	60 00 00 00 	nop
     218:	42 00 ff c4 	bdnz+   1dc <mysleep+0xc>
     21c:	4e 80 00 20 	blr

00000220 <TftExample>:
     220:	94 21 ff e8 	stwu    r1,-24(r1)
     224:	7c 08 02 a6 	mflr    r0
     228:	54 63 04 3e 	clrlwi  r3,r3,16
     22c:	90 01 00 1c 	stw     r0,28(r1)
     230:	93 a1 00 0c 	stw     r29,12(r1)
     234:	93 c1 00 10 	stw     r30,16(r1)
     238:	93 e1 00 14 	stw     r31,20(r1)
     23c:	48 00 1c d5 	bl      1f10 <XTft_LookupConfig>
     240:	2c 03 00 00 	cmpwi   r3,0
     244:	38 00 00 01 	li      r0,1
     248:	41 82 02 74 	beq-    4bc <_HEAP_SIZE+0xbc>
     24c:	3f a0 00 00 	lis     r29,0
     250:	39 60 00 00 	li      r11,0
     254:	39 3d 35 34 	addi    r9,r29,13620
     258:	a1 03 00 00 	lhz     r8,0(r3)
     25c:	80 e3 00 10 	lwz     r7,16(r3)
     260:	3c 00 11 11 	lis     r0,4369
     264:	80 c3 00 04 	lwz     r6,4(r3)
     268:	60 00 11 11 	ori     r0,r0,4369
     26c:	80 a3 00 08 	lwz     r5,8(r3)
     270:	3d 40 00 ff 	lis     r10,255
     274:	91 69 00 24 	stw     r11,36(r9)
     278:	61 4a ff ff 	ori     r10,r10,65535
     27c:	91 69 00 18 	stw     r11,24(r9)
     280:	91 69 00 1c 	stw     r11,28(r9)
     284:	3d 60 00 08 	lis     r11,8
     288:	a0 83 00 0c 	lhz     r4,12(r3)
     28c:	7d 69 03 a6 	mtctr   r11
     290:	b1 1d 35 34 	sth     r8,13620(r29)
     294:	90 09 00 14 	stw     r0,20(r9)
     298:	38 00 00 00 	li      r0,0
     29c:	90 c9 00 04 	stw     r6,4(r9)
     2a0:	60 00 ff 00 	ori     r0,r0,65280
     2a4:	90 a9 00 08 	stw     r5,8(r9)
     2a8:	b0 89 00 0c 	sth     r4,12(r9)
     2ac:	90 e9 00 10 	stw     r7,16(r9)
     2b0:	91 49 00 20 	stw     r10,32(r9)
     2b4:	39 20 00 00 	li      r9,0
     2b8:	90 09 00 00 	stw     r0,0(r9)
     2bc:	39 29 00 04 	addi    r9,r9,4
     2c0:	42 00 ff f8 	bdnz+   2b8 <TftExample+0x98>
     2c4:	3d 60 00 08 	lis     r11,8
     2c8:	38 00 00 00 	li      r0,0
     2cc:	7d 69 03 a6 	mtctr   r11
     2d0:	60 00 ff f0 	ori     r0,r0,65520
     2d4:	39 20 00 00 	li      r9,0
     2d8:	90 09 00 00 	stw     r0,0(r9)
     2dc:	39 29 00 04 	addi    r9,r9,4
     2e0:	42 00 ff f8 	bdnz+   2d8 <TftExample+0xb8>
     2e4:	3d 60 00 08 	lis     r11,8
     2e8:	39 20 00 00 	li      r9,0
     2ec:	7d 69 03 a6 	mtctr   r11
     2f0:	38 00 00 ff 	li      r0,255
     2f4:	90 09 00 00 	stw     r0,0(r9)
     2f8:	39 29 00 04 	addi    r9,r9,4
     2fc:	42 00 ff f8 	bdnz+   2f4 <TftExample+0xd4>
     300:	3b c0 00 00 	li      r30,0
     304:	3b e0 00 00 	li      r31,0
     308:	3c c0 00 ff 	lis     r6,255
     30c:	7f e5 fb 78 	mr      r5,r31
     310:	60 c6 ff ff 	ori     r6,r6,65535
     314:	38 7d 35 34 	addi    r3,r29,13620
     318:	7f c4 f3 78 	mr      r4,r30
     31c:	48 00 0b 0d 	bl      e28 <XTft_SetPixel>
     320:	2f 9f 01 df 	cmpwi   cr7,r31,479
     324:	3b ff 00 01 	addi    r31,r31,1
     328:	40 9e ff e0 	bne+    cr7,308 <TftExample+0xe8>
     32c:	2f 9e 00 4f 	cmpwi   cr7,r30,79
     330:	3b de 00 01 	addi    r30,r30,1
     334:	40 9e ff d0 	bne+    cr7,304 <TftExample+0xe4>
     338:	3b c0 00 50 	li      r30,80
     33c:	3b e0 00 00 	li      r31,0
     340:	7f e5 fb 78 	mr      r5,r31
     344:	38 7d 35 34 	addi    r3,r29,13620
     348:	7f c4 f3 78 	mr      r4,r30
     34c:	3c c0 00 ff 	lis     r6,255
     350:	48 00 0a d9 	bl      e28 <XTft_SetPixel>
     354:	2f 9f 01 df 	cmpwi   cr7,r31,479
     358:	3b ff 00 01 	addi    r31,r31,1
     35c:	40 9e ff e4 	bne+    cr7,340 <TftExample+0x120>
     360:	2f 9e 00 9f 	cmpwi   cr7,r30,159
     364:	3b de 00 01 	addi    r30,r30,1
     368:	40 9e ff d4 	bne+    cr7,33c <TftExample+0x11c>
     36c:	3b c0 00 a0 	li      r30,160
     370:	3b e0 00 00 	li      r31,0
     374:	38 c0 00 00 	li      r6,0
     378:	7f e5 fb 78 	mr      r5,r31
     37c:	60 c6 ff 00 	ori     r6,r6,65280
     380:	38 7d 35 34 	addi    r3,r29,13620
     384:	7f c4 f3 78 	mr      r4,r30
     388:	48 00 0a a1 	bl      e28 <XTft_SetPixel>
     38c:	2f 9f 01 df 	cmpwi   cr7,r31,479
     390:	3b ff 00 01 	addi    r31,r31,1
     394:	40 9e ff e0 	bne+    cr7,374 <TftExample+0x154>
     398:	2f 9e 00 ef 	cmpwi   cr7,r30,239
     39c:	3b de 00 01 	addi    r30,r30,1
     3a0:	40 9e ff d0 	bne+    cr7,370 <TftExample+0x150>
     3a4:	3b c0 00 f0 	li      r30,240
     3a8:	3b e0 00 00 	li      r31,0
     3ac:	7f e5 fb 78 	mr      r5,r31
     3b0:	38 7d 35 34 	addi    r3,r29,13620
     3b4:	7f c4 f3 78 	mr      r4,r30
     3b8:	38 c0 00 ff 	li      r6,255
     3bc:	48 00 0a 6d 	bl      e28 <XTft_SetPixel>
     3c0:	2f 9f 01 df 	cmpwi   cr7,r31,479
     3c4:	3b ff 00 01 	addi    r31,r31,1
     3c8:	40 9e ff e4 	bne+    cr7,3ac <TftExample+0x18c>
     3cc:	2f 9e 01 3f 	cmpwi   cr7,r30,319
     3d0:	3b de 00 01 	addi    r30,r30,1
     3d4:	40 9e ff d4 	bne+    cr7,3a8 <TftExample+0x188>
     3d8:	3b c0 01 40 	li      r30,320
     3dc:	3b e0 00 00 	li      r31,0
     3e0:	3c c0 00 ff 	lis     r6,255
     3e4:	7f e5 fb 78 	mr      r5,r31
     3e8:	60 c6 ff ff 	ori     r6,r6,65535
     3ec:	38 7d 35 34 	addi    r3,r29,13620
     3f0:	7f c4 f3 78 	mr      r4,r30
     3f4:	48 00 0a 35 	bl      e28 <XTft_SetPixel>
     3f8:	2f 9f 01 df 	cmpwi   cr7,r31,479
     3fc:	3b ff 00 01 	addi    r31,r31,1
     400:	40 9e ff e0 	bne+    cr7,3e0 <TftExample+0x1c0>
     404:	2f 9e 01 8f 	cmpwi   cr7,r30,399
     408:	3b de 00 01 	addi    r30,r30,1
     40c:	40 9e ff d0 	bne+    cr7,3dc <TftExample+0x1bc>
     410:	3b c0 01 90 	li      r30,400
     414:	3b e0 00 00 	li      r31,0
     418:	3c c0 00 aa 	lis     r6,170
     41c:	7f e5 fb 78 	mr      r5,r31
     420:	60 c6 aa aa 	ori     r6,r6,43690
     424:	38 7d 35 34 	addi    r3,r29,13620
     428:	7f c4 f3 78 	mr      r4,r30
     42c:	48 00 09 fd 	bl      e28 <XTft_SetPixel>
     430:	2f 9f 01 df 	cmpwi   cr7,r31,479
     434:	3b ff 00 01 	addi    r31,r31,1
     438:	40 9e ff e0 	bne+    cr7,418 <_HEAP_SIZE+0x18>
     43c:	2f 9e 01 df 	cmpwi   cr7,r30,479
     440:	3b de 00 01 	addi    r30,r30,1
     444:	40 9e ff d0 	bne+    cr7,414 <_HEAP_SIZE+0x14>
     448:	3b c0 01 e0 	li      r30,480
     44c:	3b e0 00 00 	li      r31,0
     450:	3c c0 00 77 	lis     r6,119
     454:	7f e5 fb 78 	mr      r5,r31
     458:	60 c6 77 77 	ori     r6,r6,30583
     45c:	38 7d 35 34 	addi    r3,r29,13620
     460:	7f c4 f3 78 	mr      r4,r30
     464:	48 00 09 c5 	bl      e28 <XTft_SetPixel>
     468:	2f 9f 01 df 	cmpwi   cr7,r31,479
     46c:	3b ff 00 01 	addi    r31,r31,1
     470:	40 9e ff e0 	bne+    cr7,450 <_HEAP_SIZE+0x50>
     474:	2f 9e 02 2f 	cmpwi   cr7,r30,559
     478:	3b de 00 01 	addi    r30,r30,1
     47c:	40 9e ff d0 	bne+    cr7,44c <_HEAP_SIZE+0x4c>
     480:	3b c0 02 30 	li      r30,560
     484:	3b e0 00 00 	li      r31,0
     488:	3c c0 00 33 	lis     r6,51
     48c:	7f e5 fb 78 	mr      r5,r31
     490:	60 c6 33 33 	ori     r6,r6,13107
     494:	38 7d 35 34 	addi    r3,r29,13620
     498:	7f c4 f3 78 	mr      r4,r30
     49c:	48 00 09 8d 	bl      e28 <XTft_SetPixel>
     4a0:	2f 9f 01 df 	cmpwi   cr7,r31,479
     4a4:	3b ff 00 01 	addi    r31,r31,1
     4a8:	40 9e ff e0 	bne+    cr7,488 <_HEAP_SIZE+0x88>
     4ac:	2f 9e 02 7f 	cmpwi   cr7,r30,639
     4b0:	3b de 00 01 	addi    r30,r30,1
     4b4:	40 9e ff d0 	bne+    cr7,484 <_HEAP_SIZE+0x84>
     4b8:	38 00 00 00 	li      r0,0
     4bc:	7c 03 03 78 	mr      r3,r0
     4c0:	80 01 00 1c 	lwz     r0,28(r1)
     4c4:	83 a1 00 0c 	lwz     r29,12(r1)
     4c8:	83 c1 00 10 	lwz     r30,16(r1)
     4cc:	83 e1 00 14 	lwz     r31,20(r1)
     4d0:	7c 08 03 a6 	mtlr    r0
     4d4:	38 21 00 18 	addi    r1,r1,24
     4d8:	4e 80 00 20 	blr

000004dc <main>:
     4dc:	94 21 ff f8 	stwu    r1,-8(r1)
     4e0:	7c 08 02 a6 	mflr    r0
     4e4:	38 60 00 00 	li      r3,0
     4e8:	90 01 00 0c 	stw     r0,12(r1)
     4ec:	4b ff fd 35 	bl      220 <TftExample>
     4f0:	31 23 ff ff 	addic   r9,r3,-1
     4f4:	7c 09 19 10 	subfe   r0,r9,r3
     4f8:	7c 03 03 78 	mr      r3,r0
     4fc:	80 01 00 0c 	lwz     r0,12(r1)
     500:	38 21 00 08 	addi    r1,r1,8
     504:	7c 08 03 a6 	mtlr    r0
     508:	4e 80 00 20 	blr

0000050c <init_uart>:
     50c:	4e 80 00 20 	blr

00000510 <disable_caches>:
     510:	94 21 ff f8 	stwu    r1,-8(r1)
     514:	7c 08 02 a6 	mflr    r0
     518:	90 01 00 0c 	stw     r0,12(r1)
     51c:	48 00 02 01 	bl      71c <Xil_DCacheDisable>
     520:	48 00 03 69 	bl      888 <Xil_ICacheDisable>
     524:	80 01 00 0c 	lwz     r0,12(r1)
     528:	38 21 00 08 	addi    r1,r1,8
     52c:	7c 08 03 a6 	mtlr    r0
     530:	4e 80 00 20 	blr

00000534 <enable_caches>:
     534:	94 21 ff e8 	stwu    r1,-24(r1)
     538:	7c 08 02 a6 	mflr    r0
     53c:	93 a1 00 0c 	stw     r29,12(r1)
     540:	3f a0 c0 00 	lis     r29,-16384
     544:	63 bd 40 01 	ori     r29,r29,16385
     548:	90 01 00 1c 	stw     r0,28(r1)
     54c:	7f a3 eb 78 	mr      r3,r29
     550:	48 00 03 65 	bl      8b4 <Xil_ICacheEnableRegion>
     554:	7f a3 eb 78 	mr      r3,r29
     558:	48 00 02 79 	bl      7d0 <Xil_DCacheEnableRegion>
     55c:	80 01 00 1c 	lwz     r0,28(r1)
     560:	83 a1 00 0c 	lwz     r29,12(r1)
     564:	38 21 00 18 	addi    r1,r1,24
     568:	7c 08 03 a6 	mtlr    r0
     56c:	4e 80 00 20 	blr

00000570 <init_platform>:
     570:	94 21 ff e8 	stwu    r1,-24(r1)
     574:	7c 08 02 a6 	mflr    r0
     578:	93 a1 00 0c 	stw     r29,12(r1)
     57c:	3f a0 c0 00 	lis     r29,-16384
     580:	63 bd 40 01 	ori     r29,r29,16385
     584:	90 01 00 1c 	stw     r0,28(r1)
     588:	7f a3 eb 78 	mr      r3,r29
     58c:	48 00 03 29 	bl      8b4 <Xil_ICacheEnableRegion>
     590:	7f a3 eb 78 	mr      r3,r29
     594:	48 00 02 3d 	bl      7d0 <Xil_DCacheEnableRegion>
     598:	80 01 00 1c 	lwz     r0,28(r1)
     59c:	83 a1 00 0c 	lwz     r29,12(r1)
     5a0:	38 21 00 18 	addi    r1,r1,24
     5a4:	7c 08 03 a6 	mtlr    r0
     5a8:	4e 80 00 20 	blr

000005ac <cleanup_platform>:
     5ac:	94 21 ff f8 	stwu    r1,-8(r1)
     5b0:	7c 08 02 a6 	mflr    r0
     5b4:	90 01 00 0c 	stw     r0,12(r1)
     5b8:	48 00 01 65 	bl      71c <Xil_DCacheDisable>
     5bc:	48 00 02 cd 	bl      888 <Xil_ICacheDisable>
     5c0:	80 01 00 0c 	lwz     r0,12(r1)
     5c4:	38 21 00 08 	addi    r1,r1,8
     5c8:	7c 08 03 a6 	mtlr    r0
     5cc:	4e 80 00 20 	blr

000005d0 <__cpu_init>:
    
    .section .text, "ax"
    .global __cpu_init
    .align 2    
__cpu_init:     
        blr
     5d0:	4e 80 00 20 	blr

000005d4 <Xil_CacheWriteCCR0>:
* None.
*
****************************************************************************/
void Xil_CacheWriteCCR0(u32 Val)
{
	sync;
     5d4:	7c 00 04 ac 	sync    
	isync;
     5d8:	4c 00 01 2c 	isync
	mtspr(XREG_SPR_CCR0, Val);
     5dc:	7c 73 eb a6 	mtspr   947,r3
	sync;
     5e0:	7c 00 04 ac 	sync    
	isync;
     5e4:	4c 00 01 2c 	isync
}
     5e8:	4e 80 00 20 	blr

000005ec <Xil_DCacheFlushRange>:
void Xil_DCacheFlushRange(u32 Addr, unsigned Len)
{
	const unsigned Cacheline = 32;
	unsigned int End;

	if (Len != 0) {
     5ec:	2c 04 00 00 	cmpwi   r4,0
     5f0:	4d 82 00 20 	beqlr   
		/* Back the starting address up to the start of a cache line
		* perform cache operations until Addr+Len
		*/
		End = Addr + Len;
		Addr = Addr & ~(Cacheline - 1);
     5f4:	54 69 00 34 	rlwinm  r9,r3,0,0,26

	if (Len != 0) {
		/* Back the starting address up to the start of a cache line
		* perform cache operations until Addr+Len
		*/
		End = Addr + Len;
     5f8:	7c 64 1a 14 	add     r3,r4,r3
		Addr = Addr & ~(Cacheline - 1);

		while (Addr < End) {
     5fc:	7f 83 48 40 	cmplw   cr7,r3,r9
     600:	4c 9d 00 20 	blelr   cr7
     604:	38 00 00 00 	li      r0,0
*
*
****************************************************************************/
static void DCacheFlushLine(u32 Addr)
{
	dcbf(Addr);
     608:	7c 00 48 ac 	dcbf    r0,r9
	sync;
     60c:	7c 00 04 ac 	sync    
	isync;
     610:	4c 00 01 2c 	isync
		End = Addr + Len;
		Addr = Addr & ~(Cacheline - 1);

		while (Addr < End) {
			DCacheFlushLine(Addr);
			Addr += Cacheline;
     614:	39 29 00 20 	addi    r9,r9,32
		* perform cache operations until Addr+Len
		*/
		End = Addr + Len;
		Addr = Addr & ~(Cacheline - 1);

		while (Addr < End) {
     618:	7f 83 48 40 	cmplw   cr7,r3,r9
     61c:	41 9d ff ec 	bgt+    cr7,608 <Xil_DCacheFlushRange+0x1c>
     620:	4e 80 00 20 	blr

00000624 <Xil_DCacheFlush>:
*
* @note
*
****************************************************************************/
void Xil_DCacheFlush(void)
{
     624:	38 00 00 10 	li      r0,16
     628:	39 60 00 00 	li      r11,0
     62c:	7c 09 03 a6 	mtctr   r0
     630:	39 20 00 01 	li      r9,1
	unsigned int PagesCacheable = 0;

	for(I = 0; I < 16; I++) {
		/* all TLB entries in 4GB of memory */
		TlbIndex = I + I + 1; /* data page indices = 1,3,5...,15 */
		TlbWord = tlbre(TlbIndex, 2);
     634:	7c 09 17 64 	.long 0x7c091764
		sync;
     638:	7c 00 04 ac 	sync    
		if((TlbWord & 0x00000400) != 0x400) {
			/* if cache inhibit bit is not set */
			if((TlbWord & 0x00000800) != 0x800) {
				/* if not write through */
				PagesCacheable++;
     63c:	70 0a 08 00 	andi.   r10,r0,2048
	for(I = 0; I < 16; I++) {
		/* all TLB entries in 4GB of memory */
		TlbIndex = I + I + 1; /* data page indices = 1,3,5...,15 */
		TlbWord = tlbre(TlbIndex, 2);
		sync;
		if((TlbWord & 0x00000400) != 0x400) {
     640:	54 0a b7 fe 	rlwinm  r10,r0,22,31,31
     644:	2f 0a 00 00 	cmpwi   cr6,r10,0
			/* if cache inhibit bit is not set */
			if((TlbWord & 0x00000800) != 0x800) {
				/* if not write through */
				PagesCacheable++;
     648:	7c 00 00 26 	mfcr    r0
     64c:	54 00 1f fe 	rlwinm  r0,r0,3,31,31
	for(I = 0; I < 16; I++) {
		/* all TLB entries in 4GB of memory */
		TlbIndex = I + I + 1; /* data page indices = 1,3,5...,15 */
		TlbWord = tlbre(TlbIndex, 2);
		sync;
		if((TlbWord & 0x00000400) != 0x400) {
     650:	40 9a 00 0c 	bne-    cr6,65c <Xil_DCacheFlush+0x38>
			/* if cache inhibit bit is not set */
			if((TlbWord & 0x00000800) != 0x800) {
				/* if not write through */
				PagesCacheable++;
     654:	7d 6b 02 14 	add     r11,r11,r0
			}

			isync;
     658:	4c 00 01 2c 	isync
     65c:	39 29 00 02 	addi    r9,r9,2
	unsigned int TlbIndex;
	unsigned int Address;
	unsigned int Index;
	unsigned int PagesCacheable = 0;

	for(I = 0; I < 16; I++) {
     660:	42 00 ff d4 	bdnz+   634 <Xil_DCacheFlush+0x10>
			isync;
		}
	}

	/* flush dirty data cache lines */
	if (PagesCacheable) {
     664:	2f 8b 00 00 	cmpwi   cr7,r11,0
     668:	41 9e 00 60 	beq-    cr7,6c8 <Xil_DCacheFlush+0xa4>
     66c:	38 00 04 00 	li      r0,1024
     670:	39 60 00 00 	li      r11,0
     674:	7c 09 03 a6 	mtctr   r0
     678:	48 00 00 0c 	b       684 <Xil_DCacheFlush+0x60>
		for(Index = 0; Index < DCACHE_SIZE; Index += 32) {
     67c:	39 6b 00 20 	addi    r11,r11,32
     680:	42 40 00 48 	bdz-    6c8 <Xil_DCacheFlush+0xa4>
			/* per cache line */
			sync;
     684:	7c 00 04 ac 	sync    
			dcread(Index);
     688:	38 00 00 00 	li      r0,0
     68c:	7c 00 5b cc 	.long 0x7c005bcc
			isync;
     690:	4c 00 01 2c 	isync
			/* ensure dcread finishes before reading tag */
			Address = (mfspr(XREG_SPR_DCDBTRH));
     694:	7d 3d e2 a6 	mfspr   r9,925
			/* read tag's real address */
			if ((Address | 0xffffff7f) == 0xffffffff) {
     698:	38 00 ff 7f 	li      r0,-129
     69c:	7d 20 03 78 	or      r0,r9,r0
     6a0:	2f 80 ff ff 	cmpwi   cr7,r0,-1
				/* if line is valid */
				dcbf((Address & 0xFFFFFF00) | (Index & 0xff));
     6a4:	55 20 00 2e 	rlwinm  r0,r9,0,0,23
     6a8:	55 69 06 3e 	clrlwi  r9,r11,24
			dcread(Index);
			isync;
			/* ensure dcread finishes before reading tag */
			Address = (mfspr(XREG_SPR_DCDBTRH));
			/* read tag's real address */
			if ((Address | 0xffffff7f) == 0xffffffff) {
     6ac:	40 9e ff d0 	bne+    cr7,67c <Xil_DCacheFlush+0x58>
				/* if line is valid */
				dcbf((Address & 0xFFFFFF00) | (Index & 0xff));
     6b0:	7c 09 4b 78 	or      r9,r0,r9
     6b4:	38 00 00 00 	li      r0,0
     6b8:	7c 00 48 ac 	dcbf    r0,r9
				/* flush if dirty */
				sync;
     6bc:	7c 00 04 ac 	sync    
		}
	}

	/* flush dirty data cache lines */
	if (PagesCacheable) {
		for(Index = 0; Index < DCACHE_SIZE; Index += 32) {
     6c0:	39 6b 00 20 	addi    r11,r11,32
     6c4:	42 00 ff c0 	bdnz+   684 <Xil_DCacheFlush+0x60>
			}
		}
	}

	/* data cache is effectively flushed at this point */
	sync;
     6c8:	7c 00 04 ac 	sync    

}
     6cc:	4e 80 00 20 	blr

000006d0 <Xil_DCacheInvalidateRange>:
void Xil_DCacheInvalidateRange(u32 Addr, unsigned Len)
{
	const unsigned Cacheline = 32;
	unsigned int End;

	if (Len != 0) {
     6d0:	2c 04 00 00 	cmpwi   r4,0
     6d4:	4d 82 00 20 	beqlr   
		/* Back the starting address up to the start of a cache line
		 * perform cache operations until Addr+Len
		 */
		End = Addr + Len;
		Addr = Addr & ~(Cacheline - 1);
     6d8:	54 69 00 34 	rlwinm  r9,r3,0,0,26

	if (Len != 0) {
		/* Back the starting address up to the start of a cache line
		 * perform cache operations until Addr+Len
		 */
		End = Addr + Len;
     6dc:	7c 64 1a 14 	add     r3,r4,r3
		Addr = Addr & ~(Cacheline - 1);

		while (Addr < End) {
     6e0:	7f 83 48 40 	cmplw   cr7,r3,r9
     6e4:	4c 9d 00 20 	blelr   cr7
     6e8:	38 00 00 00 	li      r0,0
*
*
****************************************************************************/
static void DCacheInvalidateLine(u32 Addr)
{
	dcbi(Addr);
     6ec:	7c 00 4b ac 	dcbi    r0,r9
	sync;
     6f0:	7c 00 04 ac 	sync    
	isync;
     6f4:	4c 00 01 2c 	isync
		End = Addr + Len;
		Addr = Addr & ~(Cacheline - 1);

		while (Addr < End) {
			DCacheInvalidateLine(Addr);
			Addr += Cacheline;
     6f8:	39 29 00 20 	addi    r9,r9,32
		 * perform cache operations until Addr+Len
		 */
		End = Addr + Len;
		Addr = Addr & ~(Cacheline - 1);

		while (Addr < End) {
     6fc:	7f 83 48 40 	cmplw   cr7,r3,r9
     700:	41 9d ff ec 	bgt+    cr7,6ec <Xil_DCacheInvalidateRange+0x1c>
     704:	4e 80 00 20 	blr

00000708 <Xil_DCacheInvalidate>:
*
****************************************************************************/
void Xil_DCacheInvalidate(void)
{

	sync;
     708:	7c 00 04 ac 	sync    
	dccci(0);  /* invalidate data cache (clear all write
     70c:	38 00 00 00 	li      r0,0
     710:	7c 00 03 8c 	.long 0x7c00038c
		    * through entries remaining.
		    * (0) = dummy argument--not used by the PPC440
		    * but needed for backward compatibility */
	isync;
     714:	4c 00 01 2c 	isync
}
     718:	4e 80 00 20 	blr

0000071c <Xil_DCacheDisable>:
* @note
*
*
****************************************************************************/
void Xil_DCacheDisable(void)
{
     71c:	38 00 00 10 	li      r0,16
     720:	39 40 00 00 	li      r10,0
     724:	7c 09 03 a6 	mtctr   r0
     728:	39 60 00 01 	li      r11,1
	unsigned int PagesCacheable = 0;

	for(I = 0; I < 16; I++) {
		/* all TLB entries in 4GB of memory */
		TlbIndex = I + I + 1; /* data page indices = 1,3,5...,15 */
		TlbWord = tlbre(TlbIndex, 2);
     72c:	7c 0b 17 64 	.long 0x7c0b1764
		sync;
     730:	7c 00 04 ac 	sync    
		if((TlbWord & 0x00000400) != 0x400) {
			/* if cache inhibit bit is not set */
			if((TlbWord & 0x00000800) != 0x800) {
				/* if not write through */
				PagesCacheable++;
     734:	70 09 08 00 	andi.   r9,r0,2048
	for(I = 0; I < 16; I++) {
		/* all TLB entries in 4GB of memory */
		TlbIndex = I + I + 1; /* data page indices = 1,3,5...,15 */
		TlbWord = tlbre(TlbIndex, 2);
		sync;
		if((TlbWord & 0x00000400) != 0x400) {
     738:	54 09 b7 fe 	rlwinm  r9,r0,22,31,31
     73c:	2f 09 00 00 	cmpwi   cr6,r9,0
			if((TlbWord & 0x00000800) != 0x800) {
				/* if not write through */
				PagesCacheable++;
			}
			/* unset write-through bit and set cache inhibit bit */
			tlbwe((TlbWord & ~0x00000800) | 0x00000400, TlbIndex, 2);
     740:	54 00 05 66 	rlwinm  r0,r0,0,21,19
		sync;
		if((TlbWord & 0x00000400) != 0x400) {
			/* if cache inhibit bit is not set */
			if((TlbWord & 0x00000800) != 0x800) {
				/* if not write through */
				PagesCacheable++;
     744:	7d 20 00 26 	mfcr    r9
     748:	55 29 1f fe 	rlwinm  r9,r9,3,31,31
	for(I = 0; I < 16; I++) {
		/* all TLB entries in 4GB of memory */
		TlbIndex = I + I + 1; /* data page indices = 1,3,5...,15 */
		TlbWord = tlbre(TlbIndex, 2);
		sync;
		if((TlbWord & 0x00000400) != 0x400) {
     74c:	40 9a 00 14 	bne-    cr6,760 <Xil_DCacheDisable+0x44>
			/* if cache inhibit bit is not set */
			if((TlbWord & 0x00000800) != 0x800) {
				/* if not write through */
				PagesCacheable++;
     750:	7d 4a 4a 14 	add     r10,r10,r9
			}
			/* unset write-through bit and set cache inhibit bit */
			tlbwe((TlbWord & ~0x00000800) | 0x00000400, TlbIndex, 2);
     754:	60 00 04 00 	ori     r0,r0,1024
     758:	7c 0b 17 a4 	.long 0x7c0b17a4

			isync;
     75c:	4c 00 01 2c 	isync
     760:	39 6b 00 02 	addi    r11,r11,2
	unsigned int TlbIndex;
	unsigned int Address;
	unsigned int Index;
	unsigned int PagesCacheable = 0;

	for(I = 0; I < 16; I++) {
     764:	42 00 ff c8 	bdnz+   72c <Xil_DCacheDisable+0x10>
			isync;
		}
	}

	/* flush dirty data cache lines */
	if (PagesCacheable) {
     768:	2f 8a 00 00 	cmpwi   cr7,r10,0
     76c:	41 9e 00 60 	beq-    cr7,7cc <Xil_DCacheDisable+0xb0>
     770:	38 00 04 00 	li      r0,1024
     774:	39 60 00 00 	li      r11,0
     778:	7c 09 03 a6 	mtctr   r0
     77c:	48 00 00 0c 	b       788 <Xil_DCacheDisable+0x6c>
		for(Index = 0; Index < DCACHE_SIZE; Index += 32) {
     780:	39 6b 00 20 	addi    r11,r11,32
     784:	42 40 00 48 	bdz-    7cc <Xil_DCacheDisable+0xb0>
			/* per cache line */
			sync;
     788:	7c 00 04 ac 	sync    
			dcread(Index);
     78c:	38 00 00 00 	li      r0,0
     790:	7c 00 5b cc 	.long 0x7c005bcc
			isync;
     794:	4c 00 01 2c 	isync
			/* ensure dcread finishes before reading tag */
			Address = (mfspr(XREG_SPR_DCDBTRH));
     798:	7d 3d e2 a6 	mfspr   r9,925
			/* read tag's real address */
			if ((Address | 0xffffff7f) == 0xffffffff) {
     79c:	38 00 ff 7f 	li      r0,-129
     7a0:	7d 20 03 78 	or      r0,r9,r0
     7a4:	2f 80 ff ff 	cmpwi   cr7,r0,-1
				/* if line is valid */
				dcbf((Address & 0xFFFFFF00) | (Index & 0xff));
     7a8:	55 20 00 2e 	rlwinm  r0,r9,0,0,23
     7ac:	55 69 06 3e 	clrlwi  r9,r11,24
			dcread(Index);
			isync;
			/* ensure dcread finishes before reading tag */
			Address = (mfspr(XREG_SPR_DCDBTRH));
			/* read tag's real address */
			if ((Address | 0xffffff7f) == 0xffffffff) {
     7b0:	40 9e ff d0 	bne+    cr7,780 <Xil_DCacheDisable+0x64>
				/* if line is valid */
				dcbf((Address & 0xFFFFFF00) | (Index & 0xff));
     7b4:	7c 09 4b 78 	or      r9,r0,r9
     7b8:	38 00 00 00 	li      r0,0
     7bc:	7c 00 48 ac 	dcbf    r0,r9
				/* flush if dirty */
				sync;
     7c0:	7c 00 04 ac 	sync    
		}
	}

	/* flush dirty data cache lines */
	if (PagesCacheable) {
		for(Index = 0; Index < DCACHE_SIZE; Index += 32) {
     7c4:	39 6b 00 20 	addi    r11,r11,32
     7c8:	42 00 ff c0 	bdnz+   788 <Xil_DCacheDisable+0x6c>
				/* ensure dcbf finishes */
			}
		}
	}

	Xil_DCacheInvalidate();
     7cc:	4b ff ff 3c 	b       708 <Xil_DCacheInvalidate>

000007d0 <Xil_DCacheEnableRegion>:
* @note     This function is specific to PPC440.
*
*
****************************************************************************/
void Xil_DCacheEnableRegion(u32 Regions)
{
     7d0:	94 21 ff f0 	stwu    r1,-16(r1)
     7d4:	7c 08 02 a6 	mflr    r0
     7d8:	93 e1 00 0c 	stw     r31,12(r1)
     7dc:	7c 7f 1b 78 	mr      r31,r3
     7e0:	90 01 00 14 	stw     r0,20(r1)
	int I;
	int Index;
	int TlbWord;

	Xil_DCacheDisable();
     7e4:	4b ff ff 39 	bl      71c <Xil_DCacheDisable>
	/* at this point the data cache is disabled and invalidated */
	mtspr(XREG_SPR_DVLIM,0); /* set DVLIM to 0 */
     7e8:	38 00 00 00 	li      r0,0
     7ec:	7c 18 e3 a6 	mtspr   920,r0
	mtspr(XREG_SPR_DNV0,0);  /* Set DNV0-3 */
     7f0:	39 20 00 00 	li      r9,0
     7f4:	7d 30 e3 a6 	mtspr   912,r9
	mtspr(XREG_SPR_DNV1,0);
     7f8:	7c 11 e3 a6 	mtspr   913,r0
	mtspr(XREG_SPR_DNV2,0);
     7fc:	7d 32 e3 a6 	mtspr   914,r9
	mtspr(XREG_SPR_DNV3,0);
     800:	7c 13 e3 a6 	mtspr   915,r0
	mtspr(XREG_SPR_DTV0,0);  /* Set DTV0-3 */
     804:	7d 34 e3 a6 	mtspr   916,r9
	mtspr(XREG_SPR_DTV1,0);
     808:	7c 15 e3 a6 	mtspr   917,r0
	mtspr(XREG_SPR_DTV2,0);
     80c:	7d 36 e3 a6 	mtspr   918,r9
	mtspr(XREG_SPR_DTV3,0);
     810:	7c 17 e3 a6 	mtspr   919,r0

	for(I = 15; I >= 0 && Regions != 0; I--) {
     814:	2f 9f 00 00 	cmpwi   cr7,r31,0
     818:	41 9e 00 40 	beq-    cr7,858 <Xil_DCacheEnableRegion+0x88>
     81c:	38 00 00 10 	li      r0,16
     820:	39 20 00 1f 	li      r9,31
     824:	7c 09 03 a6 	mtctr   r0
     828:	48 00 00 08 	b       830 <Xil_DCacheEnableRegion+0x60>
     82c:	41 82 00 2c 	beq-    858 <Xil_DCacheEnableRegion+0x88>
		/* all TLB entries in 4GB of memory */
		if((Regions & 0x3) > 0) {
     830:	73 e0 00 03 	andi.   r0,r31,3
     834:	41 82 00 18 	beq-    84c <Xil_DCacheEnableRegion+0x7c>
			/* either bit in this region is set */
			Index = I + I + 1;
			/* data page indices = 1,3,5,...,15 */
			TlbWord = tlbre(Index, 2);
     838:	7c 09 17 64 	.long 0x7c091764
			sync;
     83c:	7c 00 04 ac 	sync    
			/* unset cache inhibit bit, leaves write-through bit
			 * as it is
			 */
			tlbwe(TlbWord & 0xFFFFFBFF, Index, 2);
     840:	54 00 05 a8 	rlwinm  r0,r0,0,22,20
     844:	7c 09 17 a4 	.long 0x7c0917a4
			isync;
     848:	4c 00 01 2c 	isync
		}
		/* check next region */
		Regions = Regions >> 2;
     84c:	39 29 ff fe 	addi    r9,r9,-2
	mtspr(XREG_SPR_DTV0,0);  /* Set DTV0-3 */
	mtspr(XREG_SPR_DTV1,0);
	mtspr(XREG_SPR_DTV2,0);
	mtspr(XREG_SPR_DTV3,0);

	for(I = 15; I >= 0 && Regions != 0; I--) {
     850:	57 ff f0 bf 	rlwinm. r31,r31,30,2,31
     854:	42 00 ff d8 	bdnz+   82c <Xil_DCacheEnableRegion+0x5c>
			isync;
		}
		/* check next region */
		Regions = Regions >> 2;
	}
}
     858:	80 01 00 14 	lwz     r0,20(r1)
     85c:	83 e1 00 0c 	lwz     r31,12(r1)
     860:	38 21 00 10 	addi    r1,r1,16
     864:	7c 08 03 a6 	mtlr    r0
     868:	4e 80 00 20 	blr

0000086c <Xil_DCacheEnable>:
* peripherals around these smaller memory regions.
*
****************************************************************************/
void Xil_DCacheEnable()
{
	Xil_DCacheEnableRegion(0x80000001);
     86c:	3c 60 80 00 	lis     r3,-32768
     870:	60 63 00 01 	ori     r3,r3,1
     874:	4b ff ff 5c 	b       7d0 <Xil_DCacheEnableRegion>

00000878 <Xil_ICacheInvalidate>:
*
*
****************************************************************************/
void Xil_ICacheInvalidate(void)
{
	sync;
     878:	7c 00 04 ac 	sync    
	iccci;
     87c:	7c 00 07 8c 	.long 0x7c00078c
	isync;
     880:	4c 00 01 2c 	isync
}
     884:	4e 80 00 20 	blr

00000888 <Xil_ICacheDisable>:
* @note
*
*
****************************************************************************/
void Xil_ICacheDisable(void)
{
     888:	38 00 00 10 	li      r0,16
     88c:	39 20 00 00 	li      r9,0
     890:	7c 09 03 a6 	mtctr   r0

	for(I = 0; I < 16; I++) {
		/* all TLB entries in 4GB of memory */
		TwoI = I + I;
		/* instruction entries = 0, 2,..., 14 */
		TlbWord = tlbre(TwoI, 2);
     894:	7c 09 17 64 	.long 0x7c091764
		sync;
     898:	7c 00 04 ac 	sync    
		tlbwe(TlbWord | 0x0000400, TwoI, 2);
     89c:	60 00 04 00 	ori     r0,r0,1024
     8a0:	7c 09 17 a4 	.long 0x7c0917a4
		/* set cache inhibit bit */
		isync;
     8a4:	4c 00 01 2c 	isync
     8a8:	39 29 00 02 	addi    r9,r9,2
{
	int I;
	int TwoI;
	int TlbWord;

	for(I = 0; I < 16; I++) {
     8ac:	42 00 ff e8 	bdnz+   894 <Xil_ICacheDisable+0xc>
		sync;
		tlbwe(TlbWord | 0x0000400, TwoI, 2);
		/* set cache inhibit bit */
		isync;
	}
	Xil_ICacheInvalidate();
     8b0:	4b ff ff c8 	b       878 <Xil_ICacheInvalidate>

000008b4 <Xil_ICacheEnableRegion>:
* @note     This function is specific to PPC440.
*
*
****************************************************************************/
void Xil_ICacheEnableRegion(u32 Regions)
{
     8b4:	94 21 ff f0 	stwu    r1,-16(r1)
     8b8:	7c 08 02 a6 	mflr    r0
     8bc:	93 e1 00 0c 	stw     r31,12(r1)
     8c0:	7c 7f 1b 78 	mr      r31,r3
     8c4:	90 01 00 14 	stw     r0,20(r1)
	int I;
	int Index;
	int TlbWord;

	Xil_ICacheDisable();
     8c8:	4b ff ff c1 	bl      888 <Xil_ICacheDisable>
	/* at this point the instruction cache is disabled and invalidated */
	mtspr(XREG_SPR_IVLIM,0); /* set IVLIM to 0 */
     8cc:	38 00 00 00 	li      r0,0
     8d0:	7c 19 e3 a6 	mtspr   921,r0
	mtspr(XREG_SPR_INV0,0);  /* Set INV0-3 */
     8d4:	39 20 00 00 	li      r9,0
     8d8:	7d 30 db a6 	mtspr   880,r9
	mtspr(XREG_SPR_INV1,0);
     8dc:	7c 11 db a6 	mtspr   881,r0
	mtspr(XREG_SPR_INV2,0);
     8e0:	7d 32 db a6 	mtspr   882,r9
	mtspr(XREG_SPR_INV3,0);
     8e4:	7c 13 db a6 	mtspr   883,r0
	mtspr(XREG_SPR_ITV0,0);  /* Set ITV0-3 */
     8e8:	7d 34 db a6 	mtspr   884,r9
	mtspr(XREG_SPR_ITV1,0);
     8ec:	7c 15 db a6 	mtspr   885,r0
	mtspr(XREG_SPR_ITV2,0);
     8f0:	7d 36 db a6 	mtspr   886,r9
	mtspr(XREG_SPR_ITV3,0);
     8f4:	7c 17 db a6 	mtspr   887,r0

	for(I = 15; I >= 0 && Regions != 0; I--) {
     8f8:	2f 9f 00 00 	cmpwi   cr7,r31,0
     8fc:	41 9e 00 40 	beq-    cr7,93c <Xil_ICacheEnableRegion+0x88>
     900:	38 00 00 10 	li      r0,16
     904:	39 20 00 1e 	li      r9,30
     908:	7c 09 03 a6 	mtctr   r0
     90c:	48 00 00 08 	b       914 <Xil_ICacheEnableRegion+0x60>
     910:	41 82 00 2c 	beq-    93c <Xil_ICacheEnableRegion+0x88>
		/* all TLB entries in 4GB of memory */
		if((Regions & 0x3) > 0) {
     914:	73 e0 00 03 	andi.   r0,r31,3
     918:	41 82 00 18 	beq-    930 <Xil_ICacheEnableRegion+0x7c>
			/* either bit in this region is set */
			Index = I + I;
			/* instruction entry indices = 0,2,4,...,14 */
			TlbWord = tlbre(Index, 2);
     91c:	7c 09 17 64 	.long 0x7c091764
			sync;
     920:	7c 00 04 ac 	sync    
			/* unset cache inhibit bit, leave write-through bit
			 * as it is */
			tlbwe(TlbWord & 0xFFFFFBFF, Index, 2);
     924:	54 00 05 a8 	rlwinm  r0,r0,0,22,20
     928:	7c 09 17 a4 	.long 0x7c0917a4
			isync;
     92c:	4c 00 01 2c 	isync
		}
		Regions = Regions >> 2;
     930:	39 29 ff fe 	addi    r9,r9,-2
	mtspr(XREG_SPR_ITV0,0);  /* Set ITV0-3 */
	mtspr(XREG_SPR_ITV1,0);
	mtspr(XREG_SPR_ITV2,0);
	mtspr(XREG_SPR_ITV3,0);

	for(I = 15; I >= 0 && Regions != 0; I--) {
     934:	57 ff f0 bf 	rlwinm. r31,r31,30,2,31
     938:	42 00 ff d8 	bdnz+   910 <Xil_ICacheEnableRegion+0x5c>
			isync;
		}
		Regions = Regions >> 2;
		/* check next region */
	}
}
     93c:	80 01 00 14 	lwz     r0,20(r1)
     940:	83 e1 00 0c 	lwz     r31,12(r1)
     944:	38 21 00 10 	addi    r1,r1,16
     948:	7c 08 03 a6 	mtlr    r0
     94c:	4e 80 00 20 	blr

00000950 <Xil_ICacheEnable>:
* peripherals around these smaller memory regions.
*
****************************************************************************/
void Xil_ICacheEnable()
{
	Xil_ICacheEnableRegion(0x80000001);
     950:	3c 60 80 00 	lis     r3,-32768
     954:	60 63 00 01 	ori     r3,r3,1
     958:	4b ff ff 5c 	b       8b4 <Xil_ICacheEnableRegion>

0000095c <Xil_ICacheInvalidateRange>:
void Xil_ICacheInvalidateRange(u32 Addr, unsigned Len)
{
	const unsigned Cacheline = 32;
	unsigned int End;

	if (Len != 0) {
     95c:	2c 04 00 00 	cmpwi   r4,0
     960:	4d 82 00 20 	beqlr   
		/* Back the starting address up to the start of a cache line
		 * perform cache operations until Addr+Len
		 */
		End = Addr + Len;
		Addr = Addr & ~(Cacheline - 1);
     964:	54 6a 00 34 	rlwinm  r10,r3,0,0,26

	if (Len != 0) {
		/* Back the starting address up to the start of a cache line
		 * perform cache operations until Addr+Len
		 */
		End = Addr + Len;
     968:	7c 64 1a 14 	add     r3,r4,r3
		Addr = Addr & ~(Cacheline - 1);

		while (Addr < End) {
     96c:	7f 83 50 40 	cmplw   cr7,r3,r10
     970:	4c 9d 00 20 	blelr   cr7
*
*
****************************************************************************/
static void ICacheInvalidateLine(u32 Addr)
{
	unsigned int OldMsr = mfmsr();
     974:	7d 60 00 a6 	mfmsr   r11
	/* copy IS bit over DS bit */
	sync;
     978:	7c 00 04 ac 	sync    
	mtmsr( (OldMsr & 0xffffffef) | ((OldMsr >> 1) & 0x00000010));
     97c:	7d 60 5b 78 	mr      r0,r11
     980:	51 60 fe f6 	rlwimi  r0,r11,31,27,27
     984:	7c 00 01 24 	mtmsr   r0
	icbi(Addr);
     988:	39 20 00 00 	li      r9,0
     98c:	7c 09 57 ac 	icbi    r9,r10
	mtmsr(OldMsr); /* restore MSR */
     990:	7d 60 01 24 	mtmsr   r11
	isync;
     994:	4c 00 01 2c 	isync
		End = Addr + Len;
		Addr = Addr & ~(Cacheline - 1);

		while (Addr < End) {
			ICacheInvalidateLine(Addr);
			Addr += Cacheline;
     998:	39 4a 00 20 	addi    r10,r10,32
		 * perform cache operations until Addr+Len
		 */
		End = Addr + Len;
		Addr = Addr & ~(Cacheline - 1);

		while (Addr < End) {
     99c:	7f 83 50 40 	cmplw   cr7,r3,r10
     9a0:	41 9d ff d4 	bgt+    cr7,974 <Xil_ICacheInvalidateRange+0x18>
     9a4:	4e 80 00 20 	blr

000009a8 <XTft_SetColor>:
*		6 bits each and bit positions as Red[8-13], Green[16-21],
*		Blue[24-29].
*
****************************************************************************/
void XTft_SetColor(XTft *InstancePtr, u32 FgColor, u32 BgColor)
{
     9a8:	94 21 ff f0 	stwu    r1,-16(r1)
     9ac:	7c 08 02 a6 	mflr    r0
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
     9b0:	7c 69 1b 79 	mr.     r9,r3
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
     9b4:	3d 60 11 11 	lis     r11,4369
void XTft_SetColor(XTft *InstancePtr, u32 FgColor, u32 BgColor)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
     9b8:	3c 60 00 00 	lis     r3,0
*		6 bits each and bit positions as Red[8-13], Green[16-21],
*		Blue[24-29].
*
****************************************************************************/
void XTft_SetColor(XTft *InstancePtr, u32 FgColor, u32 BgColor)
{
     9bc:	7c 8a 23 78 	mr      r10,r4
     9c0:	93 e1 00 0c 	stw     r31,12(r1)
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
     9c4:	61 6b 11 11 	ori     r11,r11,4369
*		6 bits each and bit positions as Red[8-13], Green[16-21],
*		Blue[24-29].
*
****************************************************************************/
void XTft_SetColor(XTft *InstancePtr, u32 FgColor, u32 BgColor)
{
     9c8:	90 01 00 14 	stw     r0,20(r1)
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
     9cc:	38 63 2f 1c 	addi    r3,r3,12060
     9d0:	3f e0 00 00 	lis     r31,0
     9d4:	39 00 00 00 	li      r8,0
     9d8:	38 80 01 1a 	li      r4,282
     9dc:	41 82 00 60 	beq-    a3c <XTft_SetColor+0x94>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
     9e0:	80 09 00 14 	lwz     r0,20(r9)
     9e4:	3c 60 00 00 	lis     r3,0
     9e8:	38 63 2f 1c 	addi    r3,r3,12060
     9ec:	38 80 01 1b 	li      r4,283
void XTft_SetColor(XTft *InstancePtr, u32 FgColor, u32 BgColor)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
     9f0:	91 1f 35 14 	stw     r8,13588(r31)
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
     9f4:	7f 80 58 00 	cmpw    cr7,r0,r11
     9f8:	41 9e 00 24 	beq-    cr7,a1c <XTft_SetColor+0x74>
     9fc:	48 00 21 e5 	bl      2be0 <Xil_Assert>
     a00:	38 00 00 01 	li      r0,1
     a04:	90 1f 35 14 	stw     r0,13588(r31)
	 * Update the values in the instance structure.
	 */
	InstancePtr->BgColor = BgColor;
	InstancePtr->FgColor = FgColor;

}
     a08:	80 01 00 14 	lwz     r0,20(r1)
     a0c:	83 e1 00 0c 	lwz     r31,12(r1)
     a10:	38 21 00 10 	addi    r1,r1,16
     a14:	7c 08 03 a6 	mtlr    r0
     a18:	4e 80 00 20 	blr
     a1c:	80 01 00 14 	lwz     r0,20(r1)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
     a20:	91 1f 35 14 	stw     r8,13588(r31)
	 * Update the values in the instance structure.
	 */
	InstancePtr->BgColor = BgColor;
	InstancePtr->FgColor = FgColor;

}
     a24:	83 e1 00 0c 	lwz     r31,12(r1)
     a28:	38 21 00 10 	addi    r1,r1,16
     a2c:	7c 08 03 a6 	mtlr    r0

	/*
	 * Update the values in the instance structure.
	 */
	InstancePtr->BgColor = BgColor;
	InstancePtr->FgColor = FgColor;
     a30:	91 49 00 20 	stw     r10,32(r9)
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);

	/*
	 * Update the values in the instance structure.
	 */
	InstancePtr->BgColor = BgColor;
     a34:	90 a9 00 24 	stw     r5,36(r9)
	InstancePtr->FgColor = FgColor;

}
     a38:	4e 80 00 20 	blr
void XTft_SetColor(XTft *InstancePtr, u32 FgColor, u32 BgColor)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
     a3c:	48 00 21 a5 	bl      2be0 <Xil_Assert>
     a40:	38 00 00 01 	li      r0,1
     a44:	3d 20 00 00 	lis     r9,0
     a48:	90 09 35 14 	stw     r0,13588(r9)
     a4c:	4b ff ff bc 	b       a08 <XTft_SetColor+0x60>

00000a50 <XTft_SetPos>:
*
* @note		None.
*
****************************************************************************/
void XTft_SetPos(XTft *InstancePtr, u32 ColVal, u32 RowVal)
{
     a50:	94 21 ff f0 	stwu    r1,-16(r1)
     a54:	7c 08 02 a6 	mflr    r0
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
     a58:	2c 03 00 00 	cmpwi   r3,0
*
* @note		None.
*
****************************************************************************/
void XTft_SetPos(XTft *InstancePtr, u32 ColVal, u32 RowVal)
{
     a5c:	93 e1 00 0c 	stw     r31,12(r1)
     a60:	90 01 00 14 	stw     r0,20(r1)
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
     a64:	41 82 00 d0 	beq-    b34 <XTft_SetPos+0xe4>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
     a68:	80 03 00 14 	lwz     r0,20(r3)
     a6c:	3d 20 11 11 	lis     r9,4369
     a70:	61 29 11 11 	ori     r9,r9,4369
void XTft_SetPos(XTft *InstancePtr, u32 ColVal, u32 RowVal)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
     a74:	3f e0 00 00 	lis     r31,0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
     a78:	7f 80 48 00 	cmpw    cr7,r0,r9
void XTft_SetPos(XTft *InstancePtr, u32 ColVal, u32 RowVal)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
     a7c:	38 00 00 00 	li      r0,0
     a80:	90 1f 35 14 	stw     r0,13588(r31)
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
     a84:	41 9e 00 30 	beq-    cr7,ab4 <XTft_SetPos+0x64>
     a88:	3c 60 00 00 	lis     r3,0
     a8c:	38 80 00 b7 	li      r4,183
     a90:	38 63 2f 1c 	addi    r3,r3,12060
     a94:	48 00 21 4d 	bl      2be0 <Xil_Assert>
     a98:	38 00 00 01 	li      r0,1
     a9c:	90 1f 35 14 	stw     r0,13588(r31)
	 * Update the column, row position values.
	 */
	InstancePtr->ColVal = ColVal;
	InstancePtr->RowVal = RowVal;

}
     aa0:	80 01 00 14 	lwz     r0,20(r1)
     aa4:	83 e1 00 0c 	lwz     r31,12(r1)
     aa8:	38 21 00 10 	addi    r1,r1,16
     aac:	7c 08 03 a6 	mtlr    r0
     ab0:	4e 80 00 20 	blr
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid(ColVal <= (XTFT_DISPLAY_WIDTH - 1));
     ab4:	2b 84 02 7f 	cmplwi  cr7,r4,639
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
     ab8:	90 1f 35 14 	stw     r0,13588(r31)
	Xil_AssertVoid(ColVal <= (XTFT_DISPLAY_WIDTH - 1));
     abc:	41 9d 00 30 	bgt-    cr7,aec <XTft_SetPos+0x9c>
	Xil_AssertVoid(RowVal <= (XTFT_DISPLAY_HEIGHT - 1));
     ac0:	2b 85 01 df 	cmplwi  cr7,r5,479
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid(ColVal <= (XTFT_DISPLAY_WIDTH - 1));
     ac4:	90 1f 35 14 	stw     r0,13588(r31)
	Xil_AssertVoid(RowVal <= (XTFT_DISPLAY_HEIGHT - 1));
     ac8:	41 9d 00 50 	bgt-    cr7,b18 <XTft_SetPos+0xc8>
     acc:	90 1f 35 14 	stw     r0,13588(r31)
	 * Update the column, row position values.
	 */
	InstancePtr->ColVal = ColVal;
	InstancePtr->RowVal = RowVal;

}
     ad0:	80 01 00 14 	lwz     r0,20(r1)
     ad4:	83 e1 00 0c 	lwz     r31,12(r1)
     ad8:	38 21 00 10 	addi    r1,r1,16

	/*
	 * Update the column, row position values.
	 */
	InstancePtr->ColVal = ColVal;
	InstancePtr->RowVal = RowVal;
     adc:	90 a3 00 1c 	stw     r5,28(r3)

}
     ae0:	7c 08 03 a6 	mtlr    r0
	Xil_AssertVoid(RowVal <= (XTFT_DISPLAY_HEIGHT - 1));

	/*
	 * Update the column, row position values.
	 */
	InstancePtr->ColVal = ColVal;
     ae4:	90 83 00 18 	stw     r4,24(r3)
	InstancePtr->RowVal = RowVal;

}
     ae8:	4e 80 00 20 	blr
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid(ColVal <= (XTFT_DISPLAY_WIDTH - 1));
     aec:	3c 60 00 00 	lis     r3,0
     af0:	38 80 00 b8 	li      r4,184
     af4:	38 63 2f 1c 	addi    r3,r3,12060
     af8:	48 00 20 e9 	bl      2be0 <Xil_Assert>
     afc:	38 00 00 01 	li      r0,1
     b00:	90 1f 35 14 	stw     r0,13588(r31)
	 * Update the column, row position values.
	 */
	InstancePtr->ColVal = ColVal;
	InstancePtr->RowVal = RowVal;

}
     b04:	80 01 00 14 	lwz     r0,20(r1)
     b08:	83 e1 00 0c 	lwz     r31,12(r1)
     b0c:	38 21 00 10 	addi    r1,r1,16
     b10:	7c 08 03 a6 	mtlr    r0
     b14:	4e 80 00 20 	blr
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid(ColVal <= (XTFT_DISPLAY_WIDTH - 1));
	Xil_AssertVoid(RowVal <= (XTFT_DISPLAY_HEIGHT - 1));
     b18:	3c 60 00 00 	lis     r3,0
     b1c:	38 80 00 b9 	li      r4,185
     b20:	38 63 2f 1c 	addi    r3,r3,12060
     b24:	48 00 20 bd 	bl      2be0 <Xil_Assert>
     b28:	38 00 00 01 	li      r0,1
     b2c:	90 1f 35 14 	stw     r0,13588(r31)
     b30:	4b ff ff 70 	b       aa0 <XTft_SetPos+0x50>
void XTft_SetPos(XTft *InstancePtr, u32 ColVal, u32 RowVal)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
     b34:	3c 60 00 00 	lis     r3,0
     b38:	38 80 00 b6 	li      r4,182
     b3c:	38 63 2f 1c 	addi    r3,r3,12060
     b40:	48 00 20 a1 	bl      2be0 <Xil_Assert>
     b44:	38 00 00 01 	li      r0,1
     b48:	3d 20 00 00 	lis     r9,0
     b4c:	90 09 35 14 	stw     r0,13588(r9)
     b50:	4b ff ff 50 	b       aa0 <XTft_SetPos+0x50>

00000b54 <XTft_GetPixel>:
*		Controller is connected to. The data is read
*		from the Video Memory.
*
****************************************************************************/
void XTft_GetPixel(XTft *InstancePtr, u32 ColVal, u32 RowVal, u32 *PixelVal)
{
     b54:	94 21 ff f0 	stwu    r1,-16(r1)
     b58:	7c 08 02 a6 	mflr    r0
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
     b5c:	2c 03 00 00 	cmpwi   r3,0
*		Controller is connected to. The data is read
*		from the Video Memory.
*
****************************************************************************/
void XTft_GetPixel(XTft *InstancePtr, u32 ColVal, u32 RowVal, u32 *PixelVal)
{
     b60:	93 c1 00 08 	stw     r30,8(r1)
     b64:	7c de 33 78 	mr      r30,r6
     b68:	93 e1 00 0c 	stw     r31,12(r1)
     b6c:	90 01 00 14 	stw     r0,20(r1)
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
     b70:	41 82 01 00 	beq-    c70 <XTft_GetPixel+0x11c>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
     b74:	80 03 00 14 	lwz     r0,20(r3)
     b78:	3d 20 11 11 	lis     r9,4369
     b7c:	61 29 11 11 	ori     r9,r9,4369
void XTft_GetPixel(XTft *InstancePtr, u32 ColVal, u32 RowVal, u32 *PixelVal)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
     b80:	3f e0 00 00 	lis     r31,0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
     b84:	7f 80 48 00 	cmpw    cr7,r0,r9
void XTft_GetPixel(XTft *InstancePtr, u32 ColVal, u32 RowVal, u32 *PixelVal)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
     b88:	39 20 00 00 	li      r9,0
     b8c:	91 3f 35 14 	stw     r9,13588(r31)
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
     b90:	41 9e 00 34 	beq-    cr7,bc4 <XTft_GetPixel+0x70>
     b94:	3c 60 00 00 	lis     r3,0
     b98:	38 80 01 68 	li      r4,360
     b9c:	38 63 2f 1c 	addi    r3,r3,12060
     ba0:	48 00 20 41 	bl      2be0 <Xil_Assert>
     ba4:	38 00 00 01 	li      r0,1
     ba8:	90 1f 35 14 	stw     r0,13588(r31)
	 * Get the color of the pixel at the given position.
	 */
	*PixelVal = Xil_In32(InstancePtr->TftConfig.VideoMemBaseAddr +
				(4 * (RowVal * XTFT_DISPLAY_BUFFER_WIDTH) + ColVal));

}
     bac:	80 01 00 14 	lwz     r0,20(r1)
     bb0:	83 c1 00 08 	lwz     r30,8(r1)
     bb4:	83 e1 00 0c 	lwz     r31,12(r1)
     bb8:	38 21 00 10 	addi    r1,r1,16
     bbc:	7c 08 03 a6 	mtlr    r0
     bc0:	4e 80 00 20 	blr
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid(ColVal <= (XTFT_DISPLAY_WIDTH - 1));
     bc4:	2b 84 02 7f 	cmplwi  cr7,r4,639
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
     bc8:	91 3f 35 14 	stw     r9,13588(r31)
	Xil_AssertVoid(ColVal <= (XTFT_DISPLAY_WIDTH - 1));
     bcc:	41 9d 00 74 	bgt-    cr7,c40 <XTft_GetPixel+0xec>
	Xil_AssertVoid(RowVal <= (XTFT_DISPLAY_HEIGHT - 1));
     bd0:	2b 85 01 df 	cmplwi  cr7,r5,479
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid(ColVal <= (XTFT_DISPLAY_WIDTH - 1));
     bd4:	91 3f 35 14 	stw     r9,13588(r31)
	Xil_AssertVoid(RowVal <= (XTFT_DISPLAY_HEIGHT - 1));
     bd8:	41 9d 00 38 	bgt-    cr7,c10 <XTft_GetPixel+0xbc>

	/*
	 * Get the color of the pixel at the given position.
	 */
	*PixelVal = Xil_In32(InstancePtr->TftConfig.VideoMemBaseAddr +
     bdc:	80 63 00 08 	lwz     r3,8(r3)
     be0:	54 a0 60 26 	rlwinm  r0,r5,12,0,19
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid(ColVal <= (XTFT_DISPLAY_WIDTH - 1));
	Xil_AssertVoid(RowVal <= (XTFT_DISPLAY_HEIGHT - 1));
     be4:	91 3f 35 14 	stw     r9,13588(r31)

	/*
	 * Get the color of the pixel at the given position.
	 */
	*PixelVal = Xil_In32(InstancePtr->TftConfig.VideoMemBaseAddr +
     be8:	7c 64 1a 14 	add     r3,r4,r3
     bec:	7c 60 1a 14 	add     r3,r0,r3
     bf0:	48 00 20 61 	bl      2c50 <Xil_In32>
				(4 * (RowVal * XTFT_DISPLAY_BUFFER_WIDTH) + ColVal));

}
     bf4:	80 01 00 14 	lwz     r0,20(r1)
	Xil_AssertVoid(RowVal <= (XTFT_DISPLAY_HEIGHT - 1));

	/*
	 * Get the color of the pixel at the given position.
	 */
	*PixelVal = Xil_In32(InstancePtr->TftConfig.VideoMemBaseAddr +
     bf8:	90 7e 00 00 	stw     r3,0(r30)
				(4 * (RowVal * XTFT_DISPLAY_BUFFER_WIDTH) + ColVal));

}
     bfc:	83 e1 00 0c 	lwz     r31,12(r1)
     c00:	83 c1 00 08 	lwz     r30,8(r1)
     c04:	7c 08 03 a6 	mtlr    r0
     c08:	38 21 00 10 	addi    r1,r1,16
     c0c:	4e 80 00 20 	blr
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid(ColVal <= (XTFT_DISPLAY_WIDTH - 1));
	Xil_AssertVoid(RowVal <= (XTFT_DISPLAY_HEIGHT - 1));
     c10:	3c 60 00 00 	lis     r3,0
     c14:	38 80 01 6a 	li      r4,362
     c18:	38 63 2f 1c 	addi    r3,r3,12060
     c1c:	48 00 1f c5 	bl      2be0 <Xil_Assert>
     c20:	38 00 00 01 	li      r0,1
     c24:	90 1f 35 14 	stw     r0,13588(r31)
	 * Get the color of the pixel at the given position.
	 */
	*PixelVal = Xil_In32(InstancePtr->TftConfig.VideoMemBaseAddr +
				(4 * (RowVal * XTFT_DISPLAY_BUFFER_WIDTH) + ColVal));

}
     c28:	80 01 00 14 	lwz     r0,20(r1)
     c2c:	83 c1 00 08 	lwz     r30,8(r1)
     c30:	83 e1 00 0c 	lwz     r31,12(r1)
     c34:	38 21 00 10 	addi    r1,r1,16
     c38:	7c 08 03 a6 	mtlr    r0
     c3c:	4e 80 00 20 	blr
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid(ColVal <= (XTFT_DISPLAY_WIDTH - 1));
     c40:	3c 60 00 00 	lis     r3,0
     c44:	38 80 01 69 	li      r4,361
     c48:	38 63 2f 1c 	addi    r3,r3,12060
     c4c:	48 00 1f 95 	bl      2be0 <Xil_Assert>
     c50:	38 00 00 01 	li      r0,1
     c54:	90 1f 35 14 	stw     r0,13588(r31)
	 * Get the color of the pixel at the given position.
	 */
	*PixelVal = Xil_In32(InstancePtr->TftConfig.VideoMemBaseAddr +
				(4 * (RowVal * XTFT_DISPLAY_BUFFER_WIDTH) + ColVal));

}
     c58:	80 01 00 14 	lwz     r0,20(r1)
     c5c:	83 c1 00 08 	lwz     r30,8(r1)
     c60:	83 e1 00 0c 	lwz     r31,12(r1)
     c64:	38 21 00 10 	addi    r1,r1,16
     c68:	7c 08 03 a6 	mtlr    r0
     c6c:	4e 80 00 20 	blr
void XTft_GetPixel(XTft *InstancePtr, u32 ColVal, u32 RowVal, u32 *PixelVal)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
     c70:	3c 60 00 00 	lis     r3,0
     c74:	38 80 01 67 	li      r4,359
     c78:	38 63 2f 1c 	addi    r3,r3,12060
     c7c:	48 00 1f 65 	bl      2be0 <Xil_Assert>
     c80:	38 00 00 01 	li      r0,1
     c84:	3d 20 00 00 	lis     r9,0
     c88:	90 09 35 14 	stw     r0,13588(r9)
     c8c:	4b ff ff 20 	b       bac <XTft_GetPixel+0x58>

00000c90 <XTft_ReadReg>:
* the TFT core is connected directly to a DCR bus or a PLB bus - The driver
* takes care of this.
*
****************************************************************************/
u32 XTft_ReadReg(XTft* InstancePtr, u32 RegOffset)
{
     c90:	94 21 ff f0 	stwu    r1,-16(r1)
     c94:	7c 08 02 a6 	mflr    r0
	u32 Data = 0;
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
     c98:	7c 6b 1b 79 	mr.     r11,r3
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
     c9c:	3d 20 11 11 	lis     r9,4369
{
	u32 Data = 0;
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
     ca0:	3c 60 00 00 	lis     r3,0
* the TFT core is connected directly to a DCR bus or a PLB bus - The driver
* takes care of this.
*
****************************************************************************/
u32 XTft_ReadReg(XTft* InstancePtr, u32 RegOffset)
{
     ca4:	7c 88 23 78 	mr      r8,r4
     ca8:	93 e1 00 0c 	stw     r31,12(r1)
	u32 Data = 0;
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
     cac:	61 29 11 11 	ori     r9,r9,4369
* the TFT core is connected directly to a DCR bus or a PLB bus - The driver
* takes care of this.
*
****************************************************************************/
u32 XTft_ReadReg(XTft* InstancePtr, u32 RegOffset)
{
     cb0:	90 01 00 14 	stw     r0,20(r1)
	u32 Data = 0;
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
     cb4:	38 63 2f 1c 	addi    r3,r3,12060
     cb8:	3f e0 00 00 	lis     r31,0
     cbc:	39 40 00 00 	li      r10,0
     cc0:	38 80 03 6a 	li      r4,874
     cc4:	41 82 00 9c 	beq-    d60 <XTft_ReadReg+0xd0>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
     cc8:	80 0b 00 14 	lwz     r0,20(r11)
     ccc:	3c 60 00 00 	lis     r3,0
     cd0:	38 63 2f 1c 	addi    r3,r3,12060
     cd4:	38 80 03 6b 	li      r4,875
{
	u32 Data = 0;
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
     cd8:	91 5f 35 14 	stw     r10,13588(r31)
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
     cdc:	7f 80 48 00 	cmpw    cr7,r0,r9
     ce0:	41 9e 00 28 	beq-    cr7,d08 <XTft_ReadReg+0x78>
     ce4:	48 00 1e fd 	bl      2be0 <Xil_Assert>
     ce8:	38 00 00 01 	li      r0,1
     cec:	90 1f 35 14 	stw     r0,13588(r31)
     cf0:	38 60 00 00 	li      r3,0
#endif /*__PPC__*/
#endif /* XPAR_TFT_USE_DCR_BRIDGE */
	}
	return Data;

}
     cf4:	80 01 00 14 	lwz     r0,20(r1)
     cf8:	83 e1 00 0c 	lwz     r31,12(r1)
     cfc:	38 21 00 10 	addi    r1,r1,16
     d00:	7c 08 03 a6 	mtlr    r0
     d04:	4e 80 00 20 	blr

	/*
	 * To check if the TFT controller is accessed through DCR bus
	 * directly or PLB bus directly.
	 */
	if (InstancePtr->TftConfig.PlbAccess) {
     d08:	a0 0b 00 0c 	lhz     r0,12(r11)
	u32 Data = 0;
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
     d0c:	91 5f 35 14 	stw     r10,13588(r31)

	/*
	 * To check if the TFT controller is accessed through DCR bus
	 * directly or PLB bus directly.
	 */
	if (InstancePtr->TftConfig.PlbAccess) {
     d10:	2f 80 00 00 	cmpwi   cr7,r0,0
     d14:	41 9e 00 24 	beq-    cr7,d38 <XTft_ReadReg+0xa8>
		/*
		 * Read the Register.
		 */
		Data = Xil_In32(InstancePtr->TftConfig.BaseAddress +
     d18:	80 6b 00 04 	lwz     r3,4(r11)
     d1c:	7c 68 1a 14 	add     r3,r8,r3
     d20:	48 00 1f 31 	bl      2c50 <Xil_In32>
#endif /*__PPC__*/
#endif /* XPAR_TFT_USE_DCR_BRIDGE */
	}
	return Data;

}
     d24:	80 01 00 14 	lwz     r0,20(r1)
     d28:	83 e1 00 0c 	lwz     r31,12(r1)
     d2c:	38 21 00 10 	addi    r1,r1,16
     d30:	7c 08 03 a6 	mtlr    r0
     d34:	4e 80 00 20 	blr
#else
		/*
		 * Read the Register.
		 */
#ifdef __PPC__
		Data = XIo_DcrIn((InstancePtr->TftConfig.DcrBaseAddr +
     d38:	80 0b 00 10 	lwz     r0,16(r11)
     d3c:	55 03 f0 be 	rlwinm  r3,r8,30,2,31
     d40:	7c 63 02 14 	add     r3,r3,r0
     d44:	54 63 05 3e 	clrlwi  r3,r3,20
     d48:	48 00 1b f1 	bl      2938 <XIo_DcrIn>
#endif /*__PPC__*/
#endif /* XPAR_TFT_USE_DCR_BRIDGE */
	}
	return Data;

}
     d4c:	80 01 00 14 	lwz     r0,20(r1)
     d50:	83 e1 00 0c 	lwz     r31,12(r1)
     d54:	38 21 00 10 	addi    r1,r1,16
     d58:	7c 08 03 a6 	mtlr    r0
     d5c:	4e 80 00 20 	blr
{
	u32 Data = 0;
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
     d60:	48 00 1e 81 	bl      2be0 <Xil_Assert>
     d64:	38 00 00 01 	li      r0,1
     d68:	3d 20 00 00 	lis     r9,0
     d6c:	38 60 00 00 	li      r3,0
     d70:	90 09 35 14 	stw     r0,13588(r9)
     d74:	4b ff ff 80 	b       cf4 <XTft_ReadReg+0x64>

00000d78 <XTft_GetVsyncStatus>:
*		after it loads the address from the Address Register and starts
*		displaying the Frame.
*
****************************************************************************/
int XTft_GetVsyncStatus(XTft* InstancePtr)
{
     d78:	94 21 ff f0 	stwu    r1,-16(r1)
     d7c:	7c 08 02 a6 	mflr    r0
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
     d80:	7c 69 1b 79 	mr.     r9,r3
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
     d84:	3d 60 11 11 	lis     r11,4369
     d88:	61 6b 11 11 	ori     r11,r11,4369
int XTft_GetVsyncStatus(XTft* InstancePtr)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
     d8c:	38 80 04 32 	li      r4,1074
*		after it loads the address from the Address Register and starts
*		displaying the Frame.
*
****************************************************************************/
int XTft_GetVsyncStatus(XTft* InstancePtr)
{
     d90:	93 e1 00 0c 	stw     r31,12(r1)
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
     d94:	39 40 00 00 	li      r10,0
*		after it loads the address from the Address Register and starts
*		displaying the Frame.
*
****************************************************************************/
int XTft_GetVsyncStatus(XTft* InstancePtr)
{
     d98:	90 01 00 14 	stw     r0,20(r1)
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
     d9c:	3f e0 00 00 	lis     r31,0
     da0:	41 82 00 68 	beq-    e08 <XTft_GetVsyncStatus+0x90>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
     da4:	80 09 00 14 	lwz     r0,20(r9)
     da8:	38 80 04 33 	li      r4,1075
int XTft_GetVsyncStatus(XTft* InstancePtr)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
     dac:	91 5f 35 14 	stw     r10,13588(r31)
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
     db0:	7f 80 58 00 	cmpw    cr7,r0,r11
     db4:	41 9e 00 30 	beq-    cr7,de4 <XTft_GetVsyncStatus+0x6c>
     db8:	3c 60 00 00 	lis     r3,0
     dbc:	38 63 2f 1c 	addi    r3,r3,12060
     dc0:	48 00 1e 21 	bl      2be0 <Xil_Assert>
     dc4:	38 00 00 01 	li      r0,1
     dc8:	90 1f 35 14 	stw     r0,13588(r31)
     dcc:	38 60 00 00 	li      r3,0
	/*
	 * Read the contents of Interrupt Enable and Status Register.
	 */
	return((XTft_ReadReg(InstancePtr, XTFT_IESR_OFFSET) &
		XTFT_IESR_VADDRLATCH_STATUS_MASK)? TRUE : FALSE);
}
     dd0:	80 01 00 14 	lwz     r0,20(r1)
     dd4:	83 e1 00 0c 	lwz     r31,12(r1)
     dd8:	38 21 00 10 	addi    r1,r1,16
     ddc:	7c 08 03 a6 	mtlr    r0
     de0:	4e 80 00 20 	blr
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);

	/*
	 * Read the contents of Interrupt Enable and Status Register.
	 */
	return((XTft_ReadReg(InstancePtr, XTFT_IESR_OFFSET) &
     de4:	38 80 00 08 	li      r4,8
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
     de8:	91 5f 35 14 	stw     r10,13588(r31)

	/*
	 * Read the contents of Interrupt Enable and Status Register.
	 */
	return((XTft_ReadReg(InstancePtr, XTFT_IESR_OFFSET) &
     dec:	4b ff fe a5 	bl      c90 <XTft_ReadReg>
		XTFT_IESR_VADDRLATCH_STATUS_MASK)? TRUE : FALSE);
}
     df0:	80 01 00 14 	lwz     r0,20(r1)
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);

	/*
	 * Read the contents of Interrupt Enable and Status Register.
	 */
	return((XTft_ReadReg(InstancePtr, XTFT_IESR_OFFSET) &
     df4:	54 63 07 fe 	clrlwi  r3,r3,31
		XTFT_IESR_VADDRLATCH_STATUS_MASK)? TRUE : FALSE);
}
     df8:	83 e1 00 0c 	lwz     r31,12(r1)
     dfc:	38 21 00 10 	addi    r1,r1,16
     e00:	7c 08 03 a6 	mtlr    r0
     e04:	4e 80 00 20 	blr
int XTft_GetVsyncStatus(XTft* InstancePtr)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
     e08:	3c 60 00 00 	lis     r3,0
     e0c:	38 63 2f 1c 	addi    r3,r3,12060
     e10:	48 00 1d d1 	bl      2be0 <Xil_Assert>
     e14:	38 00 00 01 	li      r0,1
     e18:	3d 20 00 00 	lis     r9,0
     e1c:	38 60 00 00 	li      r3,0
     e20:	90 09 35 14 	stw     r0,13588(r9)
     e24:	4b ff ff ac 	b       dd0 <XTft_GetVsyncStatus+0x58>

00000e28 <XTft_SetPixel>:
*		Controller is connected to. The data is written
*		to the Video Memory.
*
****************************************************************************/
void XTft_SetPixel(XTft *InstancePtr, u32 ColVal, u32 RowVal, u32 PixelVal)
{
     e28:	94 21 ff f0 	stwu    r1,-16(r1)
     e2c:	7c 08 02 a6 	mflr    r0
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
     e30:	7c 6a 1b 79 	mr.     r10,r3
*		Controller is connected to. The data is written
*		to the Video Memory.
*
****************************************************************************/
void XTft_SetPixel(XTft *InstancePtr, u32 ColVal, u32 RowVal, u32 PixelVal)
{
     e34:	93 e1 00 0c 	stw     r31,12(r1)
     e38:	90 01 00 14 	stw     r0,20(r1)
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
     e3c:	41 82 00 f4 	beq-    f30 <XTft_SetPixel+0x108>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
     e40:	80 0a 00 14 	lwz     r0,20(r10)
     e44:	3d 20 11 11 	lis     r9,4369
     e48:	61 29 11 11 	ori     r9,r9,4369
void XTft_SetPixel(XTft *InstancePtr, u32 ColVal, u32 RowVal, u32 PixelVal)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
     e4c:	3f e0 00 00 	lis     r31,0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
     e50:	7f 80 48 00 	cmpw    cr7,r0,r9
void XTft_SetPixel(XTft *InstancePtr, u32 ColVal, u32 RowVal, u32 PixelVal)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
     e54:	39 20 00 00 	li      r9,0
     e58:	91 3f 35 14 	stw     r9,13588(r31)
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
     e5c:	41 9e 00 30 	beq-    cr7,e8c <XTft_SetPixel+0x64>
     e60:	3c 60 00 00 	lis     r3,0
     e64:	38 80 01 40 	li      r4,320
     e68:	38 63 2f 1c 	addi    r3,r3,12060
     e6c:	48 00 1d 75 	bl      2be0 <Xil_Assert>
     e70:	38 00 00 01 	li      r0,1
     e74:	90 1f 35 14 	stw     r0,13588(r31)
	 */
	Xil_Out32(InstancePtr->TftConfig.VideoMemBaseAddr +
		(4 * ((RowVal) * XTFT_DISPLAY_BUFFER_WIDTH + ColVal)),
		PixelVal);

}
     e78:	80 01 00 14 	lwz     r0,20(r1)
     e7c:	83 e1 00 0c 	lwz     r31,12(r1)
     e80:	38 21 00 10 	addi    r1,r1,16
     e84:	7c 08 03 a6 	mtlr    r0
     e88:	4e 80 00 20 	blr
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid(ColVal <= (XTFT_DISPLAY_WIDTH - 1));
     e8c:	2b 84 02 7f 	cmplwi  cr7,r4,639
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
     e90:	91 3f 35 14 	stw     r9,13588(r31)
	Xil_AssertVoid(ColVal <= (XTFT_DISPLAY_WIDTH - 1));
     e94:	41 9d 00 70 	bgt-    cr7,f04 <XTft_SetPixel+0xdc>
	Xil_AssertVoid(RowVal <= (XTFT_DISPLAY_HEIGHT - 1));
     e98:	2b 85 01 df 	cmplwi  cr7,r5,479
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid(ColVal <= (XTFT_DISPLAY_WIDTH - 1));
     e9c:	91 3f 35 14 	stw     r9,13588(r31)
	Xil_AssertVoid(RowVal <= (XTFT_DISPLAY_HEIGHT - 1));
     ea0:	41 9d 00 38 	bgt-    cr7,ed8 <XTft_SetPixel+0xb0>

	/*
	 * Set the pixel at the given position with the color value.
	 */
	Xil_Out32(InstancePtr->TftConfig.VideoMemBaseAddr +
     ea4:	80 0a 00 08 	lwz     r0,8(r10)
     ea8:	54 a3 50 2a 	rlwinm  r3,r5,10,0,21
     eac:	7c 64 1a 14 	add     r3,r4,r3
     eb0:	7c c4 33 78 	mr      r4,r6
     eb4:	54 63 10 3a 	rlwinm  r3,r3,2,0,29
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid(ColVal <= (XTFT_DISPLAY_WIDTH - 1));
	Xil_AssertVoid(RowVal <= (XTFT_DISPLAY_HEIGHT - 1));
     eb8:	91 3f 35 14 	stw     r9,13588(r31)

	/*
	 * Set the pixel at the given position with the color value.
	 */
	Xil_Out32(InstancePtr->TftConfig.VideoMemBaseAddr +
     ebc:	7c 63 02 14 	add     r3,r3,r0
     ec0:	48 00 1d d1 	bl      2c90 <Xil_Out32>
		(4 * ((RowVal) * XTFT_DISPLAY_BUFFER_WIDTH + ColVal)),
		PixelVal);

}
     ec4:	80 01 00 14 	lwz     r0,20(r1)
     ec8:	83 e1 00 0c 	lwz     r31,12(r1)
     ecc:	38 21 00 10 	addi    r1,r1,16
     ed0:	7c 08 03 a6 	mtlr    r0
     ed4:	4e 80 00 20 	blr
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid(ColVal <= (XTFT_DISPLAY_WIDTH - 1));
	Xil_AssertVoid(RowVal <= (XTFT_DISPLAY_HEIGHT - 1));
     ed8:	3c 60 00 00 	lis     r3,0
     edc:	38 80 01 42 	li      r4,322
     ee0:	38 63 2f 1c 	addi    r3,r3,12060
     ee4:	48 00 1c fd 	bl      2be0 <Xil_Assert>
     ee8:	38 00 00 01 	li      r0,1
     eec:	90 1f 35 14 	stw     r0,13588(r31)
	 */
	Xil_Out32(InstancePtr->TftConfig.VideoMemBaseAddr +
		(4 * ((RowVal) * XTFT_DISPLAY_BUFFER_WIDTH + ColVal)),
		PixelVal);

}
     ef0:	80 01 00 14 	lwz     r0,20(r1)
     ef4:	83 e1 00 0c 	lwz     r31,12(r1)
     ef8:	38 21 00 10 	addi    r1,r1,16
     efc:	7c 08 03 a6 	mtlr    r0
     f00:	4e 80 00 20 	blr
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid(ColVal <= (XTFT_DISPLAY_WIDTH - 1));
     f04:	3c 60 00 00 	lis     r3,0
     f08:	38 80 01 41 	li      r4,321
     f0c:	38 63 2f 1c 	addi    r3,r3,12060
     f10:	48 00 1c d1 	bl      2be0 <Xil_Assert>
     f14:	38 00 00 01 	li      r0,1
     f18:	90 1f 35 14 	stw     r0,13588(r31)
	 */
	Xil_Out32(InstancePtr->TftConfig.VideoMemBaseAddr +
		(4 * ((RowVal) * XTFT_DISPLAY_BUFFER_WIDTH + ColVal)),
		PixelVal);

}
     f1c:	80 01 00 14 	lwz     r0,20(r1)
     f20:	83 e1 00 0c 	lwz     r31,12(r1)
     f24:	38 21 00 10 	addi    r1,r1,16
     f28:	7c 08 03 a6 	mtlr    r0
     f2c:	4e 80 00 20 	blr
void XTft_SetPixel(XTft *InstancePtr, u32 ColVal, u32 RowVal, u32 PixelVal)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
     f30:	3c 60 00 00 	lis     r3,0
     f34:	38 80 01 3f 	li      r4,319
     f38:	38 63 2f 1c 	addi    r3,r3,12060
     f3c:	48 00 1c a5 	bl      2be0 <Xil_Assert>
     f40:	38 00 00 01 	li      r0,1
     f44:	3d 20 00 00 	lis     r9,0
     f48:	90 09 35 14 	stw     r0,13588(r9)
     f4c:	4b ff ff 2c 	b       e78 <XTft_SetPixel+0x50>

00000f50 <XTft_FillScreen>:
*		case with row position.
*
****************************************************************************/
void XTft_FillScreen(XTft* InstancePtr, u32 ColStartVal, u32 RowStartVal,
			u32 ColEndVal, u32 RowEndVal, u32 PixelVal)
{
     f50:	94 21 ff d8 	stwu    r1,-40(r1)
     f54:	7c 08 02 a6 	mflr    r0
     f58:	93 61 00 14 	stw     r27,20(r1)
	u32 RowIndex;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
     f5c:	7c 7b 1b 79 	mr.     r27,r3
*		case with row position.
*
****************************************************************************/
void XTft_FillScreen(XTft* InstancePtr, u32 ColStartVal, u32 RowStartVal,
			u32 ColEndVal, u32 RowEndVal, u32 PixelVal)
{
     f60:	93 21 00 0c 	stw     r25,12(r1)
     f64:	7c d9 33 78 	mr      r25,r6
     f68:	93 41 00 10 	stw     r26,16(r1)
     f6c:	7c ba 2b 78 	mr      r26,r5
     f70:	93 81 00 18 	stw     r28,24(r1)
     f74:	7d 1c 43 78 	mr      r28,r8
     f78:	93 a1 00 1c 	stw     r29,28(r1)
     f7c:	7c fd 3b 78 	mr      r29,r7
     f80:	93 c1 00 20 	stw     r30,32(r1)
     f84:	93 e1 00 24 	stw     r31,36(r1)
     f88:	90 01 00 2c 	stw     r0,44(r1)
	u32 RowIndex;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
     f8c:	41 82 01 60 	beq-    10ec <XTft_FillScreen+0x19c>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
     f90:	80 1b 00 14 	lwz     r0,20(r27)
     f94:	3d 20 11 11 	lis     r9,4369
     f98:	61 29 11 11 	ori     r9,r9,4369
	u32 RowIndex;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
     f9c:	3f e0 00 00 	lis     r31,0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
     fa0:	7f 80 48 00 	cmpw    cr7,r0,r9
	u32 RowIndex;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
     fa4:	38 00 00 00 	li      r0,0
     fa8:	90 1f 35 14 	stw     r0,13588(r31)
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
     fac:	41 9e 00 48 	beq-    cr7,ff4 <XTft_FillScreen+0xa4>
     fb0:	3c 60 00 00 	lis     r3,0
     fb4:	38 80 02 35 	li      r4,565
     fb8:	38 63 2f 1c 	addi    r3,r3,12060
     fbc:	48 00 1c 25 	bl      2be0 <Xil_Assert>
     fc0:	38 00 00 01 	li      r0,1
     fc4:	90 1f 35 14 	stw     r0,13588(r31)
			XTft_SetPixel(InstancePtr, ColIndex, RowIndex,
					PixelVal);
		}
	}

}
     fc8:	80 01 00 2c 	lwz     r0,44(r1)
     fcc:	83 21 00 0c 	lwz     r25,12(r1)
     fd0:	83 41 00 10 	lwz     r26,16(r1)
     fd4:	83 61 00 14 	lwz     r27,20(r1)
     fd8:	7c 08 03 a6 	mtlr    r0
     fdc:	83 81 00 18 	lwz     r28,24(r1)
     fe0:	83 a1 00 1c 	lwz     r29,28(r1)
     fe4:	83 c1 00 20 	lwz     r30,32(r1)
     fe8:	83 e1 00 24 	lwz     r31,36(r1)
     fec:	38 21 00 28 	addi    r1,r1,40
     ff0:	4e 80 00 20 	blr
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid(ColStartVal <= (XTFT_DISPLAY_WIDTH - 1));
     ff4:	2b 84 02 7f 	cmplwi  cr7,r4,639

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
     ff8:	90 1f 35 14 	stw     r0,13588(r31)
	Xil_AssertVoid(ColStartVal <= (XTFT_DISPLAY_WIDTH - 1));
     ffc:	41 9d 00 90 	bgt-    cr7,108c <XTft_FillScreen+0x13c>
	Xil_AssertVoid(RowStartVal <= (XTFT_DISPLAY_HEIGHT - 1));
    1000:	2b 85 01 df 	cmplwi  cr7,r5,479
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid(ColStartVal <= (XTFT_DISPLAY_WIDTH - 1));
    1004:	90 1f 35 14 	stw     r0,13588(r31)
	Xil_AssertVoid(RowStartVal <= (XTFT_DISPLAY_HEIGHT - 1));
    1008:	41 9d 00 c8 	bgt-    cr7,10d0 <XTft_FillScreen+0x180>
	Xil_AssertVoid(ColEndVal <= (XTFT_DISPLAY_WIDTH - 1));
    100c:	2b 86 02 7f 	cmplwi  cr7,r6,639
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid(ColStartVal <= (XTFT_DISPLAY_WIDTH - 1));
	Xil_AssertVoid(RowStartVal <= (XTFT_DISPLAY_HEIGHT - 1));
    1010:	90 1f 35 14 	stw     r0,13588(r31)
	Xil_AssertVoid(ColEndVal <= (XTFT_DISPLAY_WIDTH - 1));
    1014:	41 9d 00 5c 	bgt-    cr7,1070 <XTft_FillScreen+0x120>
	Xil_AssertVoid(RowEndVal <= (XTFT_DISPLAY_HEIGHT - 1));
    1018:	2b 87 01 df 	cmplwi  cr7,r7,479
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid(ColStartVal <= (XTFT_DISPLAY_WIDTH - 1));
	Xil_AssertVoid(RowStartVal <= (XTFT_DISPLAY_HEIGHT - 1));
	Xil_AssertVoid(ColEndVal <= (XTFT_DISPLAY_WIDTH - 1));
    101c:	90 1f 35 14 	stw     r0,13588(r31)
	Xil_AssertVoid(RowEndVal <= (XTFT_DISPLAY_HEIGHT - 1));
    1020:	41 9d 00 ec 	bgt-    cr7,110c <XTft_FillScreen+0x1bc>

	/*
	 * Fills each pixel on the screen with the value of PixelVal.
	 */
	for (ColIndex = ColStartVal; ColIndex <= ColEndVal; ColIndex++) {
    1024:	7f 84 30 40 	cmplw   cr7,r4,r6
    1028:	7c 9e 23 78 	mr      r30,r4
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid(ColStartVal <= (XTFT_DISPLAY_WIDTH - 1));
	Xil_AssertVoid(RowStartVal <= (XTFT_DISPLAY_HEIGHT - 1));
	Xil_AssertVoid(ColEndVal <= (XTFT_DISPLAY_WIDTH - 1));
	Xil_AssertVoid(RowEndVal <= (XTFT_DISPLAY_HEIGHT - 1));
    102c:	90 1f 35 14 	stw     r0,13588(r31)

	/*
	 * Fills each pixel on the screen with the value of PixelVal.
	 */
	for (ColIndex = ColStartVal; ColIndex <= ColEndVal; ColIndex++) {
    1030:	41 bd ff 98 	bgt-    cr7,fc8 <XTft_FillScreen+0x78>
		for (RowIndex = RowStartVal; RowIndex <= RowEndVal;
    1034:	7f 9a e8 40 	cmplw   cr7,r26,r29
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid(ColStartVal <= (XTFT_DISPLAY_WIDTH - 1));
	Xil_AssertVoid(RowStartVal <= (XTFT_DISPLAY_HEIGHT - 1));
	Xil_AssertVoid(ColEndVal <= (XTFT_DISPLAY_WIDTH - 1));
	Xil_AssertVoid(RowEndVal <= (XTFT_DISPLAY_HEIGHT - 1));
    1038:	7f 5f d3 78 	mr      r31,r26

	/*
	 * Fills each pixel on the screen with the value of PixelVal.
	 */
	for (ColIndex = ColStartVal; ColIndex <= ColEndVal; ColIndex++) {
		for (RowIndex = RowStartVal; RowIndex <= RowEndVal;
    103c:	41 9d 00 24 	bgt-    cr7,1060 <XTft_FillScreen+0x110>
			RowIndex++) {
			XTft_SetPixel(InstancePtr, ColIndex, RowIndex,
    1040:	7f e5 fb 78 	mr      r5,r31
    1044:	7f 63 db 78 	mr      r3,r27
	/*
	 * Fills each pixel on the screen with the value of PixelVal.
	 */
	for (ColIndex = ColStartVal; ColIndex <= ColEndVal; ColIndex++) {
		for (RowIndex = RowStartVal; RowIndex <= RowEndVal;
			RowIndex++) {
    1048:	3b ff 00 01 	addi    r31,r31,1
			XTft_SetPixel(InstancePtr, ColIndex, RowIndex,
    104c:	7f c4 f3 78 	mr      r4,r30
    1050:	7f 86 e3 78 	mr      r6,r28
    1054:	4b ff fd d5 	bl      e28 <XTft_SetPixel>

	/*
	 * Fills each pixel on the screen with the value of PixelVal.
	 */
	for (ColIndex = ColStartVal; ColIndex <= ColEndVal; ColIndex++) {
		for (RowIndex = RowStartVal; RowIndex <= RowEndVal;
    1058:	7f 9d f8 40 	cmplw   cr7,r29,r31
    105c:	40 9c ff e4 	bge+    cr7,1040 <XTft_FillScreen+0xf0>
	Xil_AssertVoid(RowEndVal <= (XTFT_DISPLAY_HEIGHT - 1));

	/*
	 * Fills each pixel on the screen with the value of PixelVal.
	 */
	for (ColIndex = ColStartVal; ColIndex <= ColEndVal; ColIndex++) {
    1060:	3b de 00 01 	addi    r30,r30,1
    1064:	7f 99 f0 40 	cmplw   cr7,r25,r30
    1068:	40 9c ff cc 	bge+    cr7,1034 <XTft_FillScreen+0xe4>
    106c:	4b ff ff 5c 	b       fc8 <XTft_FillScreen+0x78>
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid(ColStartVal <= (XTFT_DISPLAY_WIDTH - 1));
	Xil_AssertVoid(RowStartVal <= (XTFT_DISPLAY_HEIGHT - 1));
	Xil_AssertVoid(ColEndVal <= (XTFT_DISPLAY_WIDTH - 1));
    1070:	3c 60 00 00 	lis     r3,0
    1074:	38 80 02 38 	li      r4,568
    1078:	38 63 2f 1c 	addi    r3,r3,12060
    107c:	48 00 1b 65 	bl      2be0 <Xil_Assert>
    1080:	38 00 00 01 	li      r0,1
    1084:	90 1f 35 14 	stw     r0,13588(r31)
    1088:	4b ff ff 40 	b       fc8 <XTft_FillScreen+0x78>
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid(ColStartVal <= (XTFT_DISPLAY_WIDTH - 1));
    108c:	3c 60 00 00 	lis     r3,0
    1090:	38 80 02 36 	li      r4,566
    1094:	38 63 2f 1c 	addi    r3,r3,12060
    1098:	48 00 1b 49 	bl      2be0 <Xil_Assert>
    109c:	38 00 00 01 	li      r0,1
    10a0:	90 1f 35 14 	stw     r0,13588(r31)
			XTft_SetPixel(InstancePtr, ColIndex, RowIndex,
					PixelVal);
		}
	}

}
    10a4:	80 01 00 2c 	lwz     r0,44(r1)
    10a8:	83 21 00 0c 	lwz     r25,12(r1)
    10ac:	83 41 00 10 	lwz     r26,16(r1)
    10b0:	83 61 00 14 	lwz     r27,20(r1)
    10b4:	7c 08 03 a6 	mtlr    r0
    10b8:	83 81 00 18 	lwz     r28,24(r1)
    10bc:	83 a1 00 1c 	lwz     r29,28(r1)
    10c0:	83 c1 00 20 	lwz     r30,32(r1)
    10c4:	83 e1 00 24 	lwz     r31,36(r1)
    10c8:	38 21 00 28 	addi    r1,r1,40
    10cc:	4e 80 00 20 	blr
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid(ColStartVal <= (XTFT_DISPLAY_WIDTH - 1));
	Xil_AssertVoid(RowStartVal <= (XTFT_DISPLAY_HEIGHT - 1));
    10d0:	3c 60 00 00 	lis     r3,0
    10d4:	38 80 02 37 	li      r4,567
    10d8:	38 63 2f 1c 	addi    r3,r3,12060
    10dc:	48 00 1b 05 	bl      2be0 <Xil_Assert>
    10e0:	38 00 00 01 	li      r0,1
    10e4:	90 1f 35 14 	stw     r0,13588(r31)
    10e8:	4b ff fe e0 	b       fc8 <XTft_FillScreen+0x78>
	u32 RowIndex;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    10ec:	3c 60 00 00 	lis     r3,0
    10f0:	38 80 02 34 	li      r4,564
    10f4:	38 63 2f 1c 	addi    r3,r3,12060
    10f8:	48 00 1a e9 	bl      2be0 <Xil_Assert>
    10fc:	38 00 00 01 	li      r0,1
    1100:	3d 20 00 00 	lis     r9,0
    1104:	90 09 35 14 	stw     r0,13588(r9)
    1108:	4b ff fe c0 	b       fc8 <XTft_FillScreen+0x78>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid(ColStartVal <= (XTFT_DISPLAY_WIDTH - 1));
	Xil_AssertVoid(RowStartVal <= (XTFT_DISPLAY_HEIGHT - 1));
	Xil_AssertVoid(ColEndVal <= (XTFT_DISPLAY_WIDTH - 1));
	Xil_AssertVoid(RowEndVal <= (XTFT_DISPLAY_HEIGHT - 1));
    110c:	3c 60 00 00 	lis     r3,0
    1110:	38 80 02 39 	li      r4,569
    1114:	38 63 2f 1c 	addi    r3,r3,12060
    1118:	48 00 1a c9 	bl      2be0 <Xil_Assert>
    111c:	38 00 00 01 	li      r0,1
    1120:	90 1f 35 14 	stw     r0,13588(r31)
    1124:	4b ff fe a4 	b       fc8 <XTft_FillScreen+0x78>

00001128 <XTft_ClearScreen>:
*
* @note		None.
*
****************************************************************************/
void XTft_ClearScreen(XTft *InstancePtr)
{
    1128:	94 21 ff e8 	stwu    r1,-24(r1)
    112c:	7c 08 02 a6 	mflr    r0
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1130:	3d 20 11 11 	lis     r9,4369
void XTft_ClearScreen(XTft *InstancePtr)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1134:	38 80 02 00 	li      r4,512
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1138:	61 29 11 11 	ori     r9,r9,4369
*
* @note		None.
*
****************************************************************************/
void XTft_ClearScreen(XTft *InstancePtr)
{
    113c:	93 e1 00 14 	stw     r31,20(r1)
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1140:	7c 7f 1b 79 	mr.     r31,r3
*
* @note		None.
*
****************************************************************************/
void XTft_ClearScreen(XTft *InstancePtr)
{
    1144:	93 a1 00 0c 	stw     r29,12(r1)
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1148:	3b a0 00 00 	li      r29,0
*
* @note		None.
*
****************************************************************************/
void XTft_ClearScreen(XTft *InstancePtr)
{
    114c:	93 c1 00 10 	stw     r30,16(r1)
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1150:	3f c0 00 00 	lis     r30,0
*
* @note		None.
*
****************************************************************************/
void XTft_ClearScreen(XTft *InstancePtr)
{
    1154:	90 01 00 1c 	stw     r0,28(r1)
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1158:	41 82 00 88 	beq-    11e0 <XTft_ClearScreen+0xb8>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    115c:	80 1f 00 14 	lwz     r0,20(r31)
    1160:	38 80 02 01 	li      r4,513
void XTft_ClearScreen(XTft *InstancePtr)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1164:	93 be 35 14 	stw     r29,13588(r30)
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1168:	7f 80 48 00 	cmpw    cr7,r0,r9
    116c:	41 9e 00 34 	beq-    cr7,11a0 <XTft_ClearScreen+0x78>
    1170:	3c 60 00 00 	lis     r3,0
    1174:	38 63 2f 1c 	addi    r3,r3,12060
    1178:	48 00 1a 69 	bl      2be0 <Xil_Assert>
    117c:	38 00 00 01 	li      r0,1
    1180:	90 1e 35 14 	stw     r0,13588(r30)
	 * Initialize the column, row positions to (0, 0)origin.
	 */
	InstancePtr->ColVal = XTFT_DEF_COLVAL;
	InstancePtr->RowVal = XTFT_DEF_ROWVAL;

}
    1184:	80 01 00 1c 	lwz     r0,28(r1)
    1188:	83 a1 00 0c 	lwz     r29,12(r1)
    118c:	83 c1 00 10 	lwz     r30,16(r1)
    1190:	83 e1 00 14 	lwz     r31,20(r1)
    1194:	7c 08 03 a6 	mtlr    r0
    1198:	38 21 00 18 	addi    r1,r1,24
    119c:	4e 80 00 20 	blr
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);

	/*
	 * Fills the screen with the background color of Instance structure.
	 */
	XTft_FillScreen(InstancePtr, XTFT_DEF_COLVAL, XTFT_DEF_ROWVAL,
    11a0:	81 1f 00 24 	lwz     r8,36(r31)
    11a4:	38 80 00 00 	li      r4,0
    11a8:	38 a0 00 00 	li      r5,0
    11ac:	38 c0 02 7f 	li      r6,639
    11b0:	38 e0 01 df 	li      r7,479
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    11b4:	93 be 35 14 	stw     r29,13588(r30)

	/*
	 * Fills the screen with the background color of Instance structure.
	 */
	XTft_FillScreen(InstancePtr, XTFT_DEF_COLVAL, XTFT_DEF_ROWVAL,
    11b8:	4b ff fd 99 	bl      f50 <XTft_FillScreen>
	 * Initialize the column, row positions to (0, 0)origin.
	 */
	InstancePtr->ColVal = XTFT_DEF_COLVAL;
	InstancePtr->RowVal = XTFT_DEF_ROWVAL;

}
    11bc:	80 01 00 1c 	lwz     r0,28(r1)

	/*
	 * Initialize the column, row positions to (0, 0)origin.
	 */
	InstancePtr->ColVal = XTFT_DEF_COLVAL;
	InstancePtr->RowVal = XTFT_DEF_ROWVAL;
    11c0:	93 bf 00 1c 	stw     r29,28(r31)
			InstancePtr->BgColor);

	/*
	 * Initialize the column, row positions to (0, 0)origin.
	 */
	InstancePtr->ColVal = XTFT_DEF_COLVAL;
    11c4:	93 bf 00 18 	stw     r29,24(r31)
	InstancePtr->RowVal = XTFT_DEF_ROWVAL;

}
    11c8:	83 c1 00 10 	lwz     r30,16(r1)
    11cc:	7c 08 03 a6 	mtlr    r0
    11d0:	83 a1 00 0c 	lwz     r29,12(r1)
    11d4:	83 e1 00 14 	lwz     r31,20(r1)
    11d8:	38 21 00 18 	addi    r1,r1,24
    11dc:	4e 80 00 20 	blr
void XTft_ClearScreen(XTft *InstancePtr)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    11e0:	3c 60 00 00 	lis     r3,0
    11e4:	38 63 2f 1c 	addi    r3,r3,12060
    11e8:	48 00 19 f9 	bl      2be0 <Xil_Assert>
    11ec:	38 00 00 01 	li      r0,1
    11f0:	3d 20 00 00 	lis     r9,0
    11f4:	90 09 35 14 	stw     r0,13588(r9)
    11f8:	4b ff ff 8c 	b       1184 <XTft_ClearScreen+0x5c>

000011fc <XTft_CfgInitialize>:
* @note		None.
*
****************************************************************************/
int XTft_CfgInitialize(XTft *InstancePtr, XTft_Config *ConfigPtr,
			 u32 EffectiveAddr)
{
    11fc:	94 21 ff e0 	stwu    r1,-32(r1)
    1200:	7c 08 02 a6 	mflr    r0
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
    1204:	7c 6c 1b 79 	mr.     r12,r3
* @note		None.
*
****************************************************************************/
int XTft_CfgInitialize(XTft *InstancePtr, XTft_Config *ConfigPtr,
			 u32 EffectiveAddr)
{
    1208:	7c 89 23 78 	mr      r9,r4
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
	Xil_AssertNonvoid(ConfigPtr != NULL);
    120c:	2f 84 00 00 	cmpwi   cr7,r4,0
			 u32 EffectiveAddr)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
    1210:	38 80 00 78 	li      r4,120
* @note		None.
*
****************************************************************************/
int XTft_CfgInitialize(XTft *InstancePtr, XTft_Config *ConfigPtr,
			 u32 EffectiveAddr)
{
    1214:	93 61 00 0c 	stw     r27,12(r1)
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
    1218:	3f 60 00 00 	lis     r27,0
* @note		None.
*
****************************************************************************/
int XTft_CfgInitialize(XTft *InstancePtr, XTft_Config *ConfigPtr,
			 u32 EffectiveAddr)
{
    121c:	93 81 00 10 	stw     r28,16(r1)
    1220:	7c bc 2b 78 	mr      r28,r5
    1224:	93 a1 00 14 	stw     r29,20(r1)
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
    1228:	3b a0 00 00 	li      r29,0
* @note		None.
*
****************************************************************************/
int XTft_CfgInitialize(XTft *InstancePtr, XTft_Config *ConfigPtr,
			 u32 EffectiveAddr)
{
    122c:	93 c1 00 18 	stw     r30,24(r1)
    1230:	93 e1 00 1c 	stw     r31,28(r1)
    1234:	90 01 00 24 	stw     r0,36(r1)
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
    1238:	41 82 00 d8 	beq-    1310 <XTft_CfgInitialize+0x114>
	/*
	 * Initialize the XTft Instance members to default values.
	 */
	InstancePtr->ColVal = XTFT_DEF_COLVAL;
	InstancePtr->RowVal = XTFT_DEF_ROWVAL;
	InstancePtr->FgColor = XTFT_DEF_FGCOLOR;
    123c:	3f c0 00 ff 	lis     r30,255

	/*
	 * Indicate the XTft Instance is now ready to use, initialized
	 * without error.
	 */
	InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
    1240:	3f e0 11 11 	lis     r31,4369
	/*
	 * Initialize the XTft Instance members to default values.
	 */
	InstancePtr->ColVal = XTFT_DEF_COLVAL;
	InstancePtr->RowVal = XTFT_DEF_ROWVAL;
	InstancePtr->FgColor = XTFT_DEF_FGCOLOR;
    1244:	63 de ff ff 	ori     r30,r30,65535

	/*
	 * Indicate the XTft Instance is now ready to use, initialized
	 * without error.
	 */
	InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
    1248:	63 ff 11 11 	ori     r31,r31,4369

	/*
	 * Fills the screen with the default background color.
	 */
	XTft_FillScreen(InstancePtr, XTFT_DEF_COLVAL, XTFT_DEF_ROWVAL,
    124c:	38 80 00 00 	li      r4,0
    1250:	38 a0 00 00 	li      r5,0
    1254:	38 c0 02 7f 	li      r6,639
    1258:	38 e0 01 df 	li      r7,479
    125c:	39 00 00 00 	li      r8,0
			 u32 EffectiveAddr)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
    1260:	93 bb 35 14 	stw     r29,13588(r27)
	Xil_AssertNonvoid(ConfigPtr != NULL);
    1264:	41 9e 00 6c 	beq-    cr7,12d0 <XTft_CfgInitialize+0xd4>
	InstancePtr->TftConfig.DeviceId = ConfigPtr->DeviceId;
	InstancePtr->TftConfig.BaseAddress = EffectiveAddr;
	InstancePtr->TftConfig.VideoMemBaseAddr =
				ConfigPtr->VideoMemBaseAddr;
	InstancePtr->TftConfig.PlbAccess = ConfigPtr->PlbAccess;
	InstancePtr->TftConfig.DcrBaseAddr = ConfigPtr->DcrBaseAddr;
    1268:	81 49 00 10 	lwz     r10,16(r9)
	 * Setup the DeviceId, Video Memory Address and Base Address
	 * and Plb Access from the configuration structure.
	 */
	InstancePtr->TftConfig.DeviceId = ConfigPtr->DeviceId;
	InstancePtr->TftConfig.BaseAddress = EffectiveAddr;
	InstancePtr->TftConfig.VideoMemBaseAddr =
    126c:	81 69 00 08 	lwz     r11,8(r9)

	/*
	 * Setup the DeviceId, Video Memory Address and Base Address
	 * and Plb Access from the configuration structure.
	 */
	InstancePtr->TftConfig.DeviceId = ConfigPtr->DeviceId;
    1270:	a0 09 00 00 	lhz     r0,0(r9)
	InstancePtr->TftConfig.BaseAddress = EffectiveAddr;
	InstancePtr->TftConfig.VideoMemBaseAddr =
				ConfigPtr->VideoMemBaseAddr;
	InstancePtr->TftConfig.PlbAccess = ConfigPtr->PlbAccess;
    1274:	a1 29 00 0c 	lhz     r9,12(r9)
	/*
	 * Setup the DeviceId, Video Memory Address and Base Address
	 * and Plb Access from the configuration structure.
	 */
	InstancePtr->TftConfig.DeviceId = ConfigPtr->DeviceId;
	InstancePtr->TftConfig.BaseAddress = EffectiveAddr;
    1278:	93 8c 00 04 	stw     r28,4(r12)

	/*
	 * Indicate the XTft Instance is now ready to use, initialized
	 * without error.
	 */
	InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
    127c:	93 ec 00 14 	stw     r31,20(r12)
	/*
	 * Initialize the XTft Instance members to default values.
	 */
	InstancePtr->ColVal = XTFT_DEF_COLVAL;
	InstancePtr->RowVal = XTFT_DEF_ROWVAL;
	InstancePtr->FgColor = XTFT_DEF_FGCOLOR;
    1280:	93 cc 00 20 	stw     r30,32(r12)
	InstancePtr->BgColor = XTFT_DEF_BGCOLOR;
    1284:	93 ac 00 24 	stw     r29,36(r12)

	/*
	 * Setup the DeviceId, Video Memory Address and Base Address
	 * and Plb Access from the configuration structure.
	 */
	InstancePtr->TftConfig.DeviceId = ConfigPtr->DeviceId;
    1288:	b0 0c 00 00 	sth     r0,0(r12)
	InstancePtr->TftConfig.BaseAddress = EffectiveAddr;
	InstancePtr->TftConfig.VideoMemBaseAddr =
    128c:	91 6c 00 08 	stw     r11,8(r12)
				ConfigPtr->VideoMemBaseAddr;
	InstancePtr->TftConfig.PlbAccess = ConfigPtr->PlbAccess;
    1290:	b1 2c 00 0c 	sth     r9,12(r12)
	InstancePtr->TftConfig.DcrBaseAddr = ConfigPtr->DcrBaseAddr;
    1294:	91 4c 00 10 	stw     r10,16(r12)

	/*
	 * Initialize the XTft Instance members to default values.
	 */
	InstancePtr->ColVal = XTFT_DEF_COLVAL;
    1298:	93 ac 00 18 	stw     r29,24(r12)
	InstancePtr->RowVal = XTFT_DEF_ROWVAL;
    129c:	93 ac 00 1c 	stw     r29,28(r12)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
	Xil_AssertNonvoid(ConfigPtr != NULL);
    12a0:	93 bb 35 14 	stw     r29,13588(r27)
	InstancePtr->IsReady = XIL_COMPONENT_IS_READY;

	/*
	 * Fills the screen with the default background color.
	 */
	XTft_FillScreen(InstancePtr, XTFT_DEF_COLVAL, XTFT_DEF_ROWVAL,
    12a4:	4b ff fc ad 	bl      f50 <XTft_FillScreen>
			(XTFT_DISPLAY_WIDTH - 1), (XTFT_DISPLAY_HEIGHT - 1),
			InstancePtr->BgColor);

	return XST_SUCCESS;
}
    12a8:	80 01 00 24 	lwz     r0,36(r1)
    12ac:	38 60 00 00 	li      r3,0
    12b0:	83 61 00 0c 	lwz     r27,12(r1)
    12b4:	83 81 00 10 	lwz     r28,16(r1)
    12b8:	83 a1 00 14 	lwz     r29,20(r1)
    12bc:	7c 08 03 a6 	mtlr    r0
    12c0:	83 c1 00 18 	lwz     r30,24(r1)
    12c4:	83 e1 00 1c 	lwz     r31,28(r1)
    12c8:	38 21 00 20 	addi    r1,r1,32
    12cc:	4e 80 00 20 	blr
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
	Xil_AssertNonvoid(ConfigPtr != NULL);
    12d0:	3c 60 00 00 	lis     r3,0
    12d4:	38 80 00 79 	li      r4,121
    12d8:	38 63 2f 1c 	addi    r3,r3,12060
    12dc:	48 00 19 05 	bl      2be0 <Xil_Assert>
    12e0:	38 00 00 01 	li      r0,1
    12e4:	90 1b 35 14 	stw     r0,13588(r27)
	XTft_FillScreen(InstancePtr, XTFT_DEF_COLVAL, XTFT_DEF_ROWVAL,
			(XTFT_DISPLAY_WIDTH - 1), (XTFT_DISPLAY_HEIGHT - 1),
			InstancePtr->BgColor);

	return XST_SUCCESS;
}
    12e8:	38 60 00 00 	li      r3,0
    12ec:	80 01 00 24 	lwz     r0,36(r1)
    12f0:	83 61 00 0c 	lwz     r27,12(r1)
    12f4:	83 81 00 10 	lwz     r28,16(r1)
    12f8:	83 a1 00 14 	lwz     r29,20(r1)
    12fc:	7c 08 03 a6 	mtlr    r0
    1300:	83 c1 00 18 	lwz     r30,24(r1)
    1304:	83 e1 00 1c 	lwz     r31,28(r1)
    1308:	38 21 00 20 	addi    r1,r1,32
    130c:	4e 80 00 20 	blr
			 u32 EffectiveAddr)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
    1310:	3c 60 00 00 	lis     r3,0
    1314:	38 63 2f 1c 	addi    r3,r3,12060
    1318:	48 00 18 c9 	bl      2be0 <Xil_Assert>
    131c:	38 00 00 01 	li      r0,1
    1320:	3d 20 00 00 	lis     r9,0
    1324:	90 09 35 14 	stw     r0,13588(r9)
    1328:	4b ff ff 80 	b       12a8 <XTft_CfgInitialize+0xac>

0000132c <XTft_Scroll>:
*
* @note		None.
*
****************************************************************************/
void XTft_Scroll(XTft *InstancePtr)
{
    132c:	94 21 ff d0 	stwu    r1,-48(r1)
    1330:	7c 08 02 a6 	mflr    r0
    1334:	93 c1 00 28 	stw     r30,40(r1)
	u32 RowIndex;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1338:	7c 7e 1b 79 	mr.     r30,r3
*
* @note		None.
*
****************************************************************************/
void XTft_Scroll(XTft *InstancePtr)
{
    133c:	93 61 00 1c 	stw     r27,28(r1)
    1340:	93 81 00 20 	stw     r28,32(r1)
    1344:	93 a1 00 24 	stw     r29,36(r1)
    1348:	93 e1 00 2c 	stw     r31,44(r1)
    134c:	90 01 00 34 	stw     r0,52(r1)
	u32 RowIndex;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1350:	41 82 00 f4 	beq-    1444 <XTft_Scroll+0x118>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1354:	80 1e 00 14 	lwz     r0,20(r30)
    1358:	3d 20 11 11 	lis     r9,4369
    135c:	61 29 11 11 	ori     r9,r9,4369
	u32 RowIndex;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1360:	3f e0 00 00 	lis     r31,0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1364:	7f 80 48 00 	cmpw    cr7,r0,r9
	u32 RowIndex;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1368:	38 00 00 00 	li      r0,0
    136c:	90 1f 35 14 	stw     r0,13588(r31)
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1370:	41 9e 00 40 	beq-    cr7,13b0 <XTft_Scroll+0x84>
    1374:	3c 60 00 00 	lis     r3,0
    1378:	38 80 01 d1 	li      r4,465
    137c:	38 63 2f 1c 	addi    r3,r3,12060
    1380:	48 00 18 61 	bl      2be0 <Xil_Assert>
    1384:	38 00 00 01 	li      r0,1
    1388:	90 1f 35 14 	stw     r0,13588(r31)
			 XTFT_DEF_COLVAL,
			 (XTFT_DISPLAY_HEIGHT - 1)-XTFT_CHAR_HEIGHT,
			 (XTFT_DISPLAY_WIDTH - 1), (XTFT_DISPLAY_HEIGHT - 1),
			 InstancePtr->BgColor);

}
    138c:	80 01 00 34 	lwz     r0,52(r1)
    1390:	83 61 00 1c 	lwz     r27,28(r1)
    1394:	83 81 00 20 	lwz     r28,32(r1)
    1398:	83 a1 00 24 	lwz     r29,36(r1)
    139c:	7c 08 03 a6 	mtlr    r0
    13a0:	83 c1 00 28 	lwz     r30,40(r1)
    13a4:	83 e1 00 2c 	lwz     r31,44(r1)
    13a8:	38 21 00 30 	addi    r1,r1,48
    13ac:	4e 80 00 20 	blr

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    13b0:	90 1f 35 14 	stw     r0,13588(r31)
    13b4:	3b 80 00 00 	li      r28,0
    13b8:	3b 61 00 08 	addi    r27,r1,8
	}

	/*
	 * Fills the last line with the background color.
	 */
	XTft_FillScreen(InstancePtr,
    13bc:	3b bc 00 0c 	addi    r29,r28,12
    13c0:	3b e0 00 00 	li      r31,0
	for (RowIndex = 0;
		RowIndex < (XTFT_DISPLAY_HEIGHT - 1) - XTFT_CHAR_HEIGHT;
		RowIndex++) {
		for (ColIndex = 0; ColIndex < (XTFT_DISPLAY_WIDTH - 1);
					ColIndex++) {
			XTft_GetPixel(InstancePtr, ColIndex,
    13c4:	7f e4 fb 78 	mr      r4,r31
    13c8:	7f 66 db 78 	mr      r6,r27
    13cc:	7f c3 f3 78 	mr      r3,r30
    13d0:	7f a5 eb 78 	mr      r5,r29
    13d4:	4b ff f7 81 	bl      b54 <XTft_GetPixel>
				RowIndex + XTFT_CHAR_HEIGHT, &PixelVal);
			XTft_SetPixel(
    13d8:	80 c1 00 08 	lwz     r6,8(r1)
    13dc:	7f e4 fb 78 	mr      r4,r31
    13e0:	7f c3 f3 78 	mr      r3,r30
    13e4:	7f 85 e3 78 	mr      r5,r28
    13e8:	4b ff fa 41 	bl      e28 <XTft_SetPixel>
	 * from bottom.
	 */
	for (RowIndex = 0;
		RowIndex < (XTFT_DISPLAY_HEIGHT - 1) - XTFT_CHAR_HEIGHT;
		RowIndex++) {
		for (ColIndex = 0; ColIndex < (XTFT_DISPLAY_WIDTH - 1);
    13ec:	2f 9f 02 7e 	cmpwi   cr7,r31,638
    13f0:	3b ff 00 01 	addi    r31,r31,1
    13f4:	40 9e ff d0 	bne+    cr7,13c4 <XTft_Scroll+0x98>
	 * Takes each pixel value from the second line and puts in the first
	 * line. This process is repeated till the second line
	 * from bottom.
	 */
	for (RowIndex = 0;
		RowIndex < (XTFT_DISPLAY_HEIGHT - 1) - XTFT_CHAR_HEIGHT;
    13f8:	2f 9c 01 d2 	cmpwi   cr7,r28,466
    13fc:	3b 9c 00 01 	addi    r28,r28,1
    1400:	40 9e ff bc 	bne+    cr7,13bc <XTft_Scroll+0x90>
	}

	/*
	 * Fills the last line with the background color.
	 */
	XTft_FillScreen(InstancePtr,
    1404:	81 1e 00 24 	lwz     r8,36(r30)
    1408:	7f c3 f3 78 	mr      r3,r30
    140c:	38 80 00 00 	li      r4,0
    1410:	38 a0 01 d3 	li      r5,467
    1414:	38 c0 02 7f 	li      r6,639
    1418:	38 e0 01 df 	li      r7,479
    141c:	4b ff fb 35 	bl      f50 <XTft_FillScreen>
			 XTFT_DEF_COLVAL,
			 (XTFT_DISPLAY_HEIGHT - 1)-XTFT_CHAR_HEIGHT,
			 (XTFT_DISPLAY_WIDTH - 1), (XTFT_DISPLAY_HEIGHT - 1),
			 InstancePtr->BgColor);

}
    1420:	80 01 00 34 	lwz     r0,52(r1)
    1424:	83 61 00 1c 	lwz     r27,28(r1)
    1428:	83 81 00 20 	lwz     r28,32(r1)
    142c:	83 a1 00 24 	lwz     r29,36(r1)
    1430:	7c 08 03 a6 	mtlr    r0
    1434:	83 c1 00 28 	lwz     r30,40(r1)
    1438:	83 e1 00 2c 	lwz     r31,44(r1)
    143c:	38 21 00 30 	addi    r1,r1,48
    1440:	4e 80 00 20 	blr
	u32 RowIndex;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1444:	3c 60 00 00 	lis     r3,0
    1448:	38 80 01 d0 	li      r4,464
    144c:	38 63 2f 1c 	addi    r3,r3,12060
    1450:	48 00 17 91 	bl      2be0 <Xil_Assert>
    1454:	38 00 00 01 	li      r0,1
    1458:	3d 20 00 00 	lis     r9,0
			 XTFT_DEF_COLVAL,
			 (XTFT_DISPLAY_HEIGHT - 1)-XTFT_CHAR_HEIGHT,
			 (XTFT_DISPLAY_WIDTH - 1), (XTFT_DISPLAY_HEIGHT - 1),
			 InstancePtr->BgColor);

}
    145c:	83 61 00 1c 	lwz     r27,28(r1)
	u32 RowIndex;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1460:	90 09 35 14 	stw     r0,13588(r9)
			 XTFT_DEF_COLVAL,
			 (XTFT_DISPLAY_HEIGHT - 1)-XTFT_CHAR_HEIGHT,
			 (XTFT_DISPLAY_WIDTH - 1), (XTFT_DISPLAY_HEIGHT - 1),
			 InstancePtr->BgColor);

}
    1464:	80 01 00 34 	lwz     r0,52(r1)
    1468:	83 81 00 20 	lwz     r28,32(r1)
    146c:	83 a1 00 24 	lwz     r29,36(r1)
    1470:	83 c1 00 28 	lwz     r30,40(r1)
    1474:	7c 08 03 a6 	mtlr    r0
    1478:	83 e1 00 2c 	lwz     r31,44(r1)
    147c:	38 21 00 30 	addi    r1,r1,48
    1480:	4e 80 00 20 	blr

00001484 <XTft_SetPosChar>:
*		you cannot move to any position on the screen as we have
*		to check for enough space for a character to be written.
*
****************************************************************************/
void XTft_SetPosChar(XTft *InstancePtr, u32 ColVal, u32 RowVal)
{
    1484:	94 21 ff e8 	stwu    r1,-24(r1)
    1488:	7c 08 02 a6 	mflr    r0
    148c:	93 c1 00 10 	stw     r30,16(r1)
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1490:	7c 7e 1b 79 	mr.     r30,r3
*		you cannot move to any position on the screen as we have
*		to check for enough space for a character to be written.
*
****************************************************************************/
void XTft_SetPosChar(XTft *InstancePtr, u32 ColVal, u32 RowVal)
{
    1494:	93 a1 00 0c 	stw     r29,12(r1)
    1498:	7c 9d 23 78 	mr      r29,r4
    149c:	93 e1 00 14 	stw     r31,20(r1)
    14a0:	7c bf 2b 78 	mr      r31,r5
    14a4:	93 81 00 08 	stw     r28,8(r1)
    14a8:	90 01 00 1c 	stw     r0,28(r1)
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    14ac:	41 82 01 20 	beq-    15cc <XTft_SetPosChar+0x148>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    14b0:	80 1e 00 14 	lwz     r0,20(r30)
    14b4:	3d 20 11 11 	lis     r9,4369
    14b8:	61 29 11 11 	ori     r9,r9,4369
void XTft_SetPosChar(XTft *InstancePtr, u32 ColVal, u32 RowVal)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    14bc:	3f 80 00 00 	lis     r28,0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    14c0:	7f 80 48 00 	cmpw    cr7,r0,r9
void XTft_SetPosChar(XTft *InstancePtr, u32 ColVal, u32 RowVal)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    14c4:	38 00 00 00 	li      r0,0
    14c8:	90 1c 35 14 	stw     r0,13588(r28)
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    14cc:	41 9e 00 3c 	beq-    cr7,1508 <XTft_SetPosChar+0x84>
    14d0:	3c 60 00 00 	lis     r3,0
    14d4:	38 80 00 e3 	li      r4,227
    14d8:	38 63 2f 1c 	addi    r3,r3,12060
    14dc:	48 00 17 05 	bl      2be0 <Xil_Assert>
    14e0:	38 00 00 01 	li      r0,1
    14e4:	90 1c 35 14 	stw     r0,13588(r28)
	 * Update the column, row position values.
	 */
	InstancePtr->ColVal = ColVal;
	InstancePtr->RowVal = RowVal;

}
    14e8:	80 01 00 1c 	lwz     r0,28(r1)
    14ec:	83 81 00 08 	lwz     r28,8(r1)
    14f0:	83 a1 00 0c 	lwz     r29,12(r1)
    14f4:	83 c1 00 10 	lwz     r30,16(r1)
    14f8:	7c 08 03 a6 	mtlr    r0
    14fc:	83 e1 00 14 	lwz     r31,20(r1)
    1500:	38 21 00 18 	addi    r1,r1,24
    1504:	4e 80 00 20 	blr
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid(ColVal <= (XTFT_DISPLAY_WIDTH - 1));
    1508:	2b 84 02 7f 	cmplwi  cr7,r4,639
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    150c:	90 1c 35 14 	stw     r0,13588(r28)
	Xil_AssertVoid(ColVal <= (XTFT_DISPLAY_WIDTH - 1));
    1510:	41 9d 00 68 	bgt-    cr7,1578 <XTft_SetPosChar+0xf4>
	Xil_AssertVoid(RowVal <= (XTFT_DISPLAY_HEIGHT - 1));
    1514:	2b 85 01 df 	cmplwi  cr7,r5,479
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid(ColVal <= (XTFT_DISPLAY_WIDTH - 1));
    1518:	90 1c 35 14 	stw     r0,13588(r28)
	Xil_AssertVoid(RowVal <= (XTFT_DISPLAY_HEIGHT - 1));
    151c:	41 9d 00 94 	bgt-    cr7,15b0 <XTft_SetPosChar+0x12c>

	/*
	 * If there is no space in the current line for the next char
	 * go to next line.
	 */
	if (ColVal > (XTFT_DISPLAY_WIDTH - 1) - XTFT_CHAR_WIDTH) {
    1520:	2b 84 02 77 	cmplwi  cr7,r4,631
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid(ColVal <= (XTFT_DISPLAY_WIDTH - 1));
	Xil_AssertVoid(RowVal <= (XTFT_DISPLAY_HEIGHT - 1));
    1524:	90 1c 35 14 	stw     r0,13588(r28)

	/*
	 * If there is no space in the current line for the next char
	 * go to next line.
	 */
	if (ColVal > (XTFT_DISPLAY_WIDTH - 1) - XTFT_CHAR_WIDTH) {
    1528:	40 9d 00 20 	ble-    cr7,1548 <XTft_SetPosChar+0xc4>
		ColVal = XTFT_DEF_COLVAL;
		RowVal += XTFT_CHAR_HEIGHT;
    152c:	3b e5 00 0c 	addi    r31,r5,12
    1530:	3b a0 00 00 	li      r29,0

	/*
	 * If there is no space in the current line for the next char
	 * go to next line by deleting the first line.
	 */
	while (RowVal > (XTFT_DISPLAY_HEIGHT - 1) - XTFT_CHAR_HEIGHT) {
    1534:	2b 9f 01 d3 	cmplwi  cr7,r31,467
    1538:	40 9d 00 18 	ble-    cr7,1550 <XTft_SetPosChar+0xcc>
		XTft_Scroll(InstancePtr);
    153c:	7f c3 f3 78 	mr      r3,r30
		RowVal -= XTFT_CHAR_HEIGHT;
    1540:	3b ff ff f4 	addi    r31,r31,-12
	/*
	 * If there is no space in the current line for the next char
	 * go to next line by deleting the first line.
	 */
	while (RowVal > (XTFT_DISPLAY_HEIGHT - 1) - XTFT_CHAR_HEIGHT) {
		XTft_Scroll(InstancePtr);
    1544:	4b ff fd e9 	bl      132c <XTft_Scroll>

	/*
	 * If there is no space in the current line for the next char
	 * go to next line by deleting the first line.
	 */
	while (RowVal > (XTFT_DISPLAY_HEIGHT - 1) - XTFT_CHAR_HEIGHT) {
    1548:	2b 9f 01 d3 	cmplwi  cr7,r31,467
    154c:	41 9d ff f0 	bgt+    cr7,153c <XTft_SetPosChar+0xb8>
	 * Update the column, row position values.
	 */
	InstancePtr->ColVal = ColVal;
	InstancePtr->RowVal = RowVal;

}
    1550:	80 01 00 1c 	lwz     r0,28(r1)

	/*
	 * Update the column, row position values.
	 */
	InstancePtr->ColVal = ColVal;
	InstancePtr->RowVal = RowVal;
    1554:	93 fe 00 1c 	stw     r31,28(r30)
	}

	/*
	 * Update the column, row position values.
	 */
	InstancePtr->ColVal = ColVal;
    1558:	93 be 00 18 	stw     r29,24(r30)
	InstancePtr->RowVal = RowVal;

}
    155c:	83 81 00 08 	lwz     r28,8(r1)
    1560:	7c 08 03 a6 	mtlr    r0
    1564:	83 a1 00 0c 	lwz     r29,12(r1)
    1568:	83 c1 00 10 	lwz     r30,16(r1)
    156c:	83 e1 00 14 	lwz     r31,20(r1)
    1570:	38 21 00 18 	addi    r1,r1,24
    1574:	4e 80 00 20 	blr
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid(ColVal <= (XTFT_DISPLAY_WIDTH - 1));
    1578:	3c 60 00 00 	lis     r3,0
    157c:	38 80 00 e4 	li      r4,228
    1580:	38 63 2f 1c 	addi    r3,r3,12060
    1584:	48 00 16 5d 	bl      2be0 <Xil_Assert>
    1588:	38 00 00 01 	li      r0,1
    158c:	90 1c 35 14 	stw     r0,13588(r28)
	 * Update the column, row position values.
	 */
	InstancePtr->ColVal = ColVal;
	InstancePtr->RowVal = RowVal;

}
    1590:	80 01 00 1c 	lwz     r0,28(r1)
    1594:	83 81 00 08 	lwz     r28,8(r1)
    1598:	83 a1 00 0c 	lwz     r29,12(r1)
    159c:	83 c1 00 10 	lwz     r30,16(r1)
    15a0:	7c 08 03 a6 	mtlr    r0
    15a4:	83 e1 00 14 	lwz     r31,20(r1)
    15a8:	38 21 00 18 	addi    r1,r1,24
    15ac:	4e 80 00 20 	blr
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid(ColVal <= (XTFT_DISPLAY_WIDTH - 1));
	Xil_AssertVoid(RowVal <= (XTFT_DISPLAY_HEIGHT - 1));
    15b0:	3c 60 00 00 	lis     r3,0
    15b4:	38 80 00 e5 	li      r4,229
    15b8:	38 63 2f 1c 	addi    r3,r3,12060
    15bc:	48 00 16 25 	bl      2be0 <Xil_Assert>
    15c0:	38 00 00 01 	li      r0,1
    15c4:	90 1c 35 14 	stw     r0,13588(r28)
    15c8:	4b ff ff 20 	b       14e8 <XTft_SetPosChar+0x64>
void XTft_SetPosChar(XTft *InstancePtr, u32 ColVal, u32 RowVal)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    15cc:	3c 60 00 00 	lis     r3,0
    15d0:	38 80 00 e2 	li      r4,226
    15d4:	38 63 2f 1c 	addi    r3,r3,12060
    15d8:	48 00 16 09 	bl      2be0 <Xil_Assert>
    15dc:	38 00 00 01 	li      r0,1
    15e0:	3d 20 00 00 	lis     r9,0
    15e4:	90 09 35 14 	stw     r0,13588(r9)
    15e8:	4b ff ff 00 	b       14e8 <XTft_SetPosChar+0x64>

000015ec <XTft_Write>:
*		there is a necessity for any other characters, it can be
*		added here.
*
****************************************************************************/
void XTft_Write(XTft *InstancePtr, u8 CharValue)
{
    15ec:	94 21 ff c8 	stwu    r1,-56(r1)
    15f0:	7c 08 02 a6 	mflr    r0
    15f4:	93 61 00 24 	stw     r27,36(r1)
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    15f8:	7c 7b 1b 79 	mr.     r27,r3
*		there is a necessity for any other characters, it can be
*		added here.
*
****************************************************************************/
void XTft_Write(XTft *InstancePtr, u8 CharValue)
{
    15fc:	93 e1 00 34 	stw     r31,52(r1)
    1600:	7c 9f 23 78 	mr      r31,r4
    1604:	92 a1 00 0c 	stw     r21,12(r1)
    1608:	92 c1 00 10 	stw     r22,16(r1)
    160c:	92 e1 00 14 	stw     r23,20(r1)
    1610:	93 01 00 18 	stw     r24,24(r1)
    1614:	93 21 00 1c 	stw     r25,28(r1)
    1618:	93 41 00 20 	stw     r26,32(r1)
    161c:	93 81 00 28 	stw     r28,40(r1)
    1620:	93 a1 00 2c 	stw     r29,44(r1)
    1624:	93 c1 00 30 	stw     r30,48(r1)
    1628:	90 01 00 3c 	stw     r0,60(r1)
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    162c:	41 82 02 0c 	beq-    1838 <XTft_Write+0x24c>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1630:	80 1b 00 14 	lwz     r0,20(r27)
    1634:	3d 20 11 11 	lis     r9,4369
    1638:	61 29 11 11 	ori     r9,r9,4369
void XTft_Write(XTft *InstancePtr, u8 CharValue)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    163c:	3f c0 00 00 	lis     r30,0
    1640:	3b a0 00 00 	li      r29,0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1644:	7f 80 48 00 	cmpw    cr7,r0,r9
void XTft_Write(XTft *InstancePtr, u8 CharValue)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1648:	93 be 35 14 	stw     r29,13588(r30)
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    164c:	41 9e 00 58 	beq-    cr7,16a4 <XTft_Write+0xb8>
    1650:	3c 60 00 00 	lis     r3,0
    1654:	38 80 01 91 	li      r4,401
    1658:	38 63 2f 1c 	addi    r3,r3,12060
    165c:	48 00 15 85 	bl      2be0 <Xil_Assert>
    1660:	38 00 00 01 	li      r0,1
    1664:	90 1e 35 14 	stw     r0,13588(r30)

			InstancePtr->ColVal += XTFT_CHAR_WIDTH;
			break;
	}

}
    1668:	80 01 00 3c 	lwz     r0,60(r1)
    166c:	82 a1 00 0c 	lwz     r21,12(r1)
    1670:	82 c1 00 10 	lwz     r22,16(r1)
    1674:	82 e1 00 14 	lwz     r23,20(r1)
    1678:	7c 08 03 a6 	mtlr    r0
    167c:	83 01 00 18 	lwz     r24,24(r1)
    1680:	83 21 00 1c 	lwz     r25,28(r1)
    1684:	83 41 00 20 	lwz     r26,32(r1)
    1688:	83 61 00 24 	lwz     r27,36(r1)
    168c:	83 81 00 28 	lwz     r28,40(r1)
    1690:	83 a1 00 2c 	lwz     r29,44(r1)
    1694:	83 c1 00 30 	lwz     r30,48(r1)
    1698:	83 e1 00 34 	lwz     r31,52(r1)
    169c:	38 21 00 38 	addi    r1,r1,56
    16a0:	4e 80 00 20 	blr
	/*
	 * First two cases handle the special input values
	 * and default case performs a character write operation
	 * and it updates the column position in the instance structure.
	 */
	switch (CharValue) {
    16a4:	2f 84 00 0a 	cmpwi   cr7,r4,10
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    16a8:	93 be 35 14 	stw     r29,13588(r30)
	/*
	 * First two cases handle the special input values
	 * and default case performs a character write operation
	 * and it updates the column position in the instance structure.
	 */
	switch (CharValue) {
    16ac:	41 9e 01 44 	beq-    cr7,17f0 <XTft_Write+0x204>
    16b0:	2f 84 00 0d 	cmpwi   cr7,r4,13
    16b4:	41 9e 01 a4 	beq-    cr7,1858 <XTft_Write+0x26c>
			/*
			 * Set the position and write the character and
			 * update the column position by width of
			 * character.
			 */
			XTft_SetPosChar(InstancePtr, InstancePtr->ColVal,
    16b8:	80 9b 00 18 	lwz     r4,24(r27)
    16bc:	7f 63 db 78 	mr      r3,r27
    16c0:	80 bb 00 1c 	lwz     r5,28(r27)
	u8 BitMapVal;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    16c4:	3f 80 00 00 	lis     r28,0
			/*
			 * Set the position and write the character and
			 * update the column position by width of
			 * character.
			 */
			XTft_SetPosChar(InstancePtr, InstancePtr->ColVal,
    16c8:	4b ff fd bd 	bl      1484 <XTft_SetPosChar>

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    16cc:	80 1b 00 14 	lwz     r0,20(r27)
    16d0:	3d 20 11 11 	lis     r9,4369
			 * update the column position by width of
			 * character.
			 */
			XTft_SetPosChar(InstancePtr, InstancePtr->ColVal,
					InstancePtr->RowVal);
			XTft_WriteChar(
    16d4:	82 db 00 18 	lwz     r22,24(r27)

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    16d8:	61 29 11 11 	ori     r9,r9,4369
			 * update the column position by width of
			 * character.
			 */
			XTft_SetPosChar(InstancePtr, InstancePtr->ColVal,
					InstancePtr->RowVal);
			XTft_WriteChar(
    16dc:	82 bb 00 1c 	lwz     r21,28(r27)

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    16e0:	7f 80 48 00 	cmpw    cr7,r0,r9
	u8 BitMapVal;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    16e4:	38 00 00 00 	li      r0,0
    16e8:	90 1e 35 14 	stw     r0,13588(r30)
			 * update the column position by width of
			 * character.
			 */
			XTft_SetPosChar(InstancePtr, InstancePtr->ColVal,
					InstancePtr->RowVal);
			XTft_WriteChar(
    16ec:	83 3b 00 20 	lwz     r25,32(r27)
    16f0:	82 fb 00 24 	lwz     r23,36(r27)

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    16f4:	41 9e 00 64 	beq-    cr7,1758 <XTft_Write+0x16c>
    16f8:	3c 60 00 00 	lis     r3,0
    16fc:	38 80 03 b5 	li      r4,949
    1700:	38 63 2f 1c 	addi    r3,r3,12060
    1704:	48 00 14 dd 	bl      2be0 <Xil_Assert>
    1708:	38 00 00 01 	li      r0,1
    170c:	90 1c 35 14 	stw     r0,13588(r28)
			XTft_WriteChar(
				InstancePtr, CharValue,
				InstancePtr->ColVal, InstancePtr->RowVal,
				InstancePtr->FgColor, InstancePtr->BgColor);

			InstancePtr->ColVal += XTFT_CHAR_WIDTH;
    1710:	81 3b 00 18 	lwz     r9,24(r27)
			break;
	}

}
    1714:	80 01 00 3c 	lwz     r0,60(r1)
    1718:	82 a1 00 0c 	lwz     r21,12(r1)
			XTft_WriteChar(
				InstancePtr, CharValue,
				InstancePtr->ColVal, InstancePtr->RowVal,
				InstancePtr->FgColor, InstancePtr->BgColor);

			InstancePtr->ColVal += XTFT_CHAR_WIDTH;
    171c:	39 29 00 08 	addi    r9,r9,8
			break;
	}

}
    1720:	82 c1 00 10 	lwz     r22,16(r1)
			XTft_WriteChar(
				InstancePtr, CharValue,
				InstancePtr->ColVal, InstancePtr->RowVal,
				InstancePtr->FgColor, InstancePtr->BgColor);

			InstancePtr->ColVal += XTFT_CHAR_WIDTH;
    1724:	91 3b 00 18 	stw     r9,24(r27)
			break;
	}

}
    1728:	7c 08 03 a6 	mtlr    r0
    172c:	82 e1 00 14 	lwz     r23,20(r1)
    1730:	83 01 00 18 	lwz     r24,24(r1)
    1734:	83 21 00 1c 	lwz     r25,28(r1)
    1738:	83 41 00 20 	lwz     r26,32(r1)
    173c:	83 61 00 24 	lwz     r27,36(r1)
    1740:	83 81 00 28 	lwz     r28,40(r1)
    1744:	83 a1 00 2c 	lwz     r29,44(r1)
    1748:	83 c1 00 30 	lwz     r30,48(r1)
    174c:	83 e1 00 34 	lwz     r31,52(r1)
    1750:	38 21 00 38 	addi    r1,r1,56
    1754:	4e 80 00 20 	blr
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid(ColStartVal <= (XTFT_DISPLAY_WIDTH - 1));
    1758:	2b 96 02 7f 	cmplwi  cr7,r22,639

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    175c:	90 1c 35 14 	stw     r0,13588(r28)
	Xil_AssertVoid(ColStartVal <= (XTFT_DISPLAY_WIDTH - 1));
    1760:	41 9d 01 20 	bgt-    cr7,1880 <XTft_Write+0x294>
	Xil_AssertVoid(RowStartVal <= (XTFT_DISPLAY_HEIGHT - 1));
    1764:	2b 95 01 df 	cmplwi  cr7,r21,479
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid(ColStartVal <= (XTFT_DISPLAY_WIDTH - 1));
    1768:	90 1c 35 14 	stw     r0,13588(r28)
	Xil_AssertVoid(RowStartVal <= (XTFT_DISPLAY_HEIGHT - 1));
    176c:	41 9d 01 30 	bgt-    cr7,189c <XTft_Write+0x2b0>

	/*
	 * Checks whether the given character value is more than or equal to
	 * space character value, as our character array starts with space.
	 */
	Xil_AssertVoid((u32) CharValue >= XTFT_ASCIICHAR_OFFSET);
    1770:	2b 9f 00 1f 	cmplwi  cr7,r31,31
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid(ColStartVal <= (XTFT_DISPLAY_WIDTH - 1));
	Xil_AssertVoid(RowStartVal <= (XTFT_DISPLAY_HEIGHT - 1));
    1774:	90 1c 35 14 	stw     r0,13588(r28)

	/*
	 * Checks whether the given character value is more than or equal to
	 * space character value, as our character array starts with space.
	 */
	Xil_AssertVoid((u32) CharValue >= XTFT_ASCIICHAR_OFFSET);
    1778:	40 9d 00 ec 	ble-    cr7,1864 <XTft_Write+0x278>
    177c:	1d 7f 00 0c 	mulli   r11,r31,12
    1780:	3d 20 00 00 	lis     r9,0
    1784:	93 bc 35 14 	stw     r29,13588(r28)
    1788:	39 29 2f 3c 	addi    r9,r9,12092
    178c:	39 6b fe 80 	addi    r11,r11,-384
    1790:	3b 00 00 00 	li      r24,0
    1794:	7f 4b 4a 14 	add     r26,r11,r9
    1798:	8b 9a 00 00 	lbz     r28,0(r26)
    179c:	7f b5 c2 14 	add     r29,r21,r24
    17a0:	7e df b3 78 	mr      r31,r22
    17a4:	3b c0 00 07 	li      r30,7
	 */
	for (RowIndex = 0; RowIndex < XTFT_CHAR_HEIGHT; RowIndex++) {
		BitMapVal = XTft_VidChars[(u32) CharValue -
					XTFT_ASCIICHAR_OFFSET][RowIndex];
		for (ColIndex = 0; ColIndex < XTFT_CHAR_WIDTH; ColIndex++) {
			if (BitMapVal &
    17a8:	7f 80 f6 30 	sraw    r0,r28,r30
			}

			/*
			 * Sets the color value to pixel.
			 */
			XTft_SetPixel(InstancePtr, ColStartVal+ColIndex,
    17ac:	7f e4 fb 78 	mr      r4,r31
	 */
	for (RowIndex = 0; RowIndex < XTFT_CHAR_HEIGHT; RowIndex++) {
		BitMapVal = XTft_VidChars[(u32) CharValue -
					XTFT_ASCIICHAR_OFFSET][RowIndex];
		for (ColIndex = 0; ColIndex < XTFT_CHAR_WIDTH; ColIndex++) {
			if (BitMapVal &
    17b0:	70 09 00 01 	andi.   r9,r0,1
			}

			/*
			 * Sets the color value to pixel.
			 */
			XTft_SetPixel(InstancePtr, ColStartVal+ColIndex,
    17b4:	7f 63 db 78 	mr      r3,r27
    17b8:	7f a5 eb 78 	mr      r5,r29
    17bc:	3b ff 00 01 	addi    r31,r31,1
	 */
	for (RowIndex = 0; RowIndex < XTFT_CHAR_HEIGHT; RowIndex++) {
		BitMapVal = XTft_VidChars[(u32) CharValue -
					XTFT_ASCIICHAR_OFFSET][RowIndex];
		for (ColIndex = 0; ColIndex < XTFT_CHAR_WIDTH; ColIndex++) {
			if (BitMapVal &
    17c0:	7f 26 cb 78 	mr      r6,r25
    17c4:	40 82 00 08 	bne-    17cc <XTft_Write+0x1e0>
    17c8:	7e e6 bb 78 	mr      r6,r23
			}

			/*
			 * Sets the color value to pixel.
			 */
			XTft_SetPixel(InstancePtr, ColStartVal+ColIndex,
    17cc:	4b ff f6 5d 	bl      e28 <XTft_SetPixel>
	 * whether value is 1 or 0.
	 */
	for (RowIndex = 0; RowIndex < XTFT_CHAR_HEIGHT; RowIndex++) {
		BitMapVal = XTft_VidChars[(u32) CharValue -
					XTFT_ASCIICHAR_OFFSET][RowIndex];
		for (ColIndex = 0; ColIndex < XTFT_CHAR_WIDTH; ColIndex++) {
    17d0:	2f 9e 00 00 	cmpwi   cr7,r30,0
    17d4:	3b de ff ff 	addi    r30,r30,-1
    17d8:	40 9e ff d0 	bne+    cr7,17a8 <XTft_Write+0x1bc>
	 * charcode.c file and regenerates the bitmap of that character.
	 * It draws that character on screen by setting the pixel either
	 * with the foreground or background color depending on
	 * whether value is 1 or 0.
	 */
	for (RowIndex = 0; RowIndex < XTFT_CHAR_HEIGHT; RowIndex++) {
    17dc:	2f 98 00 0b 	cmpwi   cr7,r24,11
    17e0:	3b 5a 00 01 	addi    r26,r26,1
    17e4:	3b 18 00 01 	addi    r24,r24,1
    17e8:	40 9e ff b0 	bne+    cr7,1798 <XTft_Write+0x1ac>
    17ec:	4b ff ff 24 	b       1710 <XTft_Write+0x124>
			break;
		case 0xa:
			/*
			 * Action to be taken for line feed.
			 */
			XTft_SetPos(InstancePtr, XTFT_DEF_COLVAL,
    17f0:	80 bb 00 1c 	lwz     r5,28(r27)
    17f4:	38 80 00 00 	li      r4,0
    17f8:	38 a5 00 0c 	addi    r5,r5,12

			InstancePtr->ColVal += XTFT_CHAR_WIDTH;
			break;
	}

}
    17fc:	80 01 00 3c 	lwz     r0,60(r1)
    1800:	82 a1 00 0c 	lwz     r21,12(r1)
    1804:	82 c1 00 10 	lwz     r22,16(r1)
    1808:	7c 08 03 a6 	mtlr    r0
    180c:	82 e1 00 14 	lwz     r23,20(r1)
    1810:	83 01 00 18 	lwz     r24,24(r1)
    1814:	83 21 00 1c 	lwz     r25,28(r1)
    1818:	83 41 00 20 	lwz     r26,32(r1)
    181c:	83 61 00 24 	lwz     r27,36(r1)
    1820:	83 81 00 28 	lwz     r28,40(r1)
    1824:	83 a1 00 2c 	lwz     r29,44(r1)
    1828:	83 c1 00 30 	lwz     r30,48(r1)
    182c:	83 e1 00 34 	lwz     r31,52(r1)
    1830:	38 21 00 38 	addi    r1,r1,56
			break;
		case 0xa:
			/*
			 * Action to be taken for line feed.
			 */
			XTft_SetPos(InstancePtr, XTFT_DEF_COLVAL,
    1834:	4b ff f2 1c 	b       a50 <XTft_SetPos>
void XTft_Write(XTft *InstancePtr, u8 CharValue)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1838:	3c 60 00 00 	lis     r3,0
    183c:	38 80 01 90 	li      r4,400
    1840:	38 63 2f 1c 	addi    r3,r3,12060
    1844:	48 00 13 9d 	bl      2be0 <Xil_Assert>
    1848:	38 00 00 01 	li      r0,1
    184c:	3d 20 00 00 	lis     r9,0
    1850:	90 09 35 14 	stw     r0,13588(r9)
    1854:	4b ff fe 14 	b       1668 <XTft_Write+0x7c>
	switch (CharValue) {
		case 0xd:
			/*
			 * Action to be taken for carriage return.
			 */
			XTft_SetPos(InstancePtr, XTFT_DEF_COLVAL,
    1858:	80 bb 00 1c 	lwz     r5,28(r27)
    185c:	38 80 00 00 	li      r4,0
    1860:	4b ff ff 9c 	b       17fc <XTft_Write+0x210>

	/*
	 * Checks whether the given character value is more than or equal to
	 * space character value, as our character array starts with space.
	 */
	Xil_AssertVoid((u32) CharValue >= XTFT_ASCIICHAR_OFFSET);
    1864:	3c 60 00 00 	lis     r3,0
    1868:	38 80 03 bd 	li      r4,957
    186c:	38 63 2f 1c 	addi    r3,r3,12060
    1870:	48 00 13 71 	bl      2be0 <Xil_Assert>
    1874:	38 00 00 01 	li      r0,1
    1878:	90 1e 35 14 	stw     r0,13588(r30)
    187c:	4b ff fe 94 	b       1710 <XTft_Write+0x124>
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid(ColStartVal <= (XTFT_DISPLAY_WIDTH - 1));
    1880:	3c 60 00 00 	lis     r3,0
    1884:	38 80 03 b6 	li      r4,950
    1888:	38 63 2f 1c 	addi    r3,r3,12060
    188c:	48 00 13 55 	bl      2be0 <Xil_Assert>
    1890:	38 00 00 01 	li      r0,1
    1894:	90 1e 35 14 	stw     r0,13588(r30)
    1898:	4b ff fe 78 	b       1710 <XTft_Write+0x124>
	Xil_AssertVoid(RowStartVal <= (XTFT_DISPLAY_HEIGHT - 1));
    189c:	3c 60 00 00 	lis     r3,0
    18a0:	38 80 03 b7 	li      r4,951
    18a4:	38 63 2f 1c 	addi    r3,r3,12060
    18a8:	48 00 13 39 	bl      2be0 <Xil_Assert>
    18ac:	38 00 00 01 	li      r0,1
    18b0:	90 1e 35 14 	stw     r0,13588(r30)
    18b4:	4b ff fe 5c 	b       1710 <XTft_Write+0x124>

000018b8 <XTft_WriteReg>:
* the TFT core is connected driectly to a DCR bus or a PLB bus - The driver
* takes care of this.
*
****************************************************************************/
void XTft_WriteReg(XTft* InstancePtr, u32 RegOffset, u32 Data)
{
    18b8:	94 21 ff f0 	stwu    r1,-16(r1)
    18bc:	7c 08 02 a6 	mflr    r0
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    18c0:	7c 6b 1b 79 	mr.     r11,r3
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    18c4:	3d 20 11 11 	lis     r9,4369
void XTft_WriteReg(XTft* InstancePtr, u32 RegOffset, u32 Data)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    18c8:	3c 60 00 00 	lis     r3,0
* the TFT core is connected driectly to a DCR bus or a PLB bus - The driver
* takes care of this.
*
****************************************************************************/
void XTft_WriteReg(XTft* InstancePtr, u32 RegOffset, u32 Data)
{
    18cc:	7c 88 23 78 	mr      r8,r4
    18d0:	93 e1 00 0c 	stw     r31,12(r1)
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    18d4:	61 29 11 11 	ori     r9,r9,4369
* the TFT core is connected driectly to a DCR bus or a PLB bus - The driver
* takes care of this.
*
****************************************************************************/
void XTft_WriteReg(XTft* InstancePtr, u32 RegOffset, u32 Data)
{
    18d8:	90 01 00 14 	stw     r0,20(r1)
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    18dc:	38 63 2f 1c 	addi    r3,r3,12060
    18e0:	3f e0 00 00 	lis     r31,0
    18e4:	39 40 00 00 	li      r10,0
    18e8:	38 80 03 2d 	li      r4,813
    18ec:	41 82 00 a0 	beq-    198c <XTft_WriteReg+0xd4>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    18f0:	80 0b 00 14 	lwz     r0,20(r11)
    18f4:	3c 60 00 00 	lis     r3,0
    18f8:	38 63 2f 1c 	addi    r3,r3,12060
    18fc:	38 80 03 2e 	li      r4,814
void XTft_WriteReg(XTft* InstancePtr, u32 RegOffset, u32 Data)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1900:	91 5f 35 14 	stw     r10,13588(r31)
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1904:	7f 80 48 00 	cmpw    cr7,r0,r9
    1908:	41 9e 00 24 	beq-    cr7,192c <XTft_WriteReg+0x74>
    190c:	48 00 12 d5 	bl      2be0 <Xil_Assert>
    1910:	38 00 00 01 	li      r0,1
    1914:	90 1f 35 14 	stw     r0,13588(r31)
			(RegOffset >> XTFT_DCR_REG_SHIFT)) & 0xFFF, Data);
#endif /*__PPC__*/
#endif /* XPAR_TFT_USE_DCR_BRIDGE */
	}

}
    1918:	80 01 00 14 	lwz     r0,20(r1)
    191c:	83 e1 00 0c 	lwz     r31,12(r1)
    1920:	38 21 00 10 	addi    r1,r1,16
    1924:	7c 08 03 a6 	mtlr    r0
    1928:	4e 80 00 20 	blr

	/*
	 * To check if the TFT controller is accessed through DCR bus
	 * directly or PLB bus directly.
	 */
	if (InstancePtr->TftConfig.PlbAccess) {
    192c:	a0 0b 00 0c 	lhz     r0,12(r11)
		/*
		 * Write to Register.
		 */
		Xil_Out32(InstancePtr->TftConfig.BaseAddress +
    1930:	7c a4 2b 78 	mr      r4,r5
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1934:	91 5f 35 14 	stw     r10,13588(r31)

	/*
	 * To check if the TFT controller is accessed through DCR bus
	 * directly or PLB bus directly.
	 */
	if (InstancePtr->TftConfig.PlbAccess) {
    1938:	2f 80 00 00 	cmpwi   cr7,r0,0
    193c:	41 9e 00 24 	beq-    cr7,1960 <XTft_WriteReg+0xa8>
		/*
		 * Write to Register.
		 */
		Xil_Out32(InstancePtr->TftConfig.BaseAddress +
    1940:	80 6b 00 04 	lwz     r3,4(r11)
    1944:	7c 68 1a 14 	add     r3,r8,r3
    1948:	48 00 13 49 	bl      2c90 <Xil_Out32>
			(RegOffset >> XTFT_DCR_REG_SHIFT)) & 0xFFF, Data);
#endif /*__PPC__*/
#endif /* XPAR_TFT_USE_DCR_BRIDGE */
	}

}
    194c:	80 01 00 14 	lwz     r0,20(r1)
    1950:	83 e1 00 0c 	lwz     r31,12(r1)
    1954:	38 21 00 10 	addi    r1,r1,16
    1958:	7c 08 03 a6 	mtlr    r0
    195c:	4e 80 00 20 	blr
#else
		/*
		 * Write to Register.
		 */
#ifdef __PPC__
		XIo_DcrOut((InstancePtr->TftConfig.DcrBaseAddr +
    1960:	80 0b 00 10 	lwz     r0,16(r11)
    1964:	55 03 f0 be 	rlwinm  r3,r8,30,2,31
    1968:	7c a4 2b 78 	mr      r4,r5
    196c:	7c 63 02 14 	add     r3,r3,r0
    1970:	54 63 05 3e 	clrlwi  r3,r3,20
    1974:	48 00 0e 15 	bl      2788 <XIo_DcrOut>
			(RegOffset >> XTFT_DCR_REG_SHIFT)) & 0xFFF, Data);
#endif /*__PPC__*/
#endif /* XPAR_TFT_USE_DCR_BRIDGE */
	}

}
    1978:	80 01 00 14 	lwz     r0,20(r1)
    197c:	83 e1 00 0c 	lwz     r31,12(r1)
    1980:	38 21 00 10 	addi    r1,r1,16
    1984:	7c 08 03 a6 	mtlr    r0
    1988:	4e 80 00 20 	blr
void XTft_WriteReg(XTft* InstancePtr, u32 RegOffset, u32 Data)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    198c:	48 00 12 55 	bl      2be0 <Xil_Assert>
    1990:	38 00 00 01 	li      r0,1
    1994:	3d 20 00 00 	lis     r9,0
    1998:	90 09 35 14 	stw     r0,13588(r9)
    199c:	4b ff ff 7c 	b       1918 <XTft_WriteReg+0x60>

000019a0 <XTft_IntrDisable>:
*
* @note		None.
*
****************************************************************************/
void XTft_IntrDisable(XTft* InstancePtr)
{
    19a0:	94 21 ff f0 	stwu    r1,-16(r1)
    19a4:	7c 08 02 a6 	mflr    r0

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    19a8:	3d 20 11 11 	lis     r9,4369
	u32 RegValue;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    19ac:	38 80 04 0e 	li      r4,1038
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    19b0:	61 29 11 11 	ori     r9,r9,4369
	u32 RegValue;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    19b4:	39 60 00 00 	li      r11,0
*
* @note		None.
*
****************************************************************************/
void XTft_IntrDisable(XTft* InstancePtr)
{
    19b8:	93 c1 00 08 	stw     r30,8(r1)
	u32 RegValue;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    19bc:	7c 7e 1b 79 	mr.     r30,r3
*
* @note		None.
*
****************************************************************************/
void XTft_IntrDisable(XTft* InstancePtr)
{
    19c0:	93 e1 00 0c 	stw     r31,12(r1)
	u32 RegValue;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    19c4:	3f e0 00 00 	lis     r31,0
*
* @note		None.
*
****************************************************************************/
void XTft_IntrDisable(XTft* InstancePtr)
{
    19c8:	90 01 00 14 	stw     r0,20(r1)
	u32 RegValue;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    19cc:	41 82 00 74 	beq-    1a40 <XTft_IntrDisable+0xa0>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    19d0:	80 1e 00 14 	lwz     r0,20(r30)
    19d4:	38 80 04 0f 	li      r4,1039
	u32 RegValue;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    19d8:	91 7f 35 14 	stw     r11,13588(r31)
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    19dc:	7f 80 48 00 	cmpw    cr7,r0,r9
    19e0:	41 9e 00 30 	beq-    cr7,1a10 <XTft_IntrDisable+0x70>
    19e4:	3c 60 00 00 	lis     r3,0
    19e8:	38 63 2f 1c 	addi    r3,r3,12060
    19ec:	48 00 11 f5 	bl      2be0 <Xil_Assert>
    19f0:	38 00 00 01 	li      r0,1
    19f4:	90 1f 35 14 	stw     r0,13588(r31)
	 */
	RegValue = XTft_ReadReg(InstancePtr, XTFT_IESR_OFFSET);
	XTft_WriteReg(InstancePtr, XTFT_IESR_OFFSET,
				RegValue & (~XTFT_IESR_IE_MASK));

}
    19f8:	80 01 00 14 	lwz     r0,20(r1)
    19fc:	83 c1 00 08 	lwz     r30,8(r1)
    1a00:	83 e1 00 0c 	lwz     r31,12(r1)
    1a04:	38 21 00 10 	addi    r1,r1,16
    1a08:	7c 08 03 a6 	mtlr    r0
    1a0c:	4e 80 00 20 	blr
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);

	/*
	 * Disable interrupts by clearing interrupt enable bit.
	 */
	RegValue = XTft_ReadReg(InstancePtr, XTFT_IESR_OFFSET);
    1a10:	38 80 00 08 	li      r4,8

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1a14:	91 7f 35 14 	stw     r11,13588(r31)

	/*
	 * Disable interrupts by clearing interrupt enable bit.
	 */
	RegValue = XTft_ReadReg(InstancePtr, XTFT_IESR_OFFSET);
    1a18:	4b ff f2 79 	bl      c90 <XTft_ReadReg>
	XTft_WriteReg(InstancePtr, XTFT_IESR_OFFSET,
				RegValue & (~XTFT_IESR_IE_MASK));

}
    1a1c:	80 01 00 14 	lwz     r0,20(r1)

	/*
	 * Disable interrupts by clearing interrupt enable bit.
	 */
	RegValue = XTft_ReadReg(InstancePtr, XTFT_IESR_OFFSET);
	XTft_WriteReg(InstancePtr, XTFT_IESR_OFFSET,
    1a20:	54 65 07 76 	rlwinm  r5,r3,0,29,27
				RegValue & (~XTFT_IESR_IE_MASK));

}
    1a24:	83 e1 00 0c 	lwz     r31,12(r1)

	/*
	 * Disable interrupts by clearing interrupt enable bit.
	 */
	RegValue = XTft_ReadReg(InstancePtr, XTFT_IESR_OFFSET);
	XTft_WriteReg(InstancePtr, XTFT_IESR_OFFSET,
    1a28:	7f c3 f3 78 	mr      r3,r30
    1a2c:	38 80 00 08 	li      r4,8
				RegValue & (~XTFT_IESR_IE_MASK));

}
    1a30:	7c 08 03 a6 	mtlr    r0
    1a34:	83 c1 00 08 	lwz     r30,8(r1)
    1a38:	38 21 00 10 	addi    r1,r1,16

	/*
	 * Disable interrupts by clearing interrupt enable bit.
	 */
	RegValue = XTft_ReadReg(InstancePtr, XTFT_IESR_OFFSET);
	XTft_WriteReg(InstancePtr, XTFT_IESR_OFFSET,
    1a3c:	4b ff fe 7c 	b       18b8 <XTft_WriteReg>
	u32 RegValue;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1a40:	3c 60 00 00 	lis     r3,0
    1a44:	38 63 2f 1c 	addi    r3,r3,12060
    1a48:	48 00 11 99 	bl      2be0 <Xil_Assert>
    1a4c:	38 00 00 01 	li      r0,1
    1a50:	3d 20 00 00 	lis     r9,0
    1a54:	90 09 35 14 	stw     r0,13588(r9)
    1a58:	4b ff ff a0 	b       19f8 <XTft_IntrDisable+0x58>

00001a5c <XTft_IntrEnable>:
*
* @note		None.
*
****************************************************************************/
void XTft_IntrEnable(XTft* InstancePtr)
{
    1a5c:	94 21 ff f0 	stwu    r1,-16(r1)
    1a60:	7c 08 02 a6 	mflr    r0

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1a64:	3d 20 11 11 	lis     r9,4369
	u32 RegValue;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1a68:	38 80 03 ef 	li      r4,1007
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1a6c:	61 29 11 11 	ori     r9,r9,4369
	u32 RegValue;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1a70:	39 60 00 00 	li      r11,0
*
* @note		None.
*
****************************************************************************/
void XTft_IntrEnable(XTft* InstancePtr)
{
    1a74:	93 c1 00 08 	stw     r30,8(r1)
	u32 RegValue;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1a78:	7c 7e 1b 79 	mr.     r30,r3
*
* @note		None.
*
****************************************************************************/
void XTft_IntrEnable(XTft* InstancePtr)
{
    1a7c:	93 e1 00 0c 	stw     r31,12(r1)
	u32 RegValue;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1a80:	3f e0 00 00 	lis     r31,0
*
* @note		None.
*
****************************************************************************/
void XTft_IntrEnable(XTft* InstancePtr)
{
    1a84:	90 01 00 14 	stw     r0,20(r1)
	u32 RegValue;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1a88:	41 82 00 74 	beq-    1afc <XTft_IntrEnable+0xa0>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1a8c:	80 1e 00 14 	lwz     r0,20(r30)
    1a90:	38 80 03 f0 	li      r4,1008
	u32 RegValue;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1a94:	91 7f 35 14 	stw     r11,13588(r31)
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1a98:	7f 80 48 00 	cmpw    cr7,r0,r9
    1a9c:	41 9e 00 30 	beq-    cr7,1acc <XTft_IntrEnable+0x70>
    1aa0:	3c 60 00 00 	lis     r3,0
    1aa4:	38 63 2f 1c 	addi    r3,r3,12060
    1aa8:	48 00 11 39 	bl      2be0 <Xil_Assert>
    1aac:	38 00 00 01 	li      r0,1
    1ab0:	90 1f 35 14 	stw     r0,13588(r31)
	 */
	RegValue = XTft_ReadReg(InstancePtr, XTFT_IESR_OFFSET);
	XTft_WriteReg(InstancePtr, XTFT_IESR_OFFSET, RegValue |
			XTFT_IESR_IE_MASK);

}
    1ab4:	80 01 00 14 	lwz     r0,20(r1)
    1ab8:	83 c1 00 08 	lwz     r30,8(r1)
    1abc:	83 e1 00 0c 	lwz     r31,12(r1)
    1ac0:	38 21 00 10 	addi    r1,r1,16
    1ac4:	7c 08 03 a6 	mtlr    r0
    1ac8:	4e 80 00 20 	blr
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);

	/*
	 * Enable interrupts by setting interrupt enable bit.
	 */
	RegValue = XTft_ReadReg(InstancePtr, XTFT_IESR_OFFSET);
    1acc:	38 80 00 08 	li      r4,8

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1ad0:	91 7f 35 14 	stw     r11,13588(r31)

	/*
	 * Enable interrupts by setting interrupt enable bit.
	 */
	RegValue = XTft_ReadReg(InstancePtr, XTFT_IESR_OFFSET);
    1ad4:	4b ff f1 bd 	bl      c90 <XTft_ReadReg>
	XTft_WriteReg(InstancePtr, XTFT_IESR_OFFSET, RegValue |
			XTFT_IESR_IE_MASK);

}
    1ad8:	80 01 00 14 	lwz     r0,20(r1)

	/*
	 * Enable interrupts by setting interrupt enable bit.
	 */
	RegValue = XTft_ReadReg(InstancePtr, XTFT_IESR_OFFSET);
	XTft_WriteReg(InstancePtr, XTFT_IESR_OFFSET, RegValue |
    1adc:	60 65 00 08 	ori     r5,r3,8
			XTFT_IESR_IE_MASK);

}
    1ae0:	83 e1 00 0c 	lwz     r31,12(r1)

	/*
	 * Enable interrupts by setting interrupt enable bit.
	 */
	RegValue = XTft_ReadReg(InstancePtr, XTFT_IESR_OFFSET);
	XTft_WriteReg(InstancePtr, XTFT_IESR_OFFSET, RegValue |
    1ae4:	7f c3 f3 78 	mr      r3,r30
    1ae8:	38 80 00 08 	li      r4,8
			XTFT_IESR_IE_MASK);

}
    1aec:	7c 08 03 a6 	mtlr    r0
    1af0:	83 c1 00 08 	lwz     r30,8(r1)
    1af4:	38 21 00 10 	addi    r1,r1,16

	/*
	 * Enable interrupts by setting interrupt enable bit.
	 */
	RegValue = XTft_ReadReg(InstancePtr, XTFT_IESR_OFFSET);
	XTft_WriteReg(InstancePtr, XTFT_IESR_OFFSET, RegValue |
    1af8:	4b ff fd c0 	b       18b8 <XTft_WriteReg>
	u32 RegValue;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1afc:	3c 60 00 00 	lis     r3,0
    1b00:	38 63 2f 1c 	addi    r3,r3,12060
    1b04:	48 00 10 dd 	bl      2be0 <Xil_Assert>
    1b08:	38 00 00 01 	li      r0,1
    1b0c:	3d 20 00 00 	lis     r9,0
    1b10:	90 09 35 14 	stw     r0,13588(r9)
    1b14:	4b ff ff a0 	b       1ab4 <XTft_IntrEnable+0x58>

00001b18 <XTft_SetFrameBaseAddr>:
*		available from this new address so that frame data to 640*480
*		screen can be written.
*
****************************************************************************/
void XTft_SetFrameBaseAddr(XTft* InstancePtr, u32 NewFrameBaseAddr)
{
    1b18:	94 21 ff e8 	stwu    r1,-24(r1)
    1b1c:	7c 08 02 a6 	mflr    r0
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1b20:	3d 20 11 11 	lis     r9,4369
void XTft_SetFrameBaseAddr(XTft* InstancePtr, u32 NewFrameBaseAddr)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1b24:	39 60 00 00 	li      r11,0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1b28:	61 29 11 11 	ori     r9,r9,4369
*		available from this new address so that frame data to 640*480
*		screen can be written.
*
****************************************************************************/
void XTft_SetFrameBaseAddr(XTft* InstancePtr, u32 NewFrameBaseAddr)
{
    1b2c:	93 a1 00 0c 	stw     r29,12(r1)
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1b30:	7c 7d 1b 79 	mr.     r29,r3
*		available from this new address so that frame data to 640*480
*		screen can be written.
*
****************************************************************************/
void XTft_SetFrameBaseAddr(XTft* InstancePtr, u32 NewFrameBaseAddr)
{
    1b34:	93 c1 00 10 	stw     r30,16(r1)
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1b38:	3f c0 00 00 	lis     r30,0
*		available from this new address so that frame data to 640*480
*		screen can be written.
*
****************************************************************************/
void XTft_SetFrameBaseAddr(XTft* InstancePtr, u32 NewFrameBaseAddr)
{
    1b3c:	93 e1 00 14 	stw     r31,20(r1)
    1b40:	7c 9f 23 78 	mr      r31,r4
    1b44:	90 01 00 1c 	stw     r0,28(r1)
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1b48:	38 80 03 01 	li      r4,769
    1b4c:	41 82 00 b8 	beq-    1c04 <XTft_SetFrameBaseAddr+0xec>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1b50:	80 1d 00 14 	lwz     r0,20(r29)
    1b54:	38 80 03 02 	li      r4,770
void XTft_SetFrameBaseAddr(XTft* InstancePtr, u32 NewFrameBaseAddr)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1b58:	91 7e 35 14 	stw     r11,13588(r30)
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1b5c:	7f 80 48 00 	cmpw    cr7,r0,r9
    1b60:	41 9e 00 34 	beq-    cr7,1b94 <XTft_SetFrameBaseAddr+0x7c>
    1b64:	3c 60 00 00 	lis     r3,0
    1b68:	38 63 2f 1c 	addi    r3,r3,12060
    1b6c:	48 00 10 75 	bl      2be0 <Xil_Assert>
    1b70:	38 00 00 01 	li      r0,1
    1b74:	90 1e 35 14 	stw     r0,13588(r30)
	/*
	 * Update the Instance structure member.
	 */
	InstancePtr->TftConfig.VideoMemBaseAddr =  NewFrameBaseAddr;

}
    1b78:	80 01 00 1c 	lwz     r0,28(r1)
    1b7c:	83 a1 00 0c 	lwz     r29,12(r1)
    1b80:	83 c1 00 10 	lwz     r30,16(r1)
    1b84:	83 e1 00 14 	lwz     r31,20(r1)
    1b88:	7c 08 03 a6 	mtlr    r0
    1b8c:	38 21 00 18 	addi    r1,r1,24
    1b90:	4e 80 00 20 	blr
	Xil_AssertVoid((NewFrameBaseAddr & 0x1FFFFF) == 0x0);

	/*
	 * Write to the Control Register.
	 */
	XTft_WriteReg(InstancePtr, XTFT_AR_OFFSET, NewFrameBaseAddr);
    1b94:	38 80 00 00 	li      r4,0
    1b98:	7f e5 fb 78 	mr      r5,r31
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1b9c:	91 7e 35 14 	stw     r11,13588(r30)
	Xil_AssertVoid((NewFrameBaseAddr & 0x1FFFFF) == 0x0);
    1ba0:	57 e0 02 ff 	clrlwi. r0,r31,11
    1ba4:	40 82 00 2c 	bne-    1bd0 <XTft_SetFrameBaseAddr+0xb8>
    1ba8:	90 1e 35 14 	stw     r0,13588(r30)

	/*
	 * Write to the Control Register.
	 */
	XTft_WriteReg(InstancePtr, XTFT_AR_OFFSET, NewFrameBaseAddr);
    1bac:	4b ff fd 0d 	bl      18b8 <XTft_WriteReg>
	/*
	 * Update the Instance structure member.
	 */
	InstancePtr->TftConfig.VideoMemBaseAddr =  NewFrameBaseAddr;

}
    1bb0:	80 01 00 1c 	lwz     r0,28(r1)
	XTft_WriteReg(InstancePtr, XTFT_AR_OFFSET, NewFrameBaseAddr);

	/*
	 * Update the Instance structure member.
	 */
	InstancePtr->TftConfig.VideoMemBaseAddr =  NewFrameBaseAddr;
    1bb4:	93 fd 00 08 	stw     r31,8(r29)

}
    1bb8:	83 c1 00 10 	lwz     r30,16(r1)
    1bbc:	83 a1 00 0c 	lwz     r29,12(r1)
    1bc0:	7c 08 03 a6 	mtlr    r0
    1bc4:	83 e1 00 14 	lwz     r31,20(r1)
    1bc8:	38 21 00 18 	addi    r1,r1,24
    1bcc:	4e 80 00 20 	blr
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	Xil_AssertVoid((NewFrameBaseAddr & 0x1FFFFF) == 0x0);
    1bd0:	3c 60 00 00 	lis     r3,0
    1bd4:	38 80 03 03 	li      r4,771
    1bd8:	38 63 2f 1c 	addi    r3,r3,12060
    1bdc:	48 00 10 05 	bl      2be0 <Xil_Assert>
    1be0:	38 00 00 01 	li      r0,1
    1be4:	90 1e 35 14 	stw     r0,13588(r30)
	/*
	 * Update the Instance structure member.
	 */
	InstancePtr->TftConfig.VideoMemBaseAddr =  NewFrameBaseAddr;

}
    1be8:	80 01 00 1c 	lwz     r0,28(r1)
    1bec:	83 a1 00 0c 	lwz     r29,12(r1)
    1bf0:	83 c1 00 10 	lwz     r30,16(r1)
    1bf4:	83 e1 00 14 	lwz     r31,20(r1)
    1bf8:	7c 08 03 a6 	mtlr    r0
    1bfc:	38 21 00 18 	addi    r1,r1,24
    1c00:	4e 80 00 20 	blr
void XTft_SetFrameBaseAddr(XTft* InstancePtr, u32 NewFrameBaseAddr)
{
	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1c04:	3c 60 00 00 	lis     r3,0
    1c08:	38 63 2f 1c 	addi    r3,r3,12060
    1c0c:	48 00 0f d5 	bl      2be0 <Xil_Assert>
    1c10:	38 00 00 01 	li      r0,1
    1c14:	3d 20 00 00 	lis     r9,0
    1c18:	90 09 35 14 	stw     r0,13588(r9)
    1c1c:	4b ff ff 5c 	b       1b78 <XTft_SetFrameBaseAddr+0x60>

00001c20 <XTft_ScanNormal>:
*
* @note		None.
*
****************************************************************************/
void XTft_ScanNormal(XTft* InstancePtr)
{
    1c20:	94 21 ff f0 	stwu    r1,-16(r1)
    1c24:	7c 08 02 a6 	mflr    r0

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1c28:	3d 20 11 11 	lis     r9,4369
	u32 CtrlReg;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1c2c:	38 80 02 d6 	li      r4,726
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1c30:	61 29 11 11 	ori     r9,r9,4369
	u32 CtrlReg;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1c34:	39 60 00 00 	li      r11,0
*
* @note		None.
*
****************************************************************************/
void XTft_ScanNormal(XTft* InstancePtr)
{
    1c38:	93 c1 00 08 	stw     r30,8(r1)
	u32 CtrlReg;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1c3c:	7c 7e 1b 79 	mr.     r30,r3
*
* @note		None.
*
****************************************************************************/
void XTft_ScanNormal(XTft* InstancePtr)
{
    1c40:	93 e1 00 0c 	stw     r31,12(r1)
	u32 CtrlReg;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1c44:	3f e0 00 00 	lis     r31,0
*
* @note		None.
*
****************************************************************************/
void XTft_ScanNormal(XTft* InstancePtr)
{
    1c48:	90 01 00 14 	stw     r0,20(r1)
	u32 CtrlReg;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1c4c:	41 82 00 74 	beq-    1cc0 <XTft_ScanNormal+0xa0>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1c50:	80 1e 00 14 	lwz     r0,20(r30)
    1c54:	38 80 02 d7 	li      r4,727
	u32 CtrlReg;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1c58:	91 7f 35 14 	stw     r11,13588(r31)
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1c5c:	7f 80 48 00 	cmpw    cr7,r0,r9
    1c60:	41 9e 00 30 	beq-    cr7,1c90 <XTft_ScanNormal+0x70>
    1c64:	3c 60 00 00 	lis     r3,0
    1c68:	38 63 2f 1c 	addi    r3,r3,12060
    1c6c:	48 00 0f 75 	bl      2be0 <Xil_Assert>
    1c70:	38 00 00 01 	li      r0,1
    1c74:	90 1f 35 14 	stw     r0,13588(r31)
	/*
	 * Write to the Control Register.
	 */
	XTft_WriteReg(InstancePtr, XTFT_CR_OFFSET, CtrlReg);

}
    1c78:	80 01 00 14 	lwz     r0,20(r1)
    1c7c:	83 c1 00 08 	lwz     r30,8(r1)
    1c80:	83 e1 00 0c 	lwz     r31,12(r1)
    1c84:	38 21 00 10 	addi    r1,r1,16
    1c88:	7c 08 03 a6 	mtlr    r0
    1c8c:	4e 80 00 20 	blr
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);

	/*
	 * Read the Control Register.
	 */
	CtrlReg = XTft_ReadReg(InstancePtr, XTFT_CR_OFFSET);
    1c90:	38 80 00 04 	li      r4,4

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1c94:	91 7f 35 14 	stw     r11,13588(r31)

	/*
	 * Read the Control Register.
	 */
	CtrlReg = XTft_ReadReg(InstancePtr, XTFT_CR_OFFSET);
    1c98:	4b ff ef f9 	bl      c90 <XTft_ReadReg>
	/*
	 * Write to the Control Register.
	 */
	XTft_WriteReg(InstancePtr, XTFT_CR_OFFSET, CtrlReg);

}
    1c9c:	80 01 00 14 	lwz     r0,20(r1)
	CtrlReg &= (~XTFT_CR_DPS_MASK);

	/*
	 * Write to the Control Register.
	 */
	XTft_WriteReg(InstancePtr, XTFT_CR_OFFSET, CtrlReg);
    1ca0:	54 65 07 fa 	rlwinm  r5,r3,0,31,29

}
    1ca4:	83 e1 00 0c 	lwz     r31,12(r1)
	CtrlReg &= (~XTFT_CR_DPS_MASK);

	/*
	 * Write to the Control Register.
	 */
	XTft_WriteReg(InstancePtr, XTFT_CR_OFFSET, CtrlReg);
    1ca8:	7f c3 f3 78 	mr      r3,r30
    1cac:	38 80 00 04 	li      r4,4

}
    1cb0:	7c 08 03 a6 	mtlr    r0
    1cb4:	83 c1 00 08 	lwz     r30,8(r1)
    1cb8:	38 21 00 10 	addi    r1,r1,16
	CtrlReg &= (~XTFT_CR_DPS_MASK);

	/*
	 * Write to the Control Register.
	 */
	XTft_WriteReg(InstancePtr, XTFT_CR_OFFSET, CtrlReg);
    1cbc:	4b ff fb fc 	b       18b8 <XTft_WriteReg>
	u32 CtrlReg;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1cc0:	3c 60 00 00 	lis     r3,0
    1cc4:	38 63 2f 1c 	addi    r3,r3,12060
    1cc8:	48 00 0f 19 	bl      2be0 <Xil_Assert>
    1ccc:	38 00 00 01 	li      r0,1
    1cd0:	3d 20 00 00 	lis     r9,0
    1cd4:	90 09 35 14 	stw     r0,13588(r9)
    1cd8:	4b ff ff a0 	b       1c78 <XTft_ScanNormal+0x58>

00001cdc <XTft_ScanReverse>:
* 		reverse scan mode is the horizontal and vertical mirror image
*		of the image in normal scan mode.
*
****************************************************************************/
void XTft_ScanReverse(XTft* InstancePtr)
{
    1cdc:	94 21 ff f0 	stwu    r1,-16(r1)
    1ce0:	7c 08 02 a6 	mflr    r0

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1ce4:	3d 20 11 11 	lis     r9,4369
	u32 CtrlReg;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1ce8:	38 80 02 ae 	li      r4,686
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1cec:	61 29 11 11 	ori     r9,r9,4369
	u32 CtrlReg;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1cf0:	39 60 00 00 	li      r11,0
* 		reverse scan mode is the horizontal and vertical mirror image
*		of the image in normal scan mode.
*
****************************************************************************/
void XTft_ScanReverse(XTft* InstancePtr)
{
    1cf4:	93 c1 00 08 	stw     r30,8(r1)
	u32 CtrlReg;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1cf8:	7c 7e 1b 79 	mr.     r30,r3
* 		reverse scan mode is the horizontal and vertical mirror image
*		of the image in normal scan mode.
*
****************************************************************************/
void XTft_ScanReverse(XTft* InstancePtr)
{
    1cfc:	93 e1 00 0c 	stw     r31,12(r1)
	u32 CtrlReg;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1d00:	3f e0 00 00 	lis     r31,0
* 		reverse scan mode is the horizontal and vertical mirror image
*		of the image in normal scan mode.
*
****************************************************************************/
void XTft_ScanReverse(XTft* InstancePtr)
{
    1d04:	90 01 00 14 	stw     r0,20(r1)
	u32 CtrlReg;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1d08:	41 82 00 74 	beq-    1d7c <XTft_ScanReverse+0xa0>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1d0c:	80 1e 00 14 	lwz     r0,20(r30)
    1d10:	38 80 02 af 	li      r4,687
	u32 CtrlReg;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1d14:	91 7f 35 14 	stw     r11,13588(r31)
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1d18:	7f 80 48 00 	cmpw    cr7,r0,r9
    1d1c:	41 9e 00 30 	beq-    cr7,1d4c <XTft_ScanReverse+0x70>
    1d20:	3c 60 00 00 	lis     r3,0
    1d24:	38 63 2f 1c 	addi    r3,r3,12060
    1d28:	48 00 0e b9 	bl      2be0 <Xil_Assert>
    1d2c:	38 00 00 01 	li      r0,1
    1d30:	90 1f 35 14 	stw     r0,13588(r31)
	/*
	 * Write to the Control Register.
	 */
	XTft_WriteReg(InstancePtr, XTFT_CR_OFFSET, CtrlReg);

}
    1d34:	80 01 00 14 	lwz     r0,20(r1)
    1d38:	83 c1 00 08 	lwz     r30,8(r1)
    1d3c:	83 e1 00 0c 	lwz     r31,12(r1)
    1d40:	38 21 00 10 	addi    r1,r1,16
    1d44:	7c 08 03 a6 	mtlr    r0
    1d48:	4e 80 00 20 	blr
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);

	/*
	 * Read the Control Register.
	 */
	CtrlReg = XTft_ReadReg(InstancePtr, XTFT_CR_OFFSET);
    1d4c:	38 80 00 04 	li      r4,4

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1d50:	91 7f 35 14 	stw     r11,13588(r31)

	/*
	 * Read the Control Register.
	 */
	CtrlReg = XTft_ReadReg(InstancePtr, XTFT_CR_OFFSET);
    1d54:	4b ff ef 3d 	bl      c90 <XTft_ReadReg>
	/*
	 * Write to the Control Register.
	 */
	XTft_WriteReg(InstancePtr, XTFT_CR_OFFSET, CtrlReg);

}
    1d58:	80 01 00 14 	lwz     r0,20(r1)
	CtrlReg |= XTFT_CR_DPS_MASK;

	/*
	 * Write to the Control Register.
	 */
	XTft_WriteReg(InstancePtr, XTFT_CR_OFFSET, CtrlReg);
    1d5c:	60 65 00 02 	ori     r5,r3,2

}
    1d60:	83 e1 00 0c 	lwz     r31,12(r1)
	CtrlReg |= XTFT_CR_DPS_MASK;

	/*
	 * Write to the Control Register.
	 */
	XTft_WriteReg(InstancePtr, XTFT_CR_OFFSET, CtrlReg);
    1d64:	7f c3 f3 78 	mr      r3,r30
    1d68:	38 80 00 04 	li      r4,4

}
    1d6c:	7c 08 03 a6 	mtlr    r0
    1d70:	83 c1 00 08 	lwz     r30,8(r1)
    1d74:	38 21 00 10 	addi    r1,r1,16
	CtrlReg |= XTFT_CR_DPS_MASK;

	/*
	 * Write to the Control Register.
	 */
	XTft_WriteReg(InstancePtr, XTFT_CR_OFFSET, CtrlReg);
    1d78:	4b ff fb 40 	b       18b8 <XTft_WriteReg>
	u32 CtrlReg;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1d7c:	3c 60 00 00 	lis     r3,0
    1d80:	38 63 2f 1c 	addi    r3,r3,12060
    1d84:	48 00 0e 5d 	bl      2be0 <Xil_Assert>
    1d88:	38 00 00 01 	li      r0,1
    1d8c:	3d 20 00 00 	lis     r9,0
    1d90:	90 09 35 14 	stw     r0,13588(r9)
    1d94:	4b ff ff a0 	b       1d34 <XTft_ScanReverse+0x58>

00001d98 <XTft_DisableDisplay>:
*
* @note		None.
*
****************************************************************************/
void XTft_DisableDisplay(XTft* InstancePtr)
{
    1d98:	94 21 ff f0 	stwu    r1,-16(r1)
    1d9c:	7c 08 02 a6 	mflr    r0

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1da0:	3d 20 11 11 	lis     r9,4369
	u32 CtrlReg;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1da4:	38 80 02 84 	li      r4,644
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1da8:	61 29 11 11 	ori     r9,r9,4369
	u32 CtrlReg;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1dac:	39 60 00 00 	li      r11,0
*
* @note		None.
*
****************************************************************************/
void XTft_DisableDisplay(XTft* InstancePtr)
{
    1db0:	93 c1 00 08 	stw     r30,8(r1)
	u32 CtrlReg;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1db4:	7c 7e 1b 79 	mr.     r30,r3
*
* @note		None.
*
****************************************************************************/
void XTft_DisableDisplay(XTft* InstancePtr)
{
    1db8:	93 e1 00 0c 	stw     r31,12(r1)
	u32 CtrlReg;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1dbc:	3f e0 00 00 	lis     r31,0
*
* @note		None.
*
****************************************************************************/
void XTft_DisableDisplay(XTft* InstancePtr)
{
    1dc0:	90 01 00 14 	stw     r0,20(r1)
	u32 CtrlReg;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1dc4:	41 82 00 74 	beq-    1e38 <XTft_DisableDisplay+0xa0>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1dc8:	80 1e 00 14 	lwz     r0,20(r30)
    1dcc:	38 80 02 85 	li      r4,645
	u32 CtrlReg;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1dd0:	91 7f 35 14 	stw     r11,13588(r31)
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1dd4:	7f 80 48 00 	cmpw    cr7,r0,r9
    1dd8:	41 9e 00 30 	beq-    cr7,1e08 <XTft_DisableDisplay+0x70>
    1ddc:	3c 60 00 00 	lis     r3,0
    1de0:	38 63 2f 1c 	addi    r3,r3,12060
    1de4:	48 00 0d fd 	bl      2be0 <Xil_Assert>
    1de8:	38 00 00 01 	li      r0,1
    1dec:	90 1f 35 14 	stw     r0,13588(r31)
	/*
	 * Write to the Control Register.
	 */
	XTft_WriteReg(InstancePtr, XTFT_CR_OFFSET, CtrlReg);

}
    1df0:	80 01 00 14 	lwz     r0,20(r1)
    1df4:	83 c1 00 08 	lwz     r30,8(r1)
    1df8:	83 e1 00 0c 	lwz     r31,12(r1)
    1dfc:	38 21 00 10 	addi    r1,r1,16
    1e00:	7c 08 03 a6 	mtlr    r0
    1e04:	4e 80 00 20 	blr
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);

	/*
	 * Read the Control Register.
	 */
	CtrlReg = XTft_ReadReg(InstancePtr, XTFT_CR_OFFSET);
    1e08:	38 80 00 04 	li      r4,4

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1e0c:	91 7f 35 14 	stw     r11,13588(r31)

	/*
	 * Read the Control Register.
	 */
	CtrlReg = XTft_ReadReg(InstancePtr, XTFT_CR_OFFSET);
    1e10:	4b ff ee 81 	bl      c90 <XTft_ReadReg>
	/*
	 * Write to the Control Register.
	 */
	XTft_WriteReg(InstancePtr, XTFT_CR_OFFSET, CtrlReg);

}
    1e14:	80 01 00 14 	lwz     r0,20(r1)
	CtrlReg &= (~XTFT_CR_TDE_MASK);

	/*
	 * Write to the Control Register.
	 */
	XTft_WriteReg(InstancePtr, XTFT_CR_OFFSET, CtrlReg);
    1e18:	54 65 00 3c 	rlwinm  r5,r3,0,0,30

}
    1e1c:	83 e1 00 0c 	lwz     r31,12(r1)
	CtrlReg &= (~XTFT_CR_TDE_MASK);

	/*
	 * Write to the Control Register.
	 */
	XTft_WriteReg(InstancePtr, XTFT_CR_OFFSET, CtrlReg);
    1e20:	7f c3 f3 78 	mr      r3,r30
    1e24:	38 80 00 04 	li      r4,4

}
    1e28:	7c 08 03 a6 	mtlr    r0
    1e2c:	83 c1 00 08 	lwz     r30,8(r1)
    1e30:	38 21 00 10 	addi    r1,r1,16
	CtrlReg &= (~XTFT_CR_TDE_MASK);

	/*
	 * Write to the Control Register.
	 */
	XTft_WriteReg(InstancePtr, XTFT_CR_OFFSET, CtrlReg);
    1e34:	4b ff fa 84 	b       18b8 <XTft_WriteReg>
	u32 CtrlReg;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1e38:	3c 60 00 00 	lis     r3,0
    1e3c:	38 63 2f 1c 	addi    r3,r3,12060
    1e40:	48 00 0d a1 	bl      2be0 <Xil_Assert>
    1e44:	38 00 00 01 	li      r0,1
    1e48:	3d 20 00 00 	lis     r9,0
    1e4c:	90 09 35 14 	stw     r0,13588(r9)
    1e50:	4b ff ff a0 	b       1df0 <XTft_DisableDisplay+0x58>

00001e54 <XTft_EnableDisplay>:
*
* @note		None.
*
****************************************************************************/
void XTft_EnableDisplay(XTft* InstancePtr)
{
    1e54:	94 21 ff f0 	stwu    r1,-16(r1)
    1e58:	7c 08 02 a6 	mflr    r0

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1e5c:	3d 20 11 11 	lis     r9,4369
	u32 CtrlReg;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1e60:	38 80 02 5c 	li      r4,604
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1e64:	61 29 11 11 	ori     r9,r9,4369
	u32 CtrlReg;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1e68:	39 60 00 00 	li      r11,0
*
* @note		None.
*
****************************************************************************/
void XTft_EnableDisplay(XTft* InstancePtr)
{
    1e6c:	93 c1 00 08 	stw     r30,8(r1)
	u32 CtrlReg;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1e70:	7c 7e 1b 79 	mr.     r30,r3
*
* @note		None.
*
****************************************************************************/
void XTft_EnableDisplay(XTft* InstancePtr)
{
    1e74:	93 e1 00 0c 	stw     r31,12(r1)
	u32 CtrlReg;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1e78:	3f e0 00 00 	lis     r31,0
*
* @note		None.
*
****************************************************************************/
void XTft_EnableDisplay(XTft* InstancePtr)
{
    1e7c:	90 01 00 14 	stw     r0,20(r1)
	u32 CtrlReg;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1e80:	41 82 00 74 	beq-    1ef4 <XTft_EnableDisplay+0xa0>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1e84:	80 1e 00 14 	lwz     r0,20(r30)
    1e88:	38 80 02 5d 	li      r4,605
	u32 CtrlReg;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1e8c:	91 7f 35 14 	stw     r11,13588(r31)
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1e90:	7f 80 48 00 	cmpw    cr7,r0,r9
    1e94:	41 9e 00 30 	beq-    cr7,1ec4 <XTft_EnableDisplay+0x70>
    1e98:	3c 60 00 00 	lis     r3,0
    1e9c:	38 63 2f 1c 	addi    r3,r3,12060
    1ea0:	48 00 0d 41 	bl      2be0 <Xil_Assert>
    1ea4:	38 00 00 01 	li      r0,1
    1ea8:	90 1f 35 14 	stw     r0,13588(r31)
	/*
	 * Write to the Control Register.
	 */
	XTft_WriteReg(InstancePtr, XTFT_CR_OFFSET, CtrlReg);

}
    1eac:	80 01 00 14 	lwz     r0,20(r1)
    1eb0:	83 c1 00 08 	lwz     r30,8(r1)
    1eb4:	83 e1 00 0c 	lwz     r31,12(r1)
    1eb8:	38 21 00 10 	addi    r1,r1,16
    1ebc:	7c 08 03 a6 	mtlr    r0
    1ec0:	4e 80 00 20 	blr
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);

	/*
	 * Read the Control Register.
	 */
	CtrlReg = XTft_ReadReg(InstancePtr, XTFT_CR_OFFSET);
    1ec4:	38 80 00 04 	li      r4,4

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    1ec8:	91 7f 35 14 	stw     r11,13588(r31)

	/*
	 * Read the Control Register.
	 */
	CtrlReg = XTft_ReadReg(InstancePtr, XTFT_CR_OFFSET);
    1ecc:	4b ff ed c5 	bl      c90 <XTft_ReadReg>
	/*
	 * Write to the Control Register.
	 */
	XTft_WriteReg(InstancePtr, XTFT_CR_OFFSET, CtrlReg);

}
    1ed0:	80 01 00 14 	lwz     r0,20(r1)
	CtrlReg |= XTFT_CR_TDE_MASK;

	/*
	 * Write to the Control Register.
	 */
	XTft_WriteReg(InstancePtr, XTFT_CR_OFFSET, CtrlReg);
    1ed4:	60 65 00 01 	ori     r5,r3,1

}
    1ed8:	83 e1 00 0c 	lwz     r31,12(r1)
	CtrlReg |= XTFT_CR_TDE_MASK;

	/*
	 * Write to the Control Register.
	 */
	XTft_WriteReg(InstancePtr, XTFT_CR_OFFSET, CtrlReg);
    1edc:	7f c3 f3 78 	mr      r3,r30
    1ee0:	38 80 00 04 	li      r4,4

}
    1ee4:	7c 08 03 a6 	mtlr    r0
    1ee8:	83 c1 00 08 	lwz     r30,8(r1)
    1eec:	38 21 00 10 	addi    r1,r1,16
	CtrlReg |= XTFT_CR_TDE_MASK;

	/*
	 * Write to the Control Register.
	 */
	XTft_WriteReg(InstancePtr, XTFT_CR_OFFSET, CtrlReg);
    1ef0:	4b ff f9 c8 	b       18b8 <XTft_WriteReg>
	u32 CtrlReg;

	/*
	 * Assert validates the input arguments.
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    1ef4:	3c 60 00 00 	lis     r3,0
    1ef8:	38 63 2f 1c 	addi    r3,r3,12060
    1efc:	48 00 0c e5 	bl      2be0 <Xil_Assert>
    1f00:	38 00 00 01 	li      r0,1
    1f04:	3d 20 00 00 	lis     r9,0
    1f08:	90 09 35 14 	stw     r0,13588(r9)
    1f0c:	4b ff ff a0 	b       1eac <XTft_EnableDisplay+0x58>

00001f10 <XTft_LookupConfig>:
	 * Based on the number of instances of tft defined, compare
	 * the given Device ID with the ID of each instance and get
	 * the configptr of the matched instance.
	 */
	for (Index=0; Index < XPAR_XTFT_NUM_INSTANCES; Index++) {
		if (XTft_ConfigTable[Index].DeviceId == DeviceId) {
    1f10:	3d 20 00 00 	lis     r9,0
    1f14:	a0 09 33 bc 	lhz     r0,13244(r9)
    1f18:	39 29 33 bc 	addi    r9,r9,13244
    1f1c:	7f 80 18 00 	cmpw    cr7,r0,r3
    1f20:	41 9e 00 08 	beq-    cr7,1f28 <XTft_LookupConfig+0x18>
    1f24:	39 20 00 00 	li      r9,0
			CfgPtr = &XTft_ConfigTable[Index];
		}
	}

	return CfgPtr;
}
    1f28:	7d 23 4b 78 	mr      r3,r9
    1f2c:	4e 80 00 20 	blr

00001f30 <XIo_DcrIndirectAddrReadReg>:
*   and enabled after the DCR accesses.
*
******************************************************************************/
inline void XIo_DcrIndirectAddrReadReg(u32 DcrBase, u32 DcrRegister, u32 *rVal)
{
    unsigned int oldMSR = mfmsr();
    1f30:	7d 60 00 a6 	mfmsr   r11
    mtmsr(oldMSR & XDCR_DISABLE_EXCEPTIONS);
    1f34:	3c 00 ff fd 	lis     r0,-3
    1f38:	60 00 76 ff 	ori     r0,r0,30463
    1f3c:	7d 60 00 38 	and     r0,r11,r0
    1f40:	7c 00 01 24 	mtmsr   r0

    switch (DcrBase) {
    1f44:	2f 83 01 00 	cmpwi   cr7,r3,256
    1f48:	41 9e 00 4c 	beq-    cr7,1f94 <XIo_DcrIndirectAddrReadReg+0x64>
    1f4c:	2b 83 01 00 	cmplwi  cr7,r3,256
    1f50:	40 9d 00 28 	ble-    cr7,1f78 <XIo_DcrIndirectAddrReadReg+0x48>
    1f54:	2f 83 02 00 	cmpwi   cr7,r3,512
    1f58:	41 9e 00 68 	beq-    cr7,1fc0 <XIo_DcrIndirectAddrReadReg+0x90>
    1f5c:	2f 83 03 00 	cmpwi   cr7,r3,768
    1f60:	41 9e 00 4c 	beq-    cr7,1fac <XIo_DcrIndirectAddrReadReg+0x7c>
    case XDCR_3_BASEADDR:
        XIo_mDcrWriteReg(XDCR_3_BASEADDR | XDCR_IDA_ADDR, XDCR_3_BASEADDR | DcrRegister);
        *rVal = XIo_mDcrReadReg(XDCR_3_BASEADDR | XDCR_IDA_ACC);
        break;
    default:
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
    1f64:	7c 80 03 86 	.long 0x7c800386
        *rVal = XIo_mDcrReadReg(XDCR_0_BASEADDR | XDCR_IDA_ACC);
    1f68:	7c 01 02 86 	.long 0x7c010286
    1f6c:	90 05 00 00 	stw     r0,0(r5)
        break;
    }

    mtmsr(oldMSR);
    1f70:	7d 60 01 24 	mtmsr   r11
    return;
}
    1f74:	4e 80 00 20 	blr
inline void XIo_DcrIndirectAddrReadReg(u32 DcrBase, u32 DcrRegister, u32 *rVal)
{
    unsigned int oldMSR = mfmsr();
    mtmsr(oldMSR & XDCR_DISABLE_EXCEPTIONS);

    switch (DcrBase) {
    1f78:	2f 83 00 00 	cmpwi   cr7,r3,0
    1f7c:	40 be ff e8 	bne-    cr7,1f64 <XIo_DcrIndirectAddrReadReg+0x34>
    case XDCR_0_BASEADDR:
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
    1f80:	7c 80 03 86 	.long 0x7c800386
        *rVal = XIo_mDcrReadReg(XDCR_0_BASEADDR | XDCR_IDA_ACC);
    1f84:	7c 01 02 86 	.long 0x7c010286
    1f88:	90 05 00 00 	stw     r0,0(r5)
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
        *rVal = XIo_mDcrReadReg(XDCR_0_BASEADDR | XDCR_IDA_ACC);
        break;
    }

    mtmsr(oldMSR);
    1f8c:	7d 60 01 24 	mtmsr   r11
    return;
}
    1f90:	4e 80 00 20 	blr
    case XDCR_0_BASEADDR:
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
        *rVal = XIo_mDcrReadReg(XDCR_0_BASEADDR | XDCR_IDA_ACC);
        break;
    case XDCR_1_BASEADDR:
        XIo_mDcrWriteReg(XDCR_1_BASEADDR | XDCR_IDA_ADDR, XDCR_1_BASEADDR | DcrRegister);
    1f94:	60 80 01 00 	ori     r0,r4,256
    1f98:	7c 00 43 86 	.long 0x7c004386
        *rVal = XIo_mDcrReadReg(XDCR_1_BASEADDR | XDCR_IDA_ACC);
    1f9c:	7d 21 42 86 	.long 0x7d214286
    1fa0:	91 25 00 00 	stw     r9,0(r5)
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
        *rVal = XIo_mDcrReadReg(XDCR_0_BASEADDR | XDCR_IDA_ACC);
        break;
    }

    mtmsr(oldMSR);
    1fa4:	7d 60 01 24 	mtmsr   r11
    return;
}
    1fa8:	4e 80 00 20 	blr
    case XDCR_2_BASEADDR:
        XIo_mDcrWriteReg(XDCR_2_BASEADDR | XDCR_IDA_ADDR, XDCR_2_BASEADDR | DcrRegister);
        *rVal = XIo_mDcrReadReg(XDCR_2_BASEADDR | XDCR_IDA_ACC);
        break;
    case XDCR_3_BASEADDR:
        XIo_mDcrWriteReg(XDCR_3_BASEADDR | XDCR_IDA_ADDR, XDCR_3_BASEADDR | DcrRegister);
    1fac:	60 80 03 00 	ori     r0,r4,768
    1fb0:	7c 00 c3 86 	.long 0x7c00c386
        *rVal = XIo_mDcrReadReg(XDCR_3_BASEADDR | XDCR_IDA_ACC);
    1fb4:	7d 21 c2 86 	.long 0x7d21c286
    1fb8:	91 25 00 00 	stw     r9,0(r5)
    1fbc:	4b ff ff b4 	b       1f70 <XIo_DcrIndirectAddrReadReg+0x40>
    case XDCR_1_BASEADDR:
        XIo_mDcrWriteReg(XDCR_1_BASEADDR | XDCR_IDA_ADDR, XDCR_1_BASEADDR | DcrRegister);
        *rVal = XIo_mDcrReadReg(XDCR_1_BASEADDR | XDCR_IDA_ACC);
        break;
    case XDCR_2_BASEADDR:
        XIo_mDcrWriteReg(XDCR_2_BASEADDR | XDCR_IDA_ADDR, XDCR_2_BASEADDR | DcrRegister);
    1fc0:	60 80 02 00 	ori     r0,r4,512
    1fc4:	7c 00 83 86 	.long 0x7c008386
        *rVal = XIo_mDcrReadReg(XDCR_2_BASEADDR | XDCR_IDA_ACC);
    1fc8:	7d 21 82 86 	.long 0x7d218286
    1fcc:	91 25 00 00 	stw     r9,0(r5)
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
        *rVal = XIo_mDcrReadReg(XDCR_0_BASEADDR | XDCR_IDA_ACC);
        break;
    }

    mtmsr(oldMSR);
    1fd0:	7d 60 01 24 	mtmsr   r11
    return;
}
    1fd4:	4e 80 00 20 	blr

00001fd8 <XIo_DcrIndirectAddrWriteReg>:
*   and enabled after the DCR accesses.
*
******************************************************************************/
inline void XIo_DcrIndirectAddrWriteReg(u32 DcrBase, u32 DcrRegister, u32 Data)
{
    unsigned int oldMSR = mfmsr();
    1fd8:	7d 20 00 a6 	mfmsr   r9
    mtmsr(oldMSR & XDCR_DISABLE_EXCEPTIONS);
    1fdc:	3c 00 ff fd 	lis     r0,-3
    1fe0:	60 00 76 ff 	ori     r0,r0,30463
    1fe4:	7d 20 00 38 	and     r0,r9,r0
    1fe8:	7c 00 01 24 	mtmsr   r0

    switch (DcrBase)
    1fec:	2f 83 01 00 	cmpwi   cr7,r3,256
    1ff0:	41 9e 00 44 	beq-    cr7,2034 <XIo_DcrIndirectAddrWriteReg+0x5c>
    1ff4:	2b 83 01 00 	cmplwi  cr7,r3,256
    1ff8:	40 9d 00 24 	ble-    cr7,201c <XIo_DcrIndirectAddrWriteReg+0x44>
    1ffc:	2f 83 02 00 	cmpwi   cr7,r3,512
    2000:	41 9e 00 58 	beq-    cr7,2058 <XIo_DcrIndirectAddrWriteReg+0x80>
    2004:	2f 83 03 00 	cmpwi   cr7,r3,768
    2008:	41 9e 00 40 	beq-    cr7,2048 <XIo_DcrIndirectAddrWriteReg+0x70>
    case XDCR_3_BASEADDR:
        XIo_mDcrWriteReg(XDCR_3_BASEADDR | XDCR_IDA_ADDR, XDCR_3_BASEADDR | DcrRegister);
        XIo_mDcrWriteReg(XDCR_3_BASEADDR | XDCR_IDA_ACC, Data);
        break;
    default:
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
    200c:	7c 80 03 86 	.long 0x7c800386
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ACC, Data);
    2010:	7c a1 03 86 	.long 0x7ca10386
        break;
    }
    mtmsr(oldMSR);
    2014:	7d 20 01 24 	mtmsr   r9
    return;
}
    2018:	4e 80 00 20 	blr
inline void XIo_DcrIndirectAddrWriteReg(u32 DcrBase, u32 DcrRegister, u32 Data)
{
    unsigned int oldMSR = mfmsr();
    mtmsr(oldMSR & XDCR_DISABLE_EXCEPTIONS);

    switch (DcrBase)
    201c:	2f 83 00 00 	cmpwi   cr7,r3,0
    2020:	40 be ff ec 	bne-    cr7,200c <XIo_DcrIndirectAddrWriteReg+0x34>
    {
    case XDCR_0_BASEADDR:
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
    2024:	7c 80 03 86 	.long 0x7c800386
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ACC, Data);
    2028:	7c a1 03 86 	.long 0x7ca10386
    default:
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ACC, Data);
        break;
    }
    mtmsr(oldMSR);
    202c:	7d 20 01 24 	mtmsr   r9
    return;
}
    2030:	4e 80 00 20 	blr
    case XDCR_0_BASEADDR:
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ACC, Data);
        break;
    case XDCR_1_BASEADDR:
        XIo_mDcrWriteReg(XDCR_1_BASEADDR | XDCR_IDA_ADDR, XDCR_1_BASEADDR | DcrRegister);
    2034:	60 80 01 00 	ori     r0,r4,256
    2038:	7c 00 43 86 	.long 0x7c004386
        XIo_mDcrWriteReg(XDCR_1_BASEADDR | XDCR_IDA_ACC, Data);
    203c:	7c a1 43 86 	.long 0x7ca14386
    default:
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ACC, Data);
        break;
    }
    mtmsr(oldMSR);
    2040:	7d 20 01 24 	mtmsr   r9
    return;
}
    2044:	4e 80 00 20 	blr
    case XDCR_2_BASEADDR:
        XIo_mDcrWriteReg(XDCR_2_BASEADDR | XDCR_IDA_ADDR, XDCR_2_BASEADDR | DcrRegister);
        XIo_mDcrWriteReg(XDCR_2_BASEADDR | XDCR_IDA_ACC, Data);
        break;
    case XDCR_3_BASEADDR:
        XIo_mDcrWriteReg(XDCR_3_BASEADDR | XDCR_IDA_ADDR, XDCR_3_BASEADDR | DcrRegister);
    2048:	60 80 03 00 	ori     r0,r4,768
    204c:	7c 00 c3 86 	.long 0x7c00c386
        XIo_mDcrWriteReg(XDCR_3_BASEADDR | XDCR_IDA_ACC, Data);
    2050:	7c a1 c3 86 	.long 0x7ca1c386
    2054:	4b ff ff c0 	b       2014 <XIo_DcrIndirectAddrWriteReg+0x3c>
    case XDCR_1_BASEADDR:
        XIo_mDcrWriteReg(XDCR_1_BASEADDR | XDCR_IDA_ADDR, XDCR_1_BASEADDR | DcrRegister);
        XIo_mDcrWriteReg(XDCR_1_BASEADDR | XDCR_IDA_ACC, Data);
        break;
    case XDCR_2_BASEADDR:
        XIo_mDcrWriteReg(XDCR_2_BASEADDR | XDCR_IDA_ADDR, XDCR_2_BASEADDR | DcrRegister);
    2058:	60 80 02 00 	ori     r0,r4,512
    205c:	7c 00 83 86 	.long 0x7c008386
        XIo_mDcrWriteReg(XDCR_2_BASEADDR | XDCR_IDA_ACC, Data);
    2060:	7c a1 83 86 	.long 0x7ca18386
    default:
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ACC, Data);
        break;
    }
    mtmsr(oldMSR);
    2064:	7d 20 01 24 	mtmsr   r9
    return;
}
    2068:	4e 80 00 20 	blr

0000206c <XIo_DcrLock>:
* Only available in V5 with PPC440.
*
****************************************************************************/
void XIo_DcrLock(u32 DcrBase)
{
    switch (DcrBase) {
    206c:	2f 83 01 00 	cmpwi   cr7,r3,256
    2070:	41 9e 00 4c 	beq-    cr7,20bc <XIo_DcrLock+0x50>
    2074:	2b 83 01 00 	cmplwi  cr7,r3,256
    2078:	40 9d 00 28 	ble-    cr7,20a0 <XIo_DcrLock+0x34>
    207c:	2f 83 02 00 	cmpwi   cr7,r3,512
    2080:	41 9e 00 64 	beq-    cr7,20e4 <XIo_DcrLock+0x78>
    2084:	2f 83 03 00 	cmpwi   cr7,r3,768
    2088:	41 9e 00 48 	beq-    cr7,20d0 <XIo_DcrLock+0x64>
        return;
    case XDCR_3_BASEADDR:
        XIo_mDcrLock(XDCR_3_BASEADDR);
        return;
    default:
        XIo_mDcrLock(XDCR_0_BASEADDR);
    208c:	7c 02 02 86 	.long 0x7c020286
    2090:	64 00 a0 00 	oris    r0,r0,40960
    2094:	54 00 00 3a 	rlwinm  r0,r0,0,0,29
    2098:	7c 02 03 86 	.long 0x7c020386
    209c:	4e 80 00 20 	blr
* Only available in V5 with PPC440.
*
****************************************************************************/
void XIo_DcrLock(u32 DcrBase)
{
    switch (DcrBase) {
    20a0:	2f 83 00 00 	cmpwi   cr7,r3,0
    20a4:	40 be ff e8 	bne-    cr7,208c <XIo_DcrLock+0x20>
    case XDCR_0_BASEADDR:
        XIo_mDcrLock(XDCR_0_BASEADDR);
    20a8:	7c 02 02 86 	.long 0x7c020286
    20ac:	64 00 a0 00 	oris    r0,r0,40960
    20b0:	54 00 00 3a 	rlwinm  r0,r0,0,0,29
    20b4:	7c 02 03 86 	.long 0x7c020386
    20b8:	4e 80 00 20 	blr
        return;
    case XDCR_1_BASEADDR:
        XIo_mDcrLock(XDCR_1_BASEADDR);
    20bc:	7c 02 42 86 	.long 0x7c024286
    20c0:	64 00 a0 00 	oris    r0,r0,40960
    20c4:	54 00 00 3a 	rlwinm  r0,r0,0,0,29
    20c8:	7c 02 43 86 	.long 0x7c024386
    20cc:	4e 80 00 20 	blr
        return;
    case XDCR_2_BASEADDR:
        XIo_mDcrLock(XDCR_2_BASEADDR);
        return;
    case XDCR_3_BASEADDR:
        XIo_mDcrLock(XDCR_3_BASEADDR);
    20d0:	7c 02 c2 86 	.long 0x7c02c286
    20d4:	64 00 a0 00 	oris    r0,r0,40960
    20d8:	54 00 00 3a 	rlwinm  r0,r0,0,0,29
    20dc:	7c 02 c3 86 	.long 0x7c02c386
    20e0:	4e 80 00 20 	blr
        return;
    case XDCR_1_BASEADDR:
        XIo_mDcrLock(XDCR_1_BASEADDR);
        return;
    case XDCR_2_BASEADDR:
        XIo_mDcrLock(XDCR_2_BASEADDR);
    20e4:	7c 02 82 86 	.long 0x7c028286
    20e8:	64 00 a0 00 	oris    r0,r0,40960
    20ec:	54 00 00 3a 	rlwinm  r0,r0,0,0,29
    20f0:	7c 02 83 86 	.long 0x7c028386
    20f4:	4e 80 00 20 	blr

000020f8 <XIo_DcrUnlock>:
* Only available in V5 with PPC440.
*
****************************************************************************/
void XIo_DcrUnlock(u32 DcrBase)
{
    switch (DcrBase) {
    20f8:	2f 83 01 00 	cmpwi   cr7,r3,256
    20fc:	41 9e 00 54 	beq-    cr7,2150 <XIo_DcrUnlock+0x58>
    2100:	2b 83 01 00 	cmplwi  cr7,r3,256
    2104:	40 9d 00 2c 	ble-    cr7,2130 <XIo_DcrUnlock+0x38>
    2108:	2f 83 02 00 	cmpwi   cr7,r3,512
    210c:	41 9e 00 74 	beq-    cr7,2180 <XIo_DcrUnlock+0x88>
    2110:	2f 83 03 00 	cmpwi   cr7,r3,768
    2114:	41 9e 00 54 	beq-    cr7,2168 <XIo_DcrUnlock+0x70>
        return;
    case XDCR_3_BASEADDR:
        XIo_mDcrUnlock(XDCR_3_BASEADDR);
        return;
    default:
        XIo_mDcrUnlock(XDCR_0_BASEADDR);
    2118:	7d 22 02 86 	.long 0x7d220286
    211c:	3c 00 5f ff 	lis     r0,24575
    2120:	60 00 ff fc 	ori     r0,r0,65532
    2124:	7d 29 00 38 	and     r9,r9,r0
    2128:	7d 22 03 86 	.long 0x7d220386
    212c:	4e 80 00 20 	blr
* Only available in V5 with PPC440.
*
****************************************************************************/
void XIo_DcrUnlock(u32 DcrBase)
{
    switch (DcrBase) {
    2130:	2f 83 00 00 	cmpwi   cr7,r3,0
    2134:	40 be ff e4 	bne-    cr7,2118 <XIo_DcrUnlock+0x20>
    case XDCR_0_BASEADDR:
        XIo_mDcrUnlock(XDCR_0_BASEADDR);
    2138:	7d 22 02 86 	.long 0x7d220286
    213c:	3c 00 5f ff 	lis     r0,24575
    2140:	60 00 ff fc 	ori     r0,r0,65532
    2144:	7d 29 00 38 	and     r9,r9,r0
    2148:	7d 22 03 86 	.long 0x7d220386
    214c:	4e 80 00 20 	blr
        return;
    case XDCR_1_BASEADDR:
        XIo_mDcrUnlock(XDCR_1_BASEADDR);
    2150:	7d 22 42 86 	.long 0x7d224286
    2154:	3c 00 5f ff 	lis     r0,24575
    2158:	60 00 ff fc 	ori     r0,r0,65532
    215c:	7d 29 00 38 	and     r9,r9,r0
    2160:	7d 22 43 86 	.long 0x7d224386
    2164:	4e 80 00 20 	blr
        return;
    case XDCR_2_BASEADDR:
        XIo_mDcrUnlock(XDCR_2_BASEADDR);
        return;
    case XDCR_3_BASEADDR:
        XIo_mDcrUnlock(XDCR_3_BASEADDR);
    2168:	7d 22 c2 86 	.long 0x7d22c286
    216c:	3c 00 5f ff 	lis     r0,24575
    2170:	60 00 ff fc 	ori     r0,r0,65532
    2174:	7d 29 00 38 	and     r9,r9,r0
    2178:	7d 22 c3 86 	.long 0x7d22c386
    217c:	4e 80 00 20 	blr
        return;
    case XDCR_1_BASEADDR:
        XIo_mDcrUnlock(XDCR_1_BASEADDR);
        return;
    case XDCR_2_BASEADDR:
        XIo_mDcrUnlock(XDCR_2_BASEADDR);
    2180:	7d 22 82 86 	.long 0x7d228286
    2184:	3c 00 5f ff 	lis     r0,24575
    2188:	60 00 ff fc 	ori     r0,r0,65532
    218c:	7d 29 00 38 	and     r9,r9,r0
    2190:	7d 22 83 86 	.long 0x7d228386
    2194:	4e 80 00 20 	blr

00002198 <XIo_DcrWriteAPUIDAUDIReg>:
*   Care must be taken to not write a '1' to either timeout bit because
*   it will be cleared.
*
****************************************************************************/
inline void XIo_DcrWriteAPUIDAUDIReg(u32 DcrBase, u32 UDInum, u32 Data)
{
    2198:	94 21 ff e8 	stwu    r1,-24(r1)
    219c:	7c 08 02 a6 	mflr    r0
    21a0:	93 81 00 08 	stw     r28,8(r1)
    21a4:	7c 9c 23 78 	mr      r28,r4
    21a8:	93 c1 00 10 	stw     r30,16(r1)
    21ac:	7c be 2b 78 	mr      r30,r5
    21b0:	93 e1 00 14 	stw     r31,20(r1)
    21b4:	7c 7f 1b 78 	mr      r31,r3
    21b8:	93 a1 00 0c 	stw     r29,12(r1)
    21bc:	90 01 00 1c 	stw     r0,28(r1)
    u32 oldMSR = mfmsr();
    21c0:	7f a0 00 a6 	mfmsr   r29
    mtmsr(oldMSR & XDCR_DISABLE_EXCEPTIONS);
    21c4:	3c 00 ff fd 	lis     r0,-3
    21c8:	60 00 76 ff 	ori     r0,r0,30463
    21cc:	7f a0 00 38 	and     r0,r29,r0
    21d0:	7c 00 01 24 	mtmsr   r0
    XIo_DcrLock(DcrBase);
    21d4:	4b ff fe 99 	bl      206c <XIo_DcrLock>

    switch (DcrBase) {
    21d8:	2f 9f 01 00 	cmpwi   cr7,r31,256
    21dc:	41 9e 00 ac 	beq-    cr7,2288 <XIo_DcrWriteAPUIDAUDIReg+0xf0>
    21e0:	2b 9f 01 00 	cmplwi  cr7,r31,256
    21e4:	40 9d 00 58 	ble-    cr7,223c <XIo_DcrWriteAPUIDAUDIReg+0xa4>
    21e8:	2f 9f 02 00 	cmpwi   cr7,r31,512
    21ec:	41 9e 00 fc 	beq-    cr7,22e8 <XIo_DcrWriteAPUIDAUDIReg+0x150>
    21f0:	2f 9f 03 00 	cmpwi   cr7,r31,768
    21f4:	41 9e 00 d8 	beq-    cr7,22cc <XIo_DcrWriteAPUIDAUDIReg+0x134>
        XIo_mDcrWriteReg(XDCR_3_BASEADDR | XDCR_IDA_ADDR, XDCR_3_BASEADDR | XDCR_APU_UDI);
        XIo_mDcrWriteReg(XDCR_3_BASEADDR | XDCR_IDA_ACC, ((UDInum << 6) & 0x000003c0) | 0x00000030);
        XIo_mDcrWriteReg(XDCR_3_BASEADDR | XDCR_IDA_ACC, Data);
        break;
    default:
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | XDCR_APU_UDI);
    21f8:	39 20 00 04 	li      r9,4
    21fc:	7d 20 03 86 	.long 0x7d200386
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ACC, ((UDInum << 6) & 0x000003c0) | 0x00000030);
    2200:	57 80 35 b2 	rlwinm  r0,r28,6,22,25
    2204:	60 00 00 30 	ori     r0,r0,48
    2208:	7c 01 03 86 	.long 0x7c010386
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ACC, Data);
    220c:	7f c1 03 86 	.long 0x7fc10386
        break;
    }

    XIo_DcrUnlock(DcrBase);
    2210:	7f e3 fb 78 	mr      r3,r31
    2214:	4b ff fe e5 	bl      20f8 <XIo_DcrUnlock>
    mtmsr(oldMSR);
    2218:	7f a0 01 24 	mtmsr   r29
    return;
}
    221c:	80 01 00 1c 	lwz     r0,28(r1)
    2220:	83 81 00 08 	lwz     r28,8(r1)
    2224:	83 a1 00 0c 	lwz     r29,12(r1)
    2228:	83 c1 00 10 	lwz     r30,16(r1)
    222c:	7c 08 03 a6 	mtlr    r0
    2230:	83 e1 00 14 	lwz     r31,20(r1)
    2234:	38 21 00 18 	addi    r1,r1,24
    2238:	4e 80 00 20 	blr
{
    u32 oldMSR = mfmsr();
    mtmsr(oldMSR & XDCR_DISABLE_EXCEPTIONS);
    XIo_DcrLock(DcrBase);

    switch (DcrBase) {
    223c:	2f 9f 00 00 	cmpwi   cr7,r31,0
    2240:	40 be ff b8 	bne-    cr7,21f8 <XIo_DcrWriteAPUIDAUDIReg+0x60>
    case XDCR_0_BASEADDR:
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | XDCR_APU_UDI);
    2244:	39 20 00 04 	li      r9,4
    2248:	7d 20 03 86 	.long 0x7d200386
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ACC, ((UDInum << 6) & 0x000003c0) | 0x00000030);
    224c:	57 80 35 b2 	rlwinm  r0,r28,6,22,25
    2250:	60 00 00 30 	ori     r0,r0,48
    2254:	7c 01 03 86 	.long 0x7c010386
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ACC, Data);
    2258:	7f c1 03 86 	.long 0x7fc10386
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ACC, ((UDInum << 6) & 0x000003c0) | 0x00000030);
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ACC, Data);
        break;
    }

    XIo_DcrUnlock(DcrBase);
    225c:	7f e3 fb 78 	mr      r3,r31
    2260:	4b ff fe 99 	bl      20f8 <XIo_DcrUnlock>
    mtmsr(oldMSR);
    2264:	7f a0 01 24 	mtmsr   r29
    return;
}
    2268:	80 01 00 1c 	lwz     r0,28(r1)
    226c:	83 81 00 08 	lwz     r28,8(r1)
    2270:	83 a1 00 0c 	lwz     r29,12(r1)
    2274:	83 c1 00 10 	lwz     r30,16(r1)
    2278:	7c 08 03 a6 	mtlr    r0
    227c:	83 e1 00 14 	lwz     r31,20(r1)
    2280:	38 21 00 18 	addi    r1,r1,24
    2284:	4e 80 00 20 	blr
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | XDCR_APU_UDI);
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ACC, ((UDInum << 6) & 0x000003c0) | 0x00000030);
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ACC, Data);
        break;
    case XDCR_1_BASEADDR:
        XIo_mDcrWriteReg(XDCR_1_BASEADDR | XDCR_IDA_ADDR, XDCR_1_BASEADDR | XDCR_APU_UDI);
    2288:	39 20 01 04 	li      r9,260
    228c:	7d 20 43 86 	.long 0x7d204386
        XIo_mDcrWriteReg(XDCR_1_BASEADDR | XDCR_IDA_ACC, ((UDInum << 6) & 0x000003c0) | 0x00000030);
    2290:	57 80 35 b2 	rlwinm  r0,r28,6,22,25
    2294:	60 00 00 30 	ori     r0,r0,48
    2298:	7c 01 43 86 	.long 0x7c014386
        XIo_mDcrWriteReg(XDCR_1_BASEADDR | XDCR_IDA_ACC, Data);
    229c:	7f c1 43 86 	.long 0x7fc14386
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ACC, ((UDInum << 6) & 0x000003c0) | 0x00000030);
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ACC, Data);
        break;
    }

    XIo_DcrUnlock(DcrBase);
    22a0:	7f e3 fb 78 	mr      r3,r31
    22a4:	4b ff fe 55 	bl      20f8 <XIo_DcrUnlock>
    mtmsr(oldMSR);
    22a8:	7f a0 01 24 	mtmsr   r29
    return;
}
    22ac:	80 01 00 1c 	lwz     r0,28(r1)
    22b0:	83 81 00 08 	lwz     r28,8(r1)
    22b4:	83 a1 00 0c 	lwz     r29,12(r1)
    22b8:	83 c1 00 10 	lwz     r30,16(r1)
    22bc:	7c 08 03 a6 	mtlr    r0
    22c0:	83 e1 00 14 	lwz     r31,20(r1)
    22c4:	38 21 00 18 	addi    r1,r1,24
    22c8:	4e 80 00 20 	blr
        XIo_mDcrWriteReg(XDCR_2_BASEADDR | XDCR_IDA_ADDR, XDCR_2_BASEADDR | XDCR_APU_UDI);
        XIo_mDcrWriteReg(XDCR_2_BASEADDR | XDCR_IDA_ACC, ((UDInum << 6) & 0x000003c0) | 0x00000030);
        XIo_mDcrWriteReg(XDCR_2_BASEADDR | XDCR_IDA_ACC, Data);
        break;
    case XDCR_3_BASEADDR:
        XIo_mDcrWriteReg(XDCR_3_BASEADDR | XDCR_IDA_ADDR, XDCR_3_BASEADDR | XDCR_APU_UDI);
    22cc:	39 20 03 04 	li      r9,772
    22d0:	7d 20 c3 86 	.long 0x7d20c386
        XIo_mDcrWriteReg(XDCR_3_BASEADDR | XDCR_IDA_ACC, ((UDInum << 6) & 0x000003c0) | 0x00000030);
    22d4:	57 80 35 b2 	rlwinm  r0,r28,6,22,25
    22d8:	60 00 00 30 	ori     r0,r0,48
    22dc:	7c 01 c3 86 	.long 0x7c01c386
        XIo_mDcrWriteReg(XDCR_3_BASEADDR | XDCR_IDA_ACC, Data);
    22e0:	7f c1 c3 86 	.long 0x7fc1c386
    22e4:	4b ff ff 2c 	b       2210 <XIo_DcrWriteAPUIDAUDIReg+0x78>
        XIo_mDcrWriteReg(XDCR_1_BASEADDR | XDCR_IDA_ADDR, XDCR_1_BASEADDR | XDCR_APU_UDI);
        XIo_mDcrWriteReg(XDCR_1_BASEADDR | XDCR_IDA_ACC, ((UDInum << 6) & 0x000003c0) | 0x00000030);
        XIo_mDcrWriteReg(XDCR_1_BASEADDR | XDCR_IDA_ACC, Data);
        break;
    case XDCR_2_BASEADDR:
        XIo_mDcrWriteReg(XDCR_2_BASEADDR | XDCR_IDA_ADDR, XDCR_2_BASEADDR | XDCR_APU_UDI);
    22e8:	39 20 02 04 	li      r9,516
    22ec:	7d 20 83 86 	.long 0x7d208386
        XIo_mDcrWriteReg(XDCR_2_BASEADDR | XDCR_IDA_ACC, ((UDInum << 6) & 0x000003c0) | 0x00000030);
    22f0:	57 80 35 b2 	rlwinm  r0,r28,6,22,25
    22f4:	60 00 00 30 	ori     r0,r0,48
    22f8:	7c 01 83 86 	.long 0x7c018386
        XIo_mDcrWriteReg(XDCR_2_BASEADDR | XDCR_IDA_ACC, Data);
    22fc:	7f c1 83 86 	.long 0x7fc18386
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ACC, ((UDInum << 6) & 0x000003c0) | 0x00000030);
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ACC, Data);
        break;
    }

    XIo_DcrUnlock(DcrBase);
    2300:	7f e3 fb 78 	mr      r3,r31
    2304:	4b ff fd f5 	bl      20f8 <XIo_DcrUnlock>
    mtmsr(oldMSR);
    2308:	7f a0 01 24 	mtmsr   r29
    return;
}
    230c:	80 01 00 1c 	lwz     r0,28(r1)
    2310:	83 81 00 08 	lwz     r28,8(r1)
    2314:	83 a1 00 0c 	lwz     r29,12(r1)
    2318:	83 c1 00 10 	lwz     r30,16(r1)
    231c:	7c 08 03 a6 	mtlr    r0
    2320:	83 e1 00 14 	lwz     r31,20(r1)
    2324:	38 21 00 18 	addi    r1,r1,24
    2328:	4e 80 00 20 	blr

0000232c <XIo_DcrReadAPUIDAUDIReg>:
*   Care must be taken to not write a '1' to either timeout bit because
*   it will be cleared.
*
****************************************************************************/
inline u32 XIo_DcrReadAPUIDAUDIReg(u32 DcrBase, u32 UDInum)
{
    232c:	94 21 ff e8 	stwu    r1,-24(r1)
    2330:	7c 08 02 a6 	mflr    r0
    2334:	93 c1 00 10 	stw     r30,16(r1)
    2338:	7c 7e 1b 78 	mr      r30,r3
    233c:	93 e1 00 14 	stw     r31,20(r1)
    2340:	7c 9f 23 78 	mr      r31,r4
    2344:	93 a1 00 0c 	stw     r29,12(r1)
    2348:	90 01 00 1c 	stw     r0,28(r1)
    u32 rVal;
    u32 oldMSR = mfmsr();
    234c:	7f a0 00 a6 	mfmsr   r29
    mtmsr(oldMSR & XDCR_DISABLE_EXCEPTIONS);
    2350:	3c 00 ff fd 	lis     r0,-3
    2354:	60 00 76 ff 	ori     r0,r0,30463
    2358:	7f a0 00 38 	and     r0,r29,r0
    235c:	7c 00 01 24 	mtmsr   r0
    XIo_DcrLock(DcrBase);
    2360:	4b ff fd 0d 	bl      206c <XIo_DcrLock>

    switch(DcrBase) {
    2364:	2f 9e 01 00 	cmpwi   cr7,r30,256
    2368:	41 9e 00 ac 	beq-    cr7,2414 <XIo_DcrReadAPUIDAUDIReg+0xe8>
    236c:	2b 9e 01 00 	cmplwi  cr7,r30,256
    2370:	40 9d 00 58 	ble-    cr7,23c8 <XIo_DcrReadAPUIDAUDIReg+0x9c>
    2374:	2f 9e 02 00 	cmpwi   cr7,r30,512
    2378:	41 9e 00 fc 	beq-    cr7,2474 <XIo_DcrReadAPUIDAUDIReg+0x148>
    237c:	2f 9e 03 00 	cmpwi   cr7,r30,768
    2380:	41 9e 00 d8 	beq-    cr7,2458 <XIo_DcrReadAPUIDAUDIReg+0x12c>
        XIo_mDcrWriteReg(XDCR_3_BASEADDR | XDCR_IDA_ADDR, XDCR_3_BASEADDR | XDCR_APU_UDI);
        XIo_mDcrWriteReg(XDCR_3_BASEADDR | XDCR_IDA_ACC, ((UDInum << 6) & 0x000003c0) | 0x00000030);
        rVal = XIo_mDcrReadReg(XDCR_3_BASEADDR | XDCR_IDA_ACC);
        break;
    default:
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | XDCR_APU_UDI);
    2384:	39 20 00 04 	li      r9,4
    2388:	7d 20 03 86 	.long 0x7d200386
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ACC, ((UDInum << 6) & 0x000003c0) | 0x00000030);
    238c:	57 e0 35 b2 	rlwinm  r0,r31,6,22,25
    2390:	60 00 00 30 	ori     r0,r0,48
    2394:	7c 01 03 86 	.long 0x7c010386
        rVal = XIo_mDcrReadReg(XDCR_0_BASEADDR | XDCR_IDA_ACC);
    2398:	7f e1 02 86 	.long 0x7fe10286
        break;
    }

    XIo_DcrUnlock(DcrBase);
    239c:	7f c3 f3 78 	mr      r3,r30
    23a0:	4b ff fd 59 	bl      20f8 <XIo_DcrUnlock>
    mtmsr(oldMSR);
    23a4:	7f a0 01 24 	mtmsr   r29
    return (rVal);
}
    23a8:	80 01 00 1c 	lwz     r0,28(r1)
    23ac:	7f e3 fb 78 	mr      r3,r31
    23b0:	83 a1 00 0c 	lwz     r29,12(r1)
    23b4:	83 c1 00 10 	lwz     r30,16(r1)
    23b8:	83 e1 00 14 	lwz     r31,20(r1)
    23bc:	7c 08 03 a6 	mtlr    r0
    23c0:	38 21 00 18 	addi    r1,r1,24
    23c4:	4e 80 00 20 	blr
    u32 rVal;
    u32 oldMSR = mfmsr();
    mtmsr(oldMSR & XDCR_DISABLE_EXCEPTIONS);
    XIo_DcrLock(DcrBase);

    switch(DcrBase) {
    23c8:	2f 9e 00 00 	cmpwi   cr7,r30,0
    23cc:	40 be ff b8 	bne-    cr7,2384 <XIo_DcrReadAPUIDAUDIReg+0x58>
    case XDCR_0_BASEADDR:
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | XDCR_APU_UDI);
    23d0:	39 20 00 04 	li      r9,4
    23d4:	7d 20 03 86 	.long 0x7d200386
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ACC, ((UDInum << 6) & 0x000003c0) | 0x00000030);
    23d8:	57 e0 35 b2 	rlwinm  r0,r31,6,22,25
    23dc:	60 00 00 30 	ori     r0,r0,48
    23e0:	7c 01 03 86 	.long 0x7c010386
        rVal = XIo_mDcrReadReg(XDCR_0_BASEADDR | XDCR_IDA_ACC);
    23e4:	7f e1 02 86 	.long 0x7fe10286
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ACC, ((UDInum << 6) & 0x000003c0) | 0x00000030);
        rVal = XIo_mDcrReadReg(XDCR_0_BASEADDR | XDCR_IDA_ACC);
        break;
    }

    XIo_DcrUnlock(DcrBase);
    23e8:	7f c3 f3 78 	mr      r3,r30
    23ec:	4b ff fd 0d 	bl      20f8 <XIo_DcrUnlock>
    mtmsr(oldMSR);
    23f0:	7f a0 01 24 	mtmsr   r29
    return (rVal);
}
    23f4:	80 01 00 1c 	lwz     r0,28(r1)
    23f8:	7f e3 fb 78 	mr      r3,r31
    23fc:	83 a1 00 0c 	lwz     r29,12(r1)
    2400:	83 c1 00 10 	lwz     r30,16(r1)
    2404:	83 e1 00 14 	lwz     r31,20(r1)
    2408:	7c 08 03 a6 	mtlr    r0
    240c:	38 21 00 18 	addi    r1,r1,24
    2410:	4e 80 00 20 	blr
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | XDCR_APU_UDI);
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ACC, ((UDInum << 6) & 0x000003c0) | 0x00000030);
        rVal = XIo_mDcrReadReg(XDCR_0_BASEADDR | XDCR_IDA_ACC);
        break;
    case XDCR_1_BASEADDR:
        XIo_mDcrWriteReg(XDCR_1_BASEADDR | XDCR_IDA_ADDR, XDCR_1_BASEADDR | XDCR_APU_UDI);
    2414:	39 20 01 04 	li      r9,260
    2418:	7d 20 43 86 	.long 0x7d204386
        XIo_mDcrWriteReg(XDCR_1_BASEADDR | XDCR_IDA_ACC, ((UDInum << 6) & 0x000003c0) | 0x00000030);
    241c:	57 e0 35 b2 	rlwinm  r0,r31,6,22,25
    2420:	60 00 00 30 	ori     r0,r0,48
    2424:	7c 01 43 86 	.long 0x7c014386
        rVal = XIo_mDcrReadReg(XDCR_1_BASEADDR | XDCR_IDA_ACC);
    2428:	7f e1 42 86 	.long 0x7fe14286
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ACC, ((UDInum << 6) & 0x000003c0) | 0x00000030);
        rVal = XIo_mDcrReadReg(XDCR_0_BASEADDR | XDCR_IDA_ACC);
        break;
    }

    XIo_DcrUnlock(DcrBase);
    242c:	7f c3 f3 78 	mr      r3,r30
    2430:	4b ff fc c9 	bl      20f8 <XIo_DcrUnlock>
    mtmsr(oldMSR);
    2434:	7f a0 01 24 	mtmsr   r29
    return (rVal);
}
    2438:	80 01 00 1c 	lwz     r0,28(r1)
    243c:	7f e3 fb 78 	mr      r3,r31
    2440:	83 a1 00 0c 	lwz     r29,12(r1)
    2444:	83 c1 00 10 	lwz     r30,16(r1)
    2448:	83 e1 00 14 	lwz     r31,20(r1)
    244c:	7c 08 03 a6 	mtlr    r0
    2450:	38 21 00 18 	addi    r1,r1,24
    2454:	4e 80 00 20 	blr
        XIo_mDcrWriteReg(XDCR_2_BASEADDR | XDCR_IDA_ADDR, XDCR_2_BASEADDR | XDCR_APU_UDI);
        XIo_mDcrWriteReg(XDCR_2_BASEADDR | XDCR_IDA_ACC, ((UDInum << 6) & 0x000003c0) | 0x00000030);
        rVal = XIo_mDcrReadReg(XDCR_2_BASEADDR | XDCR_IDA_ACC);
        break;
    case XDCR_3_BASEADDR:
        XIo_mDcrWriteReg(XDCR_3_BASEADDR | XDCR_IDA_ADDR, XDCR_3_BASEADDR | XDCR_APU_UDI);
    2458:	39 20 03 04 	li      r9,772
    245c:	7d 20 c3 86 	.long 0x7d20c386
        XIo_mDcrWriteReg(XDCR_3_BASEADDR | XDCR_IDA_ACC, ((UDInum << 6) & 0x000003c0) | 0x00000030);
    2460:	57 e0 35 b2 	rlwinm  r0,r31,6,22,25
    2464:	60 00 00 30 	ori     r0,r0,48
    2468:	7c 01 c3 86 	.long 0x7c01c386
        rVal = XIo_mDcrReadReg(XDCR_3_BASEADDR | XDCR_IDA_ACC);
    246c:	7f e1 c2 86 	.long 0x7fe1c286
    2470:	4b ff ff 2c 	b       239c <XIo_DcrReadAPUIDAUDIReg+0x70>
        XIo_mDcrWriteReg(XDCR_1_BASEADDR | XDCR_IDA_ADDR, XDCR_1_BASEADDR | XDCR_APU_UDI);
        XIo_mDcrWriteReg(XDCR_1_BASEADDR | XDCR_IDA_ACC, ((UDInum << 6) & 0x000003c0) | 0x00000030);
        rVal = XIo_mDcrReadReg(XDCR_1_BASEADDR | XDCR_IDA_ACC);
        break;
    case XDCR_2_BASEADDR:
        XIo_mDcrWriteReg(XDCR_2_BASEADDR | XDCR_IDA_ADDR, XDCR_2_BASEADDR | XDCR_APU_UDI);
    2474:	39 20 02 04 	li      r9,516
    2478:	7d 20 83 86 	.long 0x7d208386
        XIo_mDcrWriteReg(XDCR_2_BASEADDR | XDCR_IDA_ACC, ((UDInum << 6) & 0x000003c0) | 0x00000030);
    247c:	57 e0 35 b2 	rlwinm  r0,r31,6,22,25
    2480:	60 00 00 30 	ori     r0,r0,48
    2484:	7c 01 83 86 	.long 0x7c018386
        rVal = XIo_mDcrReadReg(XDCR_2_BASEADDR | XDCR_IDA_ACC);
    2488:	7f e1 82 86 	.long 0x7fe18286
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ACC, ((UDInum << 6) & 0x000003c0) | 0x00000030);
        rVal = XIo_mDcrReadReg(XDCR_0_BASEADDR | XDCR_IDA_ACC);
        break;
    }

    XIo_DcrUnlock(DcrBase);
    248c:	7f c3 f3 78 	mr      r3,r30
    2490:	4b ff fc 69 	bl      20f8 <XIo_DcrUnlock>
    mtmsr(oldMSR);
    2494:	7f a0 01 24 	mtmsr   r29
    return (rVal);
}
    2498:	80 01 00 1c 	lwz     r0,28(r1)
    249c:	7f e3 fb 78 	mr      r3,r31
    24a0:	83 a1 00 0c 	lwz     r29,12(r1)
    24a4:	83 c1 00 10 	lwz     r30,16(r1)
    24a8:	83 e1 00 14 	lwz     r31,20(r1)
    24ac:	7c 08 03 a6 	mtlr    r0
    24b0:	38 21 00 18 	addi    r1,r1,24
    24b4:	4e 80 00 20 	blr

000024b8 <XIo_DcrWriteAPUUDIReg>:
*   - release DCR bus lock
*   - restore MSR
*
*******************************************************************************/
inline void XIo_DcrWriteAPUUDIReg(u32 DcrBase, u32 UDInum, u32 Data)
{
    24b8:	94 21 ff e8 	stwu    r1,-24(r1)
    24bc:	7c 08 02 a6 	mflr    r0
    24c0:	93 81 00 08 	stw     r28,8(r1)
    24c4:	7c 9c 23 78 	mr      r28,r4
    24c8:	93 c1 00 10 	stw     r30,16(r1)
    24cc:	7c be 2b 78 	mr      r30,r5
    24d0:	93 e1 00 14 	stw     r31,20(r1)
    24d4:	7c 7f 1b 78 	mr      r31,r3
    24d8:	93 a1 00 0c 	stw     r29,12(r1)
    24dc:	90 01 00 1c 	stw     r0,28(r1)
    u32 oldMSR = mfmsr();
    24e0:	7f a0 00 a6 	mfmsr   r29
    mtmsr(oldMSR & XDCR_DISABLE_EXCEPTIONS);
    24e4:	3c 00 ff fd 	lis     r0,-3
    24e8:	60 00 76 ff 	ori     r0,r0,30463
    24ec:	7f a0 00 38 	and     r0,r29,r0
    24f0:	7c 00 01 24 	mtmsr   r0
    XIo_DcrLock(DcrBase);
    24f4:	4b ff fb 79 	bl      206c <XIo_DcrLock>

    switch (DcrBase) {
    24f8:	2f 9f 01 00 	cmpwi   cr7,r31,256
    24fc:	41 9e 00 9c 	beq-    cr7,2598 <XIo_DcrWriteAPUUDIReg+0xe0>
    2500:	2b 9f 01 00 	cmplwi  cr7,r31,256
    2504:	40 9d 00 50 	ble-    cr7,2554 <XIo_DcrWriteAPUUDIReg+0x9c>
    2508:	2f 9f 02 00 	cmpwi   cr7,r31,512
    250c:	41 9e 00 dc 	beq-    cr7,25e8 <XIo_DcrWriteAPUUDIReg+0x130>
    2510:	2f 9f 03 00 	cmpwi   cr7,r31,768
    2514:	41 9e 00 c0 	beq-    cr7,25d4 <XIo_DcrWriteAPUUDIReg+0x11c>
    case XDCR_3_BASEADDR:
        mtdcr(XDCR_3_BASEADDR | XDCR_APU_UDI, (((UDInum) << 6) & 0x000003c0) | 0x00000030);
        mtdcr(XDCR_3_BASEADDR | XDCR_APU_UDI, (Data));
        break;
    default:
        mtdcr(XDCR_0_BASEADDR | XDCR_APU_UDI, (((UDInum) << 6) & 0x000003c0) | 0x00000030);
    2518:	57 80 35 b2 	rlwinm  r0,r28,6,22,25
    251c:	60 00 00 30 	ori     r0,r0,48
    2520:	7c 04 03 86 	.long 0x7c040386
        mtdcr(XDCR_0_BASEADDR | XDCR_APU_UDI, (Data));
    2524:	7f c4 03 86 	.long 0x7fc40386
        break;
    }

    XIo_DcrUnlock(DcrBase);
    2528:	7f e3 fb 78 	mr      r3,r31
    252c:	4b ff fb cd 	bl      20f8 <XIo_DcrUnlock>
    mtmsr(oldMSR);
    2530:	7f a0 01 24 	mtmsr   r29
}
    2534:	80 01 00 1c 	lwz     r0,28(r1)
    2538:	83 81 00 08 	lwz     r28,8(r1)
    253c:	83 a1 00 0c 	lwz     r29,12(r1)
    2540:	83 c1 00 10 	lwz     r30,16(r1)
    2544:	7c 08 03 a6 	mtlr    r0
    2548:	83 e1 00 14 	lwz     r31,20(r1)
    254c:	38 21 00 18 	addi    r1,r1,24
    2550:	4e 80 00 20 	blr
{
    u32 oldMSR = mfmsr();
    mtmsr(oldMSR & XDCR_DISABLE_EXCEPTIONS);
    XIo_DcrLock(DcrBase);

    switch (DcrBase) {
    2554:	2f 9f 00 00 	cmpwi   cr7,r31,0
    2558:	40 be ff c0 	bne-    cr7,2518 <XIo_DcrWriteAPUUDIReg+0x60>
    case XDCR_0_BASEADDR:
        mtdcr(XDCR_0_BASEADDR | XDCR_APU_UDI, (((UDInum) << 6) & 0x000003c0) | 0x00000030);
    255c:	57 80 35 b2 	rlwinm  r0,r28,6,22,25
    2560:	60 00 00 30 	ori     r0,r0,48
    2564:	7c 04 03 86 	.long 0x7c040386
        mtdcr(XDCR_0_BASEADDR | XDCR_APU_UDI, (Data));
    2568:	7f c4 03 86 	.long 0x7fc40386
        mtdcr(XDCR_0_BASEADDR | XDCR_APU_UDI, (((UDInum) << 6) & 0x000003c0) | 0x00000030);
        mtdcr(XDCR_0_BASEADDR | XDCR_APU_UDI, (Data));
        break;
    }

    XIo_DcrUnlock(DcrBase);
    256c:	7f e3 fb 78 	mr      r3,r31
    2570:	4b ff fb 89 	bl      20f8 <XIo_DcrUnlock>
    mtmsr(oldMSR);
    2574:	7f a0 01 24 	mtmsr   r29
}
    2578:	80 01 00 1c 	lwz     r0,28(r1)
    257c:	83 81 00 08 	lwz     r28,8(r1)
    2580:	83 a1 00 0c 	lwz     r29,12(r1)
    2584:	83 c1 00 10 	lwz     r30,16(r1)
    2588:	7c 08 03 a6 	mtlr    r0
    258c:	83 e1 00 14 	lwz     r31,20(r1)
    2590:	38 21 00 18 	addi    r1,r1,24
    2594:	4e 80 00 20 	blr
    case XDCR_0_BASEADDR:
        mtdcr(XDCR_0_BASEADDR | XDCR_APU_UDI, (((UDInum) << 6) & 0x000003c0) | 0x00000030);
        mtdcr(XDCR_0_BASEADDR | XDCR_APU_UDI, (Data));
        break;
    case XDCR_1_BASEADDR:
        mtdcr(XDCR_1_BASEADDR | XDCR_APU_UDI, (((UDInum) << 6) & 0x000003c0) | 0x00000030);
    2598:	57 80 35 b2 	rlwinm  r0,r28,6,22,25
    259c:	60 00 00 30 	ori     r0,r0,48
    25a0:	7c 04 43 86 	.long 0x7c044386
        mtdcr(XDCR_1_BASEADDR | XDCR_APU_UDI, (Data));
    25a4:	7f c4 43 86 	.long 0x7fc44386
        mtdcr(XDCR_0_BASEADDR | XDCR_APU_UDI, (((UDInum) << 6) & 0x000003c0) | 0x00000030);
        mtdcr(XDCR_0_BASEADDR | XDCR_APU_UDI, (Data));
        break;
    }

    XIo_DcrUnlock(DcrBase);
    25a8:	7f e3 fb 78 	mr      r3,r31
    25ac:	4b ff fb 4d 	bl      20f8 <XIo_DcrUnlock>
    mtmsr(oldMSR);
    25b0:	7f a0 01 24 	mtmsr   r29
}
    25b4:	80 01 00 1c 	lwz     r0,28(r1)
    25b8:	83 81 00 08 	lwz     r28,8(r1)
    25bc:	83 a1 00 0c 	lwz     r29,12(r1)
    25c0:	83 c1 00 10 	lwz     r30,16(r1)
    25c4:	7c 08 03 a6 	mtlr    r0
    25c8:	83 e1 00 14 	lwz     r31,20(r1)
    25cc:	38 21 00 18 	addi    r1,r1,24
    25d0:	4e 80 00 20 	blr
    case XDCR_2_BASEADDR:
        mtdcr(XDCR_2_BASEADDR | XDCR_APU_UDI, (((UDInum) << 6) & 0x000003c0) | 0x00000030);
        mtdcr(XDCR_2_BASEADDR | XDCR_APU_UDI, (Data));
        break;
    case XDCR_3_BASEADDR:
        mtdcr(XDCR_3_BASEADDR | XDCR_APU_UDI, (((UDInum) << 6) & 0x000003c0) | 0x00000030);
    25d4:	57 80 35 b2 	rlwinm  r0,r28,6,22,25
    25d8:	60 00 00 30 	ori     r0,r0,48
    25dc:	7c 04 c3 86 	.long 0x7c04c386
        mtdcr(XDCR_3_BASEADDR | XDCR_APU_UDI, (Data));
    25e0:	7f c4 c3 86 	.long 0x7fc4c386
    25e4:	4b ff ff 44 	b       2528 <XIo_DcrWriteAPUUDIReg+0x70>
    case XDCR_1_BASEADDR:
        mtdcr(XDCR_1_BASEADDR | XDCR_APU_UDI, (((UDInum) << 6) & 0x000003c0) | 0x00000030);
        mtdcr(XDCR_1_BASEADDR | XDCR_APU_UDI, (Data));
        break;
    case XDCR_2_BASEADDR:
        mtdcr(XDCR_2_BASEADDR | XDCR_APU_UDI, (((UDInum) << 6) & 0x000003c0) | 0x00000030);
    25e8:	57 80 35 b2 	rlwinm  r0,r28,6,22,25
    25ec:	60 00 00 30 	ori     r0,r0,48
    25f0:	7c 04 83 86 	.long 0x7c048386
        mtdcr(XDCR_2_BASEADDR | XDCR_APU_UDI, (Data));
    25f4:	7f c4 83 86 	.long 0x7fc48386
        mtdcr(XDCR_0_BASEADDR | XDCR_APU_UDI, (((UDInum) << 6) & 0x000003c0) | 0x00000030);
        mtdcr(XDCR_0_BASEADDR | XDCR_APU_UDI, (Data));
        break;
    }

    XIo_DcrUnlock(DcrBase);
    25f8:	7f e3 fb 78 	mr      r3,r31
    25fc:	4b ff fa fd 	bl      20f8 <XIo_DcrUnlock>
    mtmsr(oldMSR);
    2600:	7f a0 01 24 	mtmsr   r29
}
    2604:	80 01 00 1c 	lwz     r0,28(r1)
    2608:	83 81 00 08 	lwz     r28,8(r1)
    260c:	83 a1 00 0c 	lwz     r29,12(r1)
    2610:	83 c1 00 10 	lwz     r30,16(r1)
    2614:	7c 08 03 a6 	mtlr    r0
    2618:	83 e1 00 14 	lwz     r31,20(r1)
    261c:	38 21 00 18 	addi    r1,r1,24
    2620:	4e 80 00 20 	blr

00002624 <XIo_DcrReadAPUUDIReg>:
*   - restore MSR
*   - return value read
*
*******************************************************************************/
inline u32 XIo_DcrReadAPUUDIReg(u32 DcrBase, u32 UDInum)
{
    2624:	94 21 ff e8 	stwu    r1,-24(r1)
    2628:	7c 08 02 a6 	mflr    r0
    262c:	93 c1 00 10 	stw     r30,16(r1)
    2630:	7c 9e 23 78 	mr      r30,r4
    2634:	93 e1 00 14 	stw     r31,20(r1)
    2638:	7c 7f 1b 78 	mr      r31,r3
    263c:	93 a1 00 0c 	stw     r29,12(r1)
    2640:	90 01 00 1c 	stw     r0,28(r1)
    u32 rVal;
    u32 oldMSR = mfmsr();
    2644:	7f a0 00 a6 	mfmsr   r29
    mtmsr(oldMSR & XDCR_DISABLE_EXCEPTIONS);
    2648:	3c 00 ff fd 	lis     r0,-3
    264c:	60 00 76 ff 	ori     r0,r0,30463
    2650:	7f a0 00 38 	and     r0,r29,r0
    2654:	7c 00 01 24 	mtmsr   r0
    XIo_DcrLock(DcrBase);
    2658:	4b ff fa 15 	bl      206c <XIo_DcrLock>

    switch (DcrBase) {
    265c:	2f 9f 01 00 	cmpwi   cr7,r31,256
    2660:	41 9e 00 9c 	beq-    cr7,26fc <XIo_DcrReadAPUUDIReg+0xd8>
    2664:	2b 9f 01 00 	cmplwi  cr7,r31,256
    2668:	40 9d 00 50 	ble-    cr7,26b8 <XIo_DcrReadAPUUDIReg+0x94>
    266c:	2f 9f 02 00 	cmpwi   cr7,r31,512
    2670:	41 9e 00 dc 	beq-    cr7,274c <XIo_DcrReadAPUUDIReg+0x128>
    2674:	2f 9f 03 00 	cmpwi   cr7,r31,768
    2678:	41 9e 00 c0 	beq-    cr7,2738 <XIo_DcrReadAPUUDIReg+0x114>
    case XDCR_3_BASEADDR:
        mtdcr(XDCR_3_BASEADDR | XDCR_APU_UDI, (((UDInum) << 6) & 0x000003c0) | 0x00000030);
        rVal = mfdcr(XDCR_3_BASEADDR | XDCR_APU_UDI);
        break;
    default:
        mtdcr(XDCR_0_BASEADDR | XDCR_APU_UDI, (((UDInum) << 6) & 0x000003c0) | 0x00000030);
    267c:	57 c0 35 b2 	rlwinm  r0,r30,6,22,25
    2680:	60 00 00 30 	ori     r0,r0,48
    2684:	7c 04 03 86 	.long 0x7c040386
        rVal = mfdcr(XDCR_0_BASEADDR | XDCR_APU_UDI);
    2688:	7f c4 02 86 	.long 0x7fc40286
        break;
    }

    XIo_DcrUnlock(DcrBase);
    268c:	7f e3 fb 78 	mr      r3,r31
    2690:	4b ff fa 69 	bl      20f8 <XIo_DcrUnlock>
    mtmsr(oldMSR);
    2694:	7f a0 01 24 	mtmsr   r29
    return (rVal);
}
    2698:	80 01 00 1c 	lwz     r0,28(r1)
    269c:	7f c3 f3 78 	mr      r3,r30
    26a0:	83 a1 00 0c 	lwz     r29,12(r1)
    26a4:	83 c1 00 10 	lwz     r30,16(r1)
    26a8:	83 e1 00 14 	lwz     r31,20(r1)
    26ac:	7c 08 03 a6 	mtlr    r0
    26b0:	38 21 00 18 	addi    r1,r1,24
    26b4:	4e 80 00 20 	blr
    u32 rVal;
    u32 oldMSR = mfmsr();
    mtmsr(oldMSR & XDCR_DISABLE_EXCEPTIONS);
    XIo_DcrLock(DcrBase);

    switch (DcrBase) {
    26b8:	2f 9f 00 00 	cmpwi   cr7,r31,0
    26bc:	40 be ff c0 	bne-    cr7,267c <XIo_DcrReadAPUUDIReg+0x58>
    case XDCR_0_BASEADDR:
        mtdcr(XDCR_0_BASEADDR | XDCR_APU_UDI, (((UDInum) << 6) & 0x000003c0) | 0x00000030);
    26c0:	57 c0 35 b2 	rlwinm  r0,r30,6,22,25
    26c4:	60 00 00 30 	ori     r0,r0,48
    26c8:	7c 04 03 86 	.long 0x7c040386
        rVal = mfdcr(XDCR_0_BASEADDR | XDCR_APU_UDI);
    26cc:	7f c4 02 86 	.long 0x7fc40286
        mtdcr(XDCR_0_BASEADDR | XDCR_APU_UDI, (((UDInum) << 6) & 0x000003c0) | 0x00000030);
        rVal = mfdcr(XDCR_0_BASEADDR | XDCR_APU_UDI);
        break;
    }

    XIo_DcrUnlock(DcrBase);
    26d0:	7f e3 fb 78 	mr      r3,r31
    26d4:	4b ff fa 25 	bl      20f8 <XIo_DcrUnlock>
    mtmsr(oldMSR);
    26d8:	7f a0 01 24 	mtmsr   r29
    return (rVal);
}
    26dc:	80 01 00 1c 	lwz     r0,28(r1)
    26e0:	7f c3 f3 78 	mr      r3,r30
    26e4:	83 a1 00 0c 	lwz     r29,12(r1)
    26e8:	83 c1 00 10 	lwz     r30,16(r1)
    26ec:	83 e1 00 14 	lwz     r31,20(r1)
    26f0:	7c 08 03 a6 	mtlr    r0
    26f4:	38 21 00 18 	addi    r1,r1,24
    26f8:	4e 80 00 20 	blr
    case XDCR_0_BASEADDR:
        mtdcr(XDCR_0_BASEADDR | XDCR_APU_UDI, (((UDInum) << 6) & 0x000003c0) | 0x00000030);
        rVal = mfdcr(XDCR_0_BASEADDR | XDCR_APU_UDI);
        break;
    case XDCR_1_BASEADDR:
        mtdcr(XDCR_1_BASEADDR | XDCR_APU_UDI, (((UDInum) << 6) & 0x000003c0) | 0x00000030);
    26fc:	57 c0 35 b2 	rlwinm  r0,r30,6,22,25
    2700:	60 00 00 30 	ori     r0,r0,48
    2704:	7c 04 43 86 	.long 0x7c044386
        rVal = mfdcr(XDCR_1_BASEADDR | XDCR_APU_UDI);
    2708:	7f c4 42 86 	.long 0x7fc44286
        mtdcr(XDCR_0_BASEADDR | XDCR_APU_UDI, (((UDInum) << 6) & 0x000003c0) | 0x00000030);
        rVal = mfdcr(XDCR_0_BASEADDR | XDCR_APU_UDI);
        break;
    }

    XIo_DcrUnlock(DcrBase);
    270c:	7f e3 fb 78 	mr      r3,r31
    2710:	4b ff f9 e9 	bl      20f8 <XIo_DcrUnlock>
    mtmsr(oldMSR);
    2714:	7f a0 01 24 	mtmsr   r29
    return (rVal);
}
    2718:	80 01 00 1c 	lwz     r0,28(r1)
    271c:	7f c3 f3 78 	mr      r3,r30
    2720:	83 a1 00 0c 	lwz     r29,12(r1)
    2724:	83 c1 00 10 	lwz     r30,16(r1)
    2728:	83 e1 00 14 	lwz     r31,20(r1)
    272c:	7c 08 03 a6 	mtlr    r0
    2730:	38 21 00 18 	addi    r1,r1,24
    2734:	4e 80 00 20 	blr
    case XDCR_2_BASEADDR:
        mtdcr(XDCR_2_BASEADDR | XDCR_APU_UDI, (((UDInum) << 6) & 0x000003c0) | 0x00000030);
        rVal = mfdcr(XDCR_2_BASEADDR | XDCR_APU_UDI);
        break;
    case XDCR_3_BASEADDR:
        mtdcr(XDCR_3_BASEADDR | XDCR_APU_UDI, (((UDInum) << 6) & 0x000003c0) | 0x00000030);
    2738:	57 c0 35 b2 	rlwinm  r0,r30,6,22,25
    273c:	60 00 00 30 	ori     r0,r0,48
    2740:	7c 04 c3 86 	.long 0x7c04c386
        rVal = mfdcr(XDCR_3_BASEADDR | XDCR_APU_UDI);
    2744:	7f c4 c2 86 	.long 0x7fc4c286
    2748:	4b ff ff 44 	b       268c <XIo_DcrReadAPUUDIReg+0x68>
    case XDCR_1_BASEADDR:
        mtdcr(XDCR_1_BASEADDR | XDCR_APU_UDI, (((UDInum) << 6) & 0x000003c0) | 0x00000030);
        rVal = mfdcr(XDCR_1_BASEADDR | XDCR_APU_UDI);
        break;
    case XDCR_2_BASEADDR:
        mtdcr(XDCR_2_BASEADDR | XDCR_APU_UDI, (((UDInum) << 6) & 0x000003c0) | 0x00000030);
    274c:	57 c0 35 b2 	rlwinm  r0,r30,6,22,25
    2750:	60 00 00 30 	ori     r0,r0,48
    2754:	7c 04 83 86 	.long 0x7c048386
        rVal = mfdcr(XDCR_2_BASEADDR | XDCR_APU_UDI);
    2758:	7f c4 82 86 	.long 0x7fc48286
        mtdcr(XDCR_0_BASEADDR | XDCR_APU_UDI, (((UDInum) << 6) & 0x000003c0) | 0x00000030);
        rVal = mfdcr(XDCR_0_BASEADDR | XDCR_APU_UDI);
        break;
    }

    XIo_DcrUnlock(DcrBase);
    275c:	7f e3 fb 78 	mr      r3,r31
    2760:	4b ff f9 99 	bl      20f8 <XIo_DcrUnlock>
    mtmsr(oldMSR);
    2764:	7f a0 01 24 	mtmsr   r29
    return (rVal);
}
    2768:	80 01 00 1c 	lwz     r0,28(r1)
    276c:	7f c3 f3 78 	mr      r3,r30
    2770:	83 a1 00 0c 	lwz     r29,12(r1)
    2774:	83 c1 00 10 	lwz     r30,16(r1)
    2778:	83 e1 00 14 	lwz     r31,20(r1)
    277c:	7c 08 03 a6 	mtlr    r0
    2780:	38 21 00 18 	addi    r1,r1,24
    2784:	4e 80 00 20 	blr

00002788 <XIo_DcrOut>:
*
* None.
*
****************************************************************************/
void XIo_DcrOut(u32 DcrRegister, u32 Data)
{
    2788:	7c 6a 1b 78 	mr      r10,r3
    278c:	94 21 ff f8 	stwu    r1,-8(r1)
    2790:	7c 08 02 a6 	mflr    r0
    /*
     * Assert validates the register number
     */
    XASSERT_VOID(DcrRegister < MAX_DCR_REGISTERS);
    2794:	3c 60 00 00 	lis     r3,0
    2798:	2b 8a 0f ff 	cmplwi  cr7,r10,4095
*
* None.
*
****************************************************************************/
void XIo_DcrOut(u32 DcrRegister, u32 Data)
{
    279c:	7c 88 23 78 	mr      r8,r4
    27a0:	90 01 00 0c 	stw     r0,12(r1)
    /*
     * Assert validates the register number
     */
    XASSERT_VOID(DcrRegister < MAX_DCR_REGISTERS);
    27a4:	38 63 2f 24 	addi    r3,r3,12068
    27a8:	38 80 02 06 	li      r4,518
    27ac:	41 9d 00 40 	bgt-    cr7,27ec <XIo_DcrOut+0x64>
    27b0:	38 00 00 00 	li      r0,0
    27b4:	3d 20 00 00 	lis     r9,0
    27b8:	90 09 35 0c 	stw     r0,13580(r9)
*   and enabled after the DCR accesses.
*
******************************************************************************/
inline void XIo_DcrIndirectAddrWriteReg(u32 DcrBase, u32 DcrRegister, u32 Data)
{
    unsigned int oldMSR = mfmsr();
    27bc:	7d 60 00 a6 	mfmsr   r11
    mtmsr(oldMSR & XDCR_DISABLE_EXCEPTIONS);
    27c0:	3c 00 ff fd 	lis     r0,-3
    27c4:	60 00 76 ff 	ori     r0,r0,30463
    27c8:	7d 60 00 38 	and     r0,r11,r0
    27cc:	7c 00 01 24 	mtmsr   r0

    switch (DcrBase)
    {
    case XDCR_0_BASEADDR:
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
    27d0:	7d 40 03 86 	.long 0x7d400386
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ACC, Data);
    27d4:	7d 01 03 86 	.long 0x7d010386
    default:
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ACC, Data);
        break;
    }
    mtmsr(oldMSR);
    27d8:	7d 60 01 24 	mtmsr   r11

    /*
     * pass the call on to the proper function
     */
    XIo_DcrIndirectAddrWriteReg(XDCR_0_BASEADDR, DcrRegister, Data);
}
    27dc:	80 01 00 0c 	lwz     r0,12(r1)
    27e0:	38 21 00 08 	addi    r1,r1,8
    27e4:	7c 08 03 a6 	mtlr    r0
    27e8:	4e 80 00 20 	blr
void XIo_DcrOut(u32 DcrRegister, u32 Data)
{
    /*
     * Assert validates the register number
     */
    XASSERT_VOID(DcrRegister < MAX_DCR_REGISTERS);
    27ec:	48 00 03 a1 	bl      2b8c <XAssert>
    27f0:	38 00 00 01 	li      r0,1
    27f4:	3d 20 00 00 	lis     r9,0
    27f8:	90 09 35 0c 	stw     r0,13580(r9)

    /*
     * pass the call on to the proper function
     */
    XIo_DcrIndirectAddrWriteReg(XDCR_0_BASEADDR, DcrRegister, Data);
}
    27fc:	80 01 00 0c 	lwz     r0,12(r1)
    2800:	38 21 00 08 	addi    r1,r1,8
    2804:	7c 08 03 a6 	mtlr    r0
    2808:	4e 80 00 20 	blr

0000280c <XIo_DcrLockAndWriteReg>:
*
* Uses the indirect addressing method available in V5 with PPC440.
*
****************************************************************************/
void XIo_DcrLockAndWriteReg(u32 DcrBase, u32 DcrRegister, u32 Data)
{
    280c:	94 21 ff e8 	stwu    r1,-24(r1)
    2810:	7c 08 02 a6 	mflr    r0
    2814:	93 a1 00 0c 	stw     r29,12(r1)
    2818:	7c 7d 1b 78 	mr      r29,r3
    281c:	93 c1 00 10 	stw     r30,16(r1)
    2820:	7c be 2b 78 	mr      r30,r5
    2824:	93 e1 00 14 	stw     r31,20(r1)
    2828:	7c 9f 23 78 	mr      r31,r4
    282c:	90 01 00 1c 	stw     r0,28(r1)
    XIo_DcrLock(DcrBase);
    2830:	4b ff f8 3d 	bl      206c <XIo_DcrLock>
*   and enabled after the DCR accesses.
*
******************************************************************************/
inline void XIo_DcrIndirectAddrWriteReg(u32 DcrBase, u32 DcrRegister, u32 Data)
{
    unsigned int oldMSR = mfmsr();
    2834:	7d 20 00 a6 	mfmsr   r9
    mtmsr(oldMSR & XDCR_DISABLE_EXCEPTIONS);
    2838:	3c 00 ff fd 	lis     r0,-3
    283c:	60 00 76 ff 	ori     r0,r0,30463
    2840:	7d 20 00 38 	and     r0,r9,r0
    2844:	7c 00 01 24 	mtmsr   r0

    switch (DcrBase)
    2848:	2f 9d 01 00 	cmpwi   cr7,r29,256
    284c:	41 9e 00 7c 	beq-    cr7,28c8 <XIo_DcrLockAndWriteReg+0xbc>
    2850:	2b 9d 01 00 	cmplwi  cr7,r29,256
    2854:	40 9d 00 40 	ble-    cr7,2894 <XIo_DcrLockAndWriteReg+0x88>
    2858:	2f 9d 02 00 	cmpwi   cr7,r29,512
    285c:	41 9e 00 ac 	beq-    cr7,2908 <XIo_DcrLockAndWriteReg+0xfc>
    2860:	2f 9d 03 00 	cmpwi   cr7,r29,768
    2864:	41 9e 00 94 	beq-    cr7,28f8 <XIo_DcrLockAndWriteReg+0xec>
    case XDCR_3_BASEADDR:
        XIo_mDcrWriteReg(XDCR_3_BASEADDR | XDCR_IDA_ADDR, XDCR_3_BASEADDR | DcrRegister);
        XIo_mDcrWriteReg(XDCR_3_BASEADDR | XDCR_IDA_ACC, Data);
        break;
    default:
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
    2868:	7f e0 03 86 	.long 0x7fe00386
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ACC, Data);
    286c:	7f c1 03 86 	.long 0x7fc10386
        break;
    }
    mtmsr(oldMSR);
    2870:	7d 20 01 24 	mtmsr   r9
{
    XIo_DcrLock(DcrBase);
    XIo_DcrIndirectAddrWriteReg(DcrBase, DcrRegister, Data);
    XIo_DcrUnlock(DcrBase);
    return;
}
    2874:	80 01 00 1c 	lwz     r0,28(r1)
****************************************************************************/
void XIo_DcrLockAndWriteReg(u32 DcrBase, u32 DcrRegister, u32 Data)
{
    XIo_DcrLock(DcrBase);
    XIo_DcrIndirectAddrWriteReg(DcrBase, DcrRegister, Data);
    XIo_DcrUnlock(DcrBase);
    2878:	7f a3 eb 78 	mr      r3,r29
    return;
}
    287c:	83 c1 00 10 	lwz     r30,16(r1)
    2880:	83 a1 00 0c 	lwz     r29,12(r1)
    2884:	7c 08 03 a6 	mtlr    r0
    2888:	83 e1 00 14 	lwz     r31,20(r1)
    288c:	38 21 00 18 	addi    r1,r1,24
****************************************************************************/
void XIo_DcrLockAndWriteReg(u32 DcrBase, u32 DcrRegister, u32 Data)
{
    XIo_DcrLock(DcrBase);
    XIo_DcrIndirectAddrWriteReg(DcrBase, DcrRegister, Data);
    XIo_DcrUnlock(DcrBase);
    2890:	4b ff f8 68 	b       20f8 <XIo_DcrUnlock>
inline void XIo_DcrIndirectAddrWriteReg(u32 DcrBase, u32 DcrRegister, u32 Data)
{
    unsigned int oldMSR = mfmsr();
    mtmsr(oldMSR & XDCR_DISABLE_EXCEPTIONS);

    switch (DcrBase)
    2894:	2f 9d 00 00 	cmpwi   cr7,r29,0
    2898:	40 be ff d0 	bne-    cr7,2868 <XIo_DcrLockAndWriteReg+0x5c>
    {
    case XDCR_0_BASEADDR:
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
    289c:	7f e0 03 86 	.long 0x7fe00386
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ACC, Data);
    28a0:	7f c1 03 86 	.long 0x7fc10386
    default:
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ACC, Data);
        break;
    }
    mtmsr(oldMSR);
    28a4:	7d 20 01 24 	mtmsr   r9
{
    XIo_DcrLock(DcrBase);
    XIo_DcrIndirectAddrWriteReg(DcrBase, DcrRegister, Data);
    XIo_DcrUnlock(DcrBase);
    return;
}
    28a8:	80 01 00 1c 	lwz     r0,28(r1)
****************************************************************************/
void XIo_DcrLockAndWriteReg(u32 DcrBase, u32 DcrRegister, u32 Data)
{
    XIo_DcrLock(DcrBase);
    XIo_DcrIndirectAddrWriteReg(DcrBase, DcrRegister, Data);
    XIo_DcrUnlock(DcrBase);
    28ac:	7f a3 eb 78 	mr      r3,r29
    return;
}
    28b0:	83 c1 00 10 	lwz     r30,16(r1)
    28b4:	83 a1 00 0c 	lwz     r29,12(r1)
    28b8:	7c 08 03 a6 	mtlr    r0
    28bc:	83 e1 00 14 	lwz     r31,20(r1)
    28c0:	38 21 00 18 	addi    r1,r1,24
****************************************************************************/
void XIo_DcrLockAndWriteReg(u32 DcrBase, u32 DcrRegister, u32 Data)
{
    XIo_DcrLock(DcrBase);
    XIo_DcrIndirectAddrWriteReg(DcrBase, DcrRegister, Data);
    XIo_DcrUnlock(DcrBase);
    28c4:	4b ff f8 34 	b       20f8 <XIo_DcrUnlock>
    case XDCR_0_BASEADDR:
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ACC, Data);
        break;
    case XDCR_1_BASEADDR:
        XIo_mDcrWriteReg(XDCR_1_BASEADDR | XDCR_IDA_ADDR, XDCR_1_BASEADDR | DcrRegister);
    28c8:	63 e0 01 00 	ori     r0,r31,256
    28cc:	7c 00 43 86 	.long 0x7c004386
        XIo_mDcrWriteReg(XDCR_1_BASEADDR | XDCR_IDA_ACC, Data);
    28d0:	7f c1 43 86 	.long 0x7fc14386
    default:
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ACC, Data);
        break;
    }
    mtmsr(oldMSR);
    28d4:	7d 20 01 24 	mtmsr   r9
{
    XIo_DcrLock(DcrBase);
    XIo_DcrIndirectAddrWriteReg(DcrBase, DcrRegister, Data);
    XIo_DcrUnlock(DcrBase);
    return;
}
    28d8:	80 01 00 1c 	lwz     r0,28(r1)
****************************************************************************/
void XIo_DcrLockAndWriteReg(u32 DcrBase, u32 DcrRegister, u32 Data)
{
    XIo_DcrLock(DcrBase);
    XIo_DcrIndirectAddrWriteReg(DcrBase, DcrRegister, Data);
    XIo_DcrUnlock(DcrBase);
    28dc:	7f a3 eb 78 	mr      r3,r29
    return;
}
    28e0:	83 c1 00 10 	lwz     r30,16(r1)
    28e4:	83 a1 00 0c 	lwz     r29,12(r1)
    28e8:	7c 08 03 a6 	mtlr    r0
    28ec:	83 e1 00 14 	lwz     r31,20(r1)
    28f0:	38 21 00 18 	addi    r1,r1,24
****************************************************************************/
void XIo_DcrLockAndWriteReg(u32 DcrBase, u32 DcrRegister, u32 Data)
{
    XIo_DcrLock(DcrBase);
    XIo_DcrIndirectAddrWriteReg(DcrBase, DcrRegister, Data);
    XIo_DcrUnlock(DcrBase);
    28f4:	4b ff f8 04 	b       20f8 <XIo_DcrUnlock>
    case XDCR_2_BASEADDR:
        XIo_mDcrWriteReg(XDCR_2_BASEADDR | XDCR_IDA_ADDR, XDCR_2_BASEADDR | DcrRegister);
        XIo_mDcrWriteReg(XDCR_2_BASEADDR | XDCR_IDA_ACC, Data);
        break;
    case XDCR_3_BASEADDR:
        XIo_mDcrWriteReg(XDCR_3_BASEADDR | XDCR_IDA_ADDR, XDCR_3_BASEADDR | DcrRegister);
    28f8:	63 e0 03 00 	ori     r0,r31,768
    28fc:	7c 00 c3 86 	.long 0x7c00c386
        XIo_mDcrWriteReg(XDCR_3_BASEADDR | XDCR_IDA_ACC, Data);
    2900:	7f c1 c3 86 	.long 0x7fc1c386
    2904:	4b ff ff 6c 	b       2870 <XIo_DcrLockAndWriteReg+0x64>
    case XDCR_1_BASEADDR:
        XIo_mDcrWriteReg(XDCR_1_BASEADDR | XDCR_IDA_ADDR, XDCR_1_BASEADDR | DcrRegister);
        XIo_mDcrWriteReg(XDCR_1_BASEADDR | XDCR_IDA_ACC, Data);
        break;
    case XDCR_2_BASEADDR:
        XIo_mDcrWriteReg(XDCR_2_BASEADDR | XDCR_IDA_ADDR, XDCR_2_BASEADDR | DcrRegister);
    2908:	63 e0 02 00 	ori     r0,r31,512
    290c:	7c 00 83 86 	.long 0x7c008386
        XIo_mDcrWriteReg(XDCR_2_BASEADDR | XDCR_IDA_ACC, Data);
    2910:	7f c1 83 86 	.long 0x7fc18386
    default:
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ACC, Data);
        break;
    }
    mtmsr(oldMSR);
    2914:	7d 20 01 24 	mtmsr   r9
{
    XIo_DcrLock(DcrBase);
    XIo_DcrIndirectAddrWriteReg(DcrBase, DcrRegister, Data);
    XIo_DcrUnlock(DcrBase);
    return;
}
    2918:	80 01 00 1c 	lwz     r0,28(r1)
****************************************************************************/
void XIo_DcrLockAndWriteReg(u32 DcrBase, u32 DcrRegister, u32 Data)
{
    XIo_DcrLock(DcrBase);
    XIo_DcrIndirectAddrWriteReg(DcrBase, DcrRegister, Data);
    XIo_DcrUnlock(DcrBase);
    291c:	7f a3 eb 78 	mr      r3,r29
    return;
}
    2920:	83 c1 00 10 	lwz     r30,16(r1)
    2924:	83 a1 00 0c 	lwz     r29,12(r1)
    2928:	7c 08 03 a6 	mtlr    r0
    292c:	83 e1 00 14 	lwz     r31,20(r1)
    2930:	38 21 00 18 	addi    r1,r1,24
****************************************************************************/
void XIo_DcrLockAndWriteReg(u32 DcrBase, u32 DcrRegister, u32 Data)
{
    XIo_DcrLock(DcrBase);
    XIo_DcrIndirectAddrWriteReg(DcrBase, DcrRegister, Data);
    XIo_DcrUnlock(DcrBase);
    2934:	4b ff f7 c4 	b       20f8 <XIo_DcrUnlock>

00002938 <XIo_DcrIn>:
*
* None.
*
****************************************************************************/
u32 XIo_DcrIn(u32 DcrRegister)
{
    2938:	7c 6a 1b 78 	mr      r10,r3
    293c:	94 21 ff f8 	stwu    r1,-8(r1)
    2940:	7c 08 02 a6 	mflr    r0
    u32 rVal;
    /*
     * Assert validates the register number
     */
    XASSERT_NONVOID(DcrRegister < MAX_DCR_REGISTERS);
    2944:	3c 60 00 00 	lis     r3,0
    2948:	2b 8a 0f ff 	cmplwi  cr7,r10,4095
    294c:	38 80 02 24 	li      r4,548
*
* None.
*
****************************************************************************/
u32 XIo_DcrIn(u32 DcrRegister)
{
    2950:	90 01 00 0c 	stw     r0,12(r1)
    u32 rVal;
    /*
     * Assert validates the register number
     */
    XASSERT_NONVOID(DcrRegister < MAX_DCR_REGISTERS);
    2954:	38 63 2f 24 	addi    r3,r3,12068
    2958:	41 9d 00 44 	bgt-    cr7,299c <XIo_DcrIn+0x64>
    295c:	38 00 00 00 	li      r0,0
    2960:	3d 20 00 00 	lis     r9,0
    2964:	90 09 35 0c 	stw     r0,13580(r9)
*   and enabled after the DCR accesses.
*
******************************************************************************/
inline void XIo_DcrIndirectAddrReadReg(u32 DcrBase, u32 DcrRegister, u32 *rVal)
{
    unsigned int oldMSR = mfmsr();
    2968:	7d 60 00 a6 	mfmsr   r11
    mtmsr(oldMSR & XDCR_DISABLE_EXCEPTIONS);
    296c:	3c 00 ff fd 	lis     r0,-3
    2970:	60 00 76 ff 	ori     r0,r0,30463
    2974:	7d 60 00 38 	and     r0,r11,r0
    2978:	7c 00 01 24 	mtmsr   r0

    switch (DcrBase) {
    case XDCR_0_BASEADDR:
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
    297c:	7d 40 03 86 	.long 0x7d400386
        *rVal = XIo_mDcrReadReg(XDCR_0_BASEADDR | XDCR_IDA_ACC);
    2980:	7c 01 02 86 	.long 0x7c010286
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
        *rVal = XIo_mDcrReadReg(XDCR_0_BASEADDR | XDCR_IDA_ACC);
        break;
    }

    mtmsr(oldMSR);
    2984:	7d 60 01 24 	mtmsr   r11
     * pass the call on to the proper function
     */
    XIo_DcrIndirectAddrReadReg(XDCR_0_BASEADDR, DcrRegister, &rVal);

    return (rVal);
}
    2988:	7c 03 03 78 	mr      r3,r0
    298c:	80 01 00 0c 	lwz     r0,12(r1)
    2990:	38 21 00 08 	addi    r1,r1,8
    2994:	7c 08 03 a6 	mtlr    r0
    2998:	4e 80 00 20 	blr
{
    u32 rVal;
    /*
     * Assert validates the register number
     */
    XASSERT_NONVOID(DcrRegister < MAX_DCR_REGISTERS);
    299c:	48 00 01 f1 	bl      2b8c <XAssert>
    29a0:	38 00 00 01 	li      r0,1
    29a4:	3d 20 00 00 	lis     r9,0
    29a8:	90 09 35 0c 	stw     r0,13580(r9)
    29ac:	38 00 00 00 	li      r0,0
     * pass the call on to the proper function
     */
    XIo_DcrIndirectAddrReadReg(XDCR_0_BASEADDR, DcrRegister, &rVal);

    return (rVal);
}
    29b0:	7c 03 03 78 	mr      r3,r0
    29b4:	80 01 00 0c 	lwz     r0,12(r1)
    29b8:	38 21 00 08 	addi    r1,r1,8
    29bc:	7c 08 03 a6 	mtlr    r0
    29c0:	4e 80 00 20 	blr

000029c4 <XIo_DcrLockAndReadReg>:
*
* Uses the indirect addressing method available in V5 with PPC440.
*
****************************************************************************/
u32 XIo_DcrLockAndReadReg(u32 DcrBase, u32 DcrRegister)
{
    29c4:	94 21 ff f0 	stwu    r1,-16(r1)
    29c8:	7c 08 02 a6 	mflr    r0
    29cc:	93 c1 00 08 	stw     r30,8(r1)
    29d0:	7c 7e 1b 78 	mr      r30,r3
    29d4:	93 e1 00 0c 	stw     r31,12(r1)
    29d8:	7c 9f 23 78 	mr      r31,r4
    29dc:	90 01 00 14 	stw     r0,20(r1)
    u32 rVal;

    XIo_DcrLock(DcrBase);
    29e0:	4b ff f6 8d 	bl      206c <XIo_DcrLock>
*   and enabled after the DCR accesses.
*
******************************************************************************/
inline void XIo_DcrIndirectAddrReadReg(u32 DcrBase, u32 DcrRegister, u32 *rVal)
{
    unsigned int oldMSR = mfmsr();
    29e4:	7d 20 00 a6 	mfmsr   r9
    mtmsr(oldMSR & XDCR_DISABLE_EXCEPTIONS);
    29e8:	3c 00 ff fd 	lis     r0,-3
    29ec:	60 00 76 ff 	ori     r0,r0,30463
    29f0:	7d 20 00 38 	and     r0,r9,r0
    29f4:	7c 00 01 24 	mtmsr   r0

    switch (DcrBase) {
    29f8:	2f 9e 01 00 	cmpwi   cr7,r30,256
    29fc:	41 9e 00 84 	beq-    cr7,2a80 <XIo_DcrLockAndReadReg+0xbc>
    2a00:	2b 9e 01 00 	cmplwi  cr7,r30,256
    2a04:	40 9d 00 44 	ble-    cr7,2a48 <XIo_DcrLockAndReadReg+0x84>
    2a08:	2f 9e 02 00 	cmpwi   cr7,r30,512
    2a0c:	41 9e 00 b8 	beq-    cr7,2ac4 <XIo_DcrLockAndReadReg+0x100>
    2a10:	2f 9e 03 00 	cmpwi   cr7,r30,768
    2a14:	41 9e 00 a0 	beq-    cr7,2ab4 <XIo_DcrLockAndReadReg+0xf0>
    case XDCR_3_BASEADDR:
        XIo_mDcrWriteReg(XDCR_3_BASEADDR | XDCR_IDA_ADDR, XDCR_3_BASEADDR | DcrRegister);
        *rVal = XIo_mDcrReadReg(XDCR_3_BASEADDR | XDCR_IDA_ACC);
        break;
    default:
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
    2a18:	7f e0 03 86 	.long 0x7fe00386
        *rVal = XIo_mDcrReadReg(XDCR_0_BASEADDR | XDCR_IDA_ACC);
    2a1c:	7f e1 02 86 	.long 0x7fe10286
        break;
    }

    mtmsr(oldMSR);
    2a20:	7d 20 01 24 	mtmsr   r9
{
    u32 rVal;

    XIo_DcrLock(DcrBase);
    XIo_DcrIndirectAddrReadReg(DcrBase, DcrRegister, &rVal);
    XIo_DcrUnlock(DcrBase);
    2a24:	7f c3 f3 78 	mr      r3,r30
    2a28:	4b ff f6 d1 	bl      20f8 <XIo_DcrUnlock>

    return (rVal);
}
    2a2c:	80 01 00 14 	lwz     r0,20(r1)
    2a30:	7f e3 fb 78 	mr      r3,r31
    2a34:	83 c1 00 08 	lwz     r30,8(r1)
    2a38:	83 e1 00 0c 	lwz     r31,12(r1)
    2a3c:	38 21 00 10 	addi    r1,r1,16
    2a40:	7c 08 03 a6 	mtlr    r0
    2a44:	4e 80 00 20 	blr
inline void XIo_DcrIndirectAddrReadReg(u32 DcrBase, u32 DcrRegister, u32 *rVal)
{
    unsigned int oldMSR = mfmsr();
    mtmsr(oldMSR & XDCR_DISABLE_EXCEPTIONS);

    switch (DcrBase) {
    2a48:	2f 9e 00 00 	cmpwi   cr7,r30,0
    2a4c:	40 be ff cc 	bne-    cr7,2a18 <XIo_DcrLockAndReadReg+0x54>
    case XDCR_0_BASEADDR:
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
    2a50:	7f e0 03 86 	.long 0x7fe00386
        *rVal = XIo_mDcrReadReg(XDCR_0_BASEADDR | XDCR_IDA_ACC);
    2a54:	7f e1 02 86 	.long 0x7fe10286
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
        *rVal = XIo_mDcrReadReg(XDCR_0_BASEADDR | XDCR_IDA_ACC);
        break;
    }

    mtmsr(oldMSR);
    2a58:	7d 20 01 24 	mtmsr   r9
{
    u32 rVal;

    XIo_DcrLock(DcrBase);
    XIo_DcrIndirectAddrReadReg(DcrBase, DcrRegister, &rVal);
    XIo_DcrUnlock(DcrBase);
    2a5c:	7f c3 f3 78 	mr      r3,r30
    2a60:	4b ff f6 99 	bl      20f8 <XIo_DcrUnlock>

    return (rVal);
}
    2a64:	80 01 00 14 	lwz     r0,20(r1)
    2a68:	7f e3 fb 78 	mr      r3,r31
    2a6c:	83 c1 00 08 	lwz     r30,8(r1)
    2a70:	83 e1 00 0c 	lwz     r31,12(r1)
    2a74:	38 21 00 10 	addi    r1,r1,16
    2a78:	7c 08 03 a6 	mtlr    r0
    2a7c:	4e 80 00 20 	blr
    case XDCR_0_BASEADDR:
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
        *rVal = XIo_mDcrReadReg(XDCR_0_BASEADDR | XDCR_IDA_ACC);
        break;
    case XDCR_1_BASEADDR:
        XIo_mDcrWriteReg(XDCR_1_BASEADDR | XDCR_IDA_ADDR, XDCR_1_BASEADDR | DcrRegister);
    2a80:	63 e0 01 00 	ori     r0,r31,256
    2a84:	7c 00 43 86 	.long 0x7c004386
        *rVal = XIo_mDcrReadReg(XDCR_1_BASEADDR | XDCR_IDA_ACC);
    2a88:	7f e1 42 86 	.long 0x7fe14286
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
        *rVal = XIo_mDcrReadReg(XDCR_0_BASEADDR | XDCR_IDA_ACC);
        break;
    }

    mtmsr(oldMSR);
    2a8c:	7d 20 01 24 	mtmsr   r9
{
    u32 rVal;

    XIo_DcrLock(DcrBase);
    XIo_DcrIndirectAddrReadReg(DcrBase, DcrRegister, &rVal);
    XIo_DcrUnlock(DcrBase);
    2a90:	7f c3 f3 78 	mr      r3,r30
    2a94:	4b ff f6 65 	bl      20f8 <XIo_DcrUnlock>

    return (rVal);
}
    2a98:	80 01 00 14 	lwz     r0,20(r1)
    2a9c:	7f e3 fb 78 	mr      r3,r31
    2aa0:	83 c1 00 08 	lwz     r30,8(r1)
    2aa4:	83 e1 00 0c 	lwz     r31,12(r1)
    2aa8:	38 21 00 10 	addi    r1,r1,16
    2aac:	7c 08 03 a6 	mtlr    r0
    2ab0:	4e 80 00 20 	blr
    case XDCR_2_BASEADDR:
        XIo_mDcrWriteReg(XDCR_2_BASEADDR | XDCR_IDA_ADDR, XDCR_2_BASEADDR | DcrRegister);
        *rVal = XIo_mDcrReadReg(XDCR_2_BASEADDR | XDCR_IDA_ACC);
        break;
    case XDCR_3_BASEADDR:
        XIo_mDcrWriteReg(XDCR_3_BASEADDR | XDCR_IDA_ADDR, XDCR_3_BASEADDR | DcrRegister);
    2ab4:	63 e0 03 00 	ori     r0,r31,768
    2ab8:	7c 00 c3 86 	.long 0x7c00c386
        *rVal = XIo_mDcrReadReg(XDCR_3_BASEADDR | XDCR_IDA_ACC);
    2abc:	7f e1 c2 86 	.long 0x7fe1c286
    2ac0:	4b ff ff 60 	b       2a20 <XIo_DcrLockAndReadReg+0x5c>
    case XDCR_1_BASEADDR:
        XIo_mDcrWriteReg(XDCR_1_BASEADDR | XDCR_IDA_ADDR, XDCR_1_BASEADDR | DcrRegister);
        *rVal = XIo_mDcrReadReg(XDCR_1_BASEADDR | XDCR_IDA_ACC);
        break;
    case XDCR_2_BASEADDR:
        XIo_mDcrWriteReg(XDCR_2_BASEADDR | XDCR_IDA_ADDR, XDCR_2_BASEADDR | DcrRegister);
    2ac4:	63 e0 02 00 	ori     r0,r31,512
    2ac8:	7c 00 83 86 	.long 0x7c008386
        *rVal = XIo_mDcrReadReg(XDCR_2_BASEADDR | XDCR_IDA_ACC);
    2acc:	7f e1 82 86 	.long 0x7fe18286
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
        *rVal = XIo_mDcrReadReg(XDCR_0_BASEADDR | XDCR_IDA_ACC);
        break;
    }

    mtmsr(oldMSR);
    2ad0:	7d 20 01 24 	mtmsr   r9
{
    u32 rVal;

    XIo_DcrLock(DcrBase);
    XIo_DcrIndirectAddrReadReg(DcrBase, DcrRegister, &rVal);
    XIo_DcrUnlock(DcrBase);
    2ad4:	7f c3 f3 78 	mr      r3,r30
    2ad8:	4b ff f6 21 	bl      20f8 <XIo_DcrUnlock>

    return (rVal);
}
    2adc:	80 01 00 14 	lwz     r0,20(r1)
    2ae0:	7f e3 fb 78 	mr      r3,r31
    2ae4:	83 c1 00 08 	lwz     r30,8(r1)
    2ae8:	83 e1 00 0c 	lwz     r31,12(r1)
    2aec:	38 21 00 10 	addi    r1,r1,16
    2af0:	7c 08 03 a6 	mtlr    r0
    2af4:	4e 80 00 20 	blr

00002af8 <XIo_DcrReadReg>:
*   and enabled after the DCR accesses.
*
******************************************************************************/
inline void XIo_DcrIndirectAddrReadReg(u32 DcrBase, u32 DcrRegister, u32 *rVal)
{
    unsigned int oldMSR = mfmsr();
    2af8:	7d 20 00 a6 	mfmsr   r9
    mtmsr(oldMSR & XDCR_DISABLE_EXCEPTIONS);
    2afc:	3c 00 ff fd 	lis     r0,-3
    2b00:	60 00 76 ff 	ori     r0,r0,30463
    2b04:	7d 20 00 38 	and     r0,r9,r0
    2b08:	7c 00 01 24 	mtmsr   r0

    switch (DcrBase) {
    2b0c:	2f 83 01 00 	cmpwi   cr7,r3,256
    2b10:	41 9e 00 44 	beq-    cr7,2b54 <XIo_DcrReadReg+0x5c>
    2b14:	2b 83 01 00 	cmplwi  cr7,r3,256
    2b18:	40 9d 00 24 	ble-    cr7,2b3c <XIo_DcrReadReg+0x44>
    2b1c:	2f 83 02 00 	cmpwi   cr7,r3,512
    2b20:	41 9e 00 58 	beq-    cr7,2b78 <XIo_DcrReadReg+0x80>
    2b24:	2f 83 03 00 	cmpwi   cr7,r3,768
    2b28:	41 9e 00 40 	beq-    cr7,2b68 <XIo_DcrReadReg+0x70>
    case XDCR_3_BASEADDR:
        XIo_mDcrWriteReg(XDCR_3_BASEADDR | XDCR_IDA_ADDR, XDCR_3_BASEADDR | DcrRegister);
        *rVal = XIo_mDcrReadReg(XDCR_3_BASEADDR | XDCR_IDA_ACC);
        break;
    default:
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
    2b2c:	7c 80 03 86 	.long 0x7c800386
        *rVal = XIo_mDcrReadReg(XDCR_0_BASEADDR | XDCR_IDA_ACC);
    2b30:	7c 61 02 86 	.long 0x7c610286
        break;
    }

    mtmsr(oldMSR);
    2b34:	7d 20 01 24 	mtmsr   r9
    u32 rVal;

    XIo_DcrIndirectAddrReadReg(DcrBase, DcrRegister, &rVal);

    return (rVal);
}
    2b38:	4e 80 00 20 	blr
inline void XIo_DcrIndirectAddrReadReg(u32 DcrBase, u32 DcrRegister, u32 *rVal)
{
    unsigned int oldMSR = mfmsr();
    mtmsr(oldMSR & XDCR_DISABLE_EXCEPTIONS);

    switch (DcrBase) {
    2b3c:	2f 83 00 00 	cmpwi   cr7,r3,0
    2b40:	40 be ff ec 	bne-    cr7,2b2c <XIo_DcrReadReg+0x34>
    case XDCR_0_BASEADDR:
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
    2b44:	7c 80 03 86 	.long 0x7c800386
        *rVal = XIo_mDcrReadReg(XDCR_0_BASEADDR | XDCR_IDA_ACC);
    2b48:	7c 61 02 86 	.long 0x7c610286
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
        *rVal = XIo_mDcrReadReg(XDCR_0_BASEADDR | XDCR_IDA_ACC);
        break;
    }

    mtmsr(oldMSR);
    2b4c:	7d 20 01 24 	mtmsr   r9
    u32 rVal;

    XIo_DcrIndirectAddrReadReg(DcrBase, DcrRegister, &rVal);

    return (rVal);
}
    2b50:	4e 80 00 20 	blr
    case XDCR_0_BASEADDR:
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
        *rVal = XIo_mDcrReadReg(XDCR_0_BASEADDR | XDCR_IDA_ACC);
        break;
    case XDCR_1_BASEADDR:
        XIo_mDcrWriteReg(XDCR_1_BASEADDR | XDCR_IDA_ADDR, XDCR_1_BASEADDR | DcrRegister);
    2b54:	60 80 01 00 	ori     r0,r4,256
    2b58:	7c 00 43 86 	.long 0x7c004386
        *rVal = XIo_mDcrReadReg(XDCR_1_BASEADDR | XDCR_IDA_ACC);
    2b5c:	7c 61 42 86 	.long 0x7c614286
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
        *rVal = XIo_mDcrReadReg(XDCR_0_BASEADDR | XDCR_IDA_ACC);
        break;
    }

    mtmsr(oldMSR);
    2b60:	7d 20 01 24 	mtmsr   r9
    u32 rVal;

    XIo_DcrIndirectAddrReadReg(DcrBase, DcrRegister, &rVal);

    return (rVal);
}
    2b64:	4e 80 00 20 	blr
    case XDCR_2_BASEADDR:
        XIo_mDcrWriteReg(XDCR_2_BASEADDR | XDCR_IDA_ADDR, XDCR_2_BASEADDR | DcrRegister);
        *rVal = XIo_mDcrReadReg(XDCR_2_BASEADDR | XDCR_IDA_ACC);
        break;
    case XDCR_3_BASEADDR:
        XIo_mDcrWriteReg(XDCR_3_BASEADDR | XDCR_IDA_ADDR, XDCR_3_BASEADDR | DcrRegister);
    2b68:	60 80 03 00 	ori     r0,r4,768
    2b6c:	7c 00 c3 86 	.long 0x7c00c386
        *rVal = XIo_mDcrReadReg(XDCR_3_BASEADDR | XDCR_IDA_ACC);
    2b70:	7c 61 c2 86 	.long 0x7c61c286
    2b74:	4b ff ff c0 	b       2b34 <XIo_DcrReadReg+0x3c>
    case XDCR_1_BASEADDR:
        XIo_mDcrWriteReg(XDCR_1_BASEADDR | XDCR_IDA_ADDR, XDCR_1_BASEADDR | DcrRegister);
        *rVal = XIo_mDcrReadReg(XDCR_1_BASEADDR | XDCR_IDA_ACC);
        break;
    case XDCR_2_BASEADDR:
        XIo_mDcrWriteReg(XDCR_2_BASEADDR | XDCR_IDA_ADDR, XDCR_2_BASEADDR | DcrRegister);
    2b78:	60 80 02 00 	ori     r0,r4,512
    2b7c:	7c 00 83 86 	.long 0x7c008386
        *rVal = XIo_mDcrReadReg(XDCR_2_BASEADDR | XDCR_IDA_ACC);
    2b80:	7c 61 82 86 	.long 0x7c618286
        XIo_mDcrWriteReg(XDCR_0_BASEADDR | XDCR_IDA_ADDR, XDCR_0_BASEADDR | DcrRegister);
        *rVal = XIo_mDcrReadReg(XDCR_0_BASEADDR | XDCR_IDA_ACC);
        break;
    }

    mtmsr(oldMSR);
    2b84:	7d 20 01 24 	mtmsr   r9
    u32 rVal;

    XIo_DcrIndirectAddrReadReg(DcrBase, DcrRegister, &rVal);

    return (rVal);
}
    2b88:	4e 80 00 20 	blr

00002b8c <XAssert>:
*
* @note     None.
*
******************************************************************************/
void XAssert(char *File, int Line)
{
    2b8c:	94 21 ff f8 	stwu    r1,-8(r1)
    2b90:	7c 08 02 a6 	mflr    r0
	/* if the callback has been set then invoke it */
	if (XAssertCallbackRoutine != NULL) {
    2b94:	3d 20 00 00 	lis     r9,0
*
* @note     None.
*
******************************************************************************/
void XAssert(char *File, int Line)
{
    2b98:	90 01 00 0c 	stw     r0,12(r1)
	/* if the callback has been set then invoke it */
	if (XAssertCallbackRoutine != NULL) {
    2b9c:	80 09 35 08 	lwz     r0,13576(r9)
    2ba0:	2f 80 00 00 	cmpwi   cr7,r0,0
    2ba4:	41 9e 00 0c 	beq-    cr7,2bb0 <XAssert+0x24>
		(*XAssertCallbackRoutine) (File, Line);
    2ba8:	7c 09 03 a6 	mtctr   r0
    2bac:	4e 80 04 21 	bctrl
	}

	/* if specified, wait indefinitely such that the assert will show up
	 * in testing
	 */
	while (XWaitInAssert) {
    2bb0:	3d 20 00 00 	lis     r9,0
    2bb4:	80 09 34 f8 	lwz     r0,13560(r9)
    2bb8:	2f 80 00 00 	cmpwi   cr7,r0,0
    2bbc:	40 be 00 00 	bne+    cr7,2bbc <XAssert+0x30>
	}
}
    2bc0:	80 01 00 0c 	lwz     r0,12(r1)
    2bc4:	38 21 00 08 	addi    r1,r1,8
    2bc8:	7c 08 03 a6 	mtlr    r0
    2bcc:	4e 80 00 20 	blr

00002bd0 <XAssertSetCallback>:
* @note     This function has no effect if NDEBUG is set
*
******************************************************************************/
void XAssertSetCallback(XAssertCallback Routine)
{
	XAssertCallbackRoutine = Routine;
    2bd0:	3d 20 00 00 	lis     r9,0
    2bd4:	90 69 35 08 	stw     r3,13576(r9)
}
    2bd8:	4e 80 00 20 	blr

00002bdc <XNullHandler>:
*
******************************************************************************/
void XNullHandler(void *NullParameter)
{
 (void) NullParameter;
}
    2bdc:	4e 80 00 20 	blr

00002be0 <Xil_Assert>:
*
* @note     None.
*
******************************************************************************/
void Xil_Assert(const char *File, int Line)
{
    2be0:	94 21 ff f8 	stwu    r1,-8(r1)
    2be4:	7c 08 02 a6 	mflr    r0
	/* if the callback has been set then invoke it */
	if (Xil_AssertCallbackRoutine != 0) {
    2be8:	3d 20 00 00 	lis     r9,0
*
* @note     None.
*
******************************************************************************/
void Xil_Assert(const char *File, int Line)
{
    2bec:	90 01 00 0c 	stw     r0,12(r1)
	/* if the callback has been set then invoke it */
	if (Xil_AssertCallbackRoutine != 0) {
    2bf0:	80 09 35 10 	lwz     r0,13584(r9)
    2bf4:	2f 80 00 00 	cmpwi   cr7,r0,0
    2bf8:	41 9e 00 0c 	beq-    cr7,2c04 <Xil_Assert+0x24>
		(*Xil_AssertCallbackRoutine)(File, Line);
    2bfc:	7c 09 03 a6 	mtctr   r0
    2c00:	4e 80 04 21 	bctrl
	}

	/* if specified, wait indefinitely such that the assert will show up
	 * in testing
	 */
	while (Xil_AssertWait) {
    2c04:	3d 20 00 00 	lis     r9,0
    2c08:	80 09 34 fc 	lwz     r0,13564(r9)
    2c0c:	2f 80 00 00 	cmpwi   cr7,r0,0
    2c10:	40 be 00 00 	bne+    cr7,2c10 <Xil_Assert+0x30>
	}
}
    2c14:	80 01 00 0c 	lwz     r0,12(r1)
    2c18:	38 21 00 08 	addi    r1,r1,8
    2c1c:	7c 08 03 a6 	mtlr    r0
    2c20:	4e 80 00 20 	blr

00002c24 <Xil_AssertSetCallback>:
* @note     This function has no effect if NDEBUG is set
*
******************************************************************************/
void Xil_AssertSetCallback(Xil_AssertCallback Routine)
{
	Xil_AssertCallbackRoutine = Routine;
    2c24:	3d 20 00 00 	lis     r9,0
    2c28:	90 69 35 10 	stw     r3,13584(r9)
}
    2c2c:	4e 80 00 20 	blr

00002c30 <Xil_In8>:
     */

#if defined __GNUC__

    u8 Value;
    __asm__ volatile ("eieio; lbz %0,0(%1)":"=r" (Value):"b" (Addr));
    2c30:	7c 00 06 ac 	eieio
    2c34:	88 63 00 00 	lbz     r3,0(r3)
    SYNCHRONIZE_IO;
    return *(u8 *) Addr;

#endif

}
    2c38:	54 63 06 3e 	clrlwi  r3,r3,24
    2c3c:	4e 80 00 20 	blr

00002c40 <Xil_In16>:
     */

#if defined __GNUC__

    u16 Value;
    __asm__ volatile ("eieio; lhz %0,0(%1)":"=r" (Value):"b" (Addr));
    2c40:	7c 00 06 ac 	eieio
    2c44:	a0 63 00 00 	lhz     r3,0(r3)

    SYNCHRONIZE_IO;
    return *(u16 *) Addr;

#endif
}
    2c48:	54 63 04 3e 	clrlwi  r3,r3,16
    2c4c:	4e 80 00 20 	blr

00002c50 <Xil_In32>:
     */

#ifdef __GNUC__

    u32 Value;
    __asm__ volatile ("eieio; lwz %0,0(%1)":"=r" (Value):"b" (Addr));
    2c50:	7c 00 06 ac 	eieio
    2c54:	80 63 00 00 	lwz     r3,0(r3)
    SYNCHRONIZE_IO;
    return *(u32 *)Addr;

#endif

}
    2c58:	4e 80 00 20 	blr

00002c5c <Xil_In16LE>:
     * such that the I/O operation completes before proceeding on
     */
#ifdef __GNUC__
    u16 Value;

    __asm__ volatile ("eieio; lhbrx %0,0,%1":"=r" (Value):"b" (Addr));
    2c5c:	7c 00 06 ac 	eieio
    2c60:	7c 60 1e 2c 	lhbrx   r3,0,r3
    return Value;
#else
    return Xil_InSwap16(Addr);
#endif
}
    2c64:	54 63 04 3e 	clrlwi  r3,r3,16
    2c68:	4e 80 00 20 	blr

00002c6c <Xil_In32LE>:
     * such that the I/O operation completes before proceeding on
     */
#ifdef __GNUC__
    u32 Value;

    __asm__ volatile ("eieio; lwbrx %0,0,%1":"=r" (Value):"b" (Addr));
    2c6c:	7c 00 06 ac 	eieio
    2c70:	7c 60 1c 2c 	lwbrx   r3,0,r3
    return Value;
#else
    return Xil_InSwap32(Addr);
#endif

}
    2c74:	4e 80 00 20 	blr

00002c78 <Xil_Out8>:
     * such that the I/O operation completes before proceeding on
     */

#ifdef __GNUC__

    __asm__ volatile ("stb %0,0(%1); eieio"::"r" (Value), "b"(Addr));
    2c78:	98 83 00 00 	stb     r4,0(r3)
    2c7c:	7c 00 06 ac 	eieio
    *(volatile u8 *) Addr = Value;
    SYNCHRONIZE_IO;

#endif

}
    2c80:	4e 80 00 20 	blr

00002c84 <Xil_Out16>:
     * such that the I/O operation completes before proceeding on
     */

#ifdef __GNUC__

    __asm__ volatile ("sth %0,0(%1); eieio"::"r" (Value), "b"(Addr));
    2c84:	b0 83 00 00 	sth     r4,0(r3)
    2c88:	7c 00 06 ac 	eieio

    *(volatile u16 *) Addr = Value;
    SYNCHRONIZE_IO;

#endif
}
    2c8c:	4e 80 00 20 	blr

00002c90 <Xil_Out32>:
     * such that the I/O operation completes before proceeding on
     */

#ifdef __GNUC__

    __asm__ volatile ("stw %0,0(%1); eieio"::"r" (Value), "b"(Addr));
    2c90:	90 83 00 00 	stw     r4,0(r3)
    2c94:	7c 00 06 ac 	eieio

    *(volatile u32 *) Addr = Value;
    SYNCHRONIZE_IO;

#endif
}
    2c98:	4e 80 00 20 	blr

00002c9c <Xil_Out16LE>:
{
    /* write the contents of the I/O location and then synchronize the I/O
     * such that the I/O operation completes before proceeding on
     */
#ifdef __GNUC__
    __asm__ volatile ("sthbrx %0,0,%1; eieio"::"r" (Value), "b"(Addr));
    2c9c:	7c 80 1f 2c 	sthbrx  r4,0,r3
    2ca0:	7c 00 06 ac 	eieio
#else
    Xil_OutSwap16(Addr, Value);
#endif
}
    2ca4:	4e 80 00 20 	blr

00002ca8 <Xil_Out32LE>:
{
    /* write the contents of the I/O location and then synchronize the I/O
     * such that the I/O operation completes before proceeding on
     */
#ifdef __GNUC__
    __asm__ volatile ("stwbrx %0,0,%1; eieio"::"r" (Value), "b"(Addr));
    2ca8:	7c 80 1d 2c 	stwbrx  r4,0,r3
    2cac:	7c 00 06 ac 	eieio
#else
    Xil_OutSwap32(Addr, Value);
#endif
}
    2cb0:	4e 80 00 20 	blr

00002cb4 <Xil_EndianSwap16>:
* @note		None.
*
******************************************************************************/
u16 Xil_EndianSwap16(u16 Data)
{
	return (u16) (((Data & 0xFF00) >> 8) | ((Data & 0x00FF) << 8));
    2cb4:	54 60 44 2e 	rlwinm  r0,r3,8,16,23
    2cb8:	54 63 c2 3e 	rlwinm  r3,r3,24,8,31
}
    2cbc:	7c 63 03 78 	or      r3,r3,r0
    2cc0:	4e 80 00 20 	blr

00002cc4 <Xil_EndianSwap32>:
	LoWord = (u16) (Data & 0x0000FFFF);
	HiWord = (u16) ((Data & 0xFFFF0000) >> 16);

	/* byte swap each of the 16 bit half words */

	LoWord = (((LoWord & 0xFF00) >> 8) | ((LoWord & 0x00FF) << 8));
    2cc4:	54 60 04 3e 	clrlwi  r0,r3,16
	HiWord = (((HiWord & 0xFF00) >> 8) | ((HiWord & 0x00FF) << 8));
    2cc8:	54 63 84 3e 	rlwinm  r3,r3,16,16,31
    2ccc:	54 09 44 2e 	rlwinm  r9,r0,8,16,23
    2cd0:	54 00 c2 3e 	rlwinm  r0,r0,24,8,31
    2cd4:	54 6b 44 2e 	rlwinm  r11,r3,8,16,23
    2cd8:	7c 00 4b 78 	or      r0,r0,r9
    2cdc:	54 63 c2 3e 	rlwinm  r3,r3,24,8,31
    2ce0:	54 00 80 1e 	rlwinm  r0,r0,16,0,15
    2ce4:	7c 63 5b 78 	or      r3,r3,r11

	/* swap the half words before returning the value */

	return (u32) ((LoWord << 16) | HiWord);
}
    2ce8:	7c 03 1b 78 	or      r3,r0,r3
    2cec:	4e 80 00 20 	blr

00002cf0 <exit>:
    2cf0:	94 21 ff f0 	stwu    r1,-16(r1)
    2cf4:	7c 08 02 a6 	mflr    r0
    2cf8:	38 80 00 00 	li      r4,0
    2cfc:	93 e1 00 0c 	stw     r31,12(r1)
    2d00:	7c 7f 1b 78 	mr      r31,r3
    2d04:	90 01 00 14 	stw     r0,20(r1)
    2d08:	48 00 00 29 	bl      2d30 <__call_exitprocs>
    2d0c:	3d 20 00 00 	lis     r9,0
    2d10:	80 69 35 04 	lwz     r3,13572(r9)
    2d14:	80 03 00 28 	lwz     r0,40(r3)
    2d18:	2f 80 00 00 	cmpwi   cr7,r0,0
    2d1c:	41 9e 00 0c 	beq-    cr7,2d28 <exit+0x38>
    2d20:	7c 09 03 a6 	mtctr   r0
    2d24:	4e 80 04 21 	bctrl
    2d28:	7f e3 fb 78 	mr      r3,r31
    2d2c:	4b ff d3 a1 	bl      cc <_exit>

00002d30 <__call_exitprocs>:
    2d30:	94 21 ff d0 	stwu    r1,-48(r1)
    2d34:	7c 08 02 a6 	mflr    r0
    2d38:	3d 20 00 00 	lis     r9,0
    2d3c:	7d 80 00 26 	mfcr    r12
    2d40:	81 69 35 04 	lwz     r11,13572(r9)
    2d44:	90 01 00 34 	stw     r0,52(r1)
    2d48:	93 81 00 20 	stw     r28,32(r1)
    2d4c:	93 21 00 14 	stw     r25,20(r1)
    2d50:	7c 79 1b 78 	mr      r25,r3
    2d54:	83 8b 00 48 	lwz     r28,72(r11)
    2d58:	93 41 00 18 	stw     r26,24(r1)
    2d5c:	7c 9a 23 78 	mr      r26,r4
    2d60:	93 61 00 1c 	stw     r27,28(r1)
    2d64:	2f 9c 00 00 	cmpwi   cr7,r28,0
    2d68:	93 a1 00 24 	stw     r29,36(r1)
    2d6c:	93 c1 00 28 	stw     r30,40(r1)
    2d70:	93 e1 00 2c 	stw     r31,44(r1)
    2d74:	91 81 00 10 	stw     r12,16(r1)
    2d78:	41 9e 00 58 	beq-    cr7,2dd0 <__call_exitprocs+0xa0>
    2d7c:	80 1c 00 04 	lwz     r0,4(r28)
    2d80:	83 7c 00 88 	lwz     r27,136(r28)
    2d84:	37 e0 ff ff 	addic.  r31,r0,-1
    2d88:	41 80 00 48 	blt-    2dd0 <__call_exitprocs+0xa0>
    2d8c:	57 e9 10 3a 	rlwinm  r9,r31,2,0,29
    2d90:	2d 84 00 00 	cmpwi   cr3,r4,0
    2d94:	7d 7c 4a 14 	add     r11,r28,r9
    2d98:	2e 1b 00 00 	cmpwi   cr4,r27,0
    2d9c:	39 29 00 80 	addi    r9,r9,128
    2da0:	3b ab 00 08 	addi    r29,r11,8
    2da4:	7f db 4a 14 	add     r30,r27,r9
    2da8:	41 8e 00 60 	beq-    cr3,2e08 <__call_exitprocs+0xd8>
    2dac:	41 92 00 10 	beq-    cr4,2dbc <__call_exitprocs+0x8c>
    2db0:	80 1e 00 00 	lwz     r0,0(r30)
    2db4:	7f 9a 00 00 	cmpw    cr7,r26,r0
    2db8:	41 9e 00 50 	beq-    cr7,2e08 <__call_exitprocs+0xd8>
    2dbc:	2f 9f 00 00 	cmpwi   cr7,r31,0
    2dc0:	3b de ff fc 	addi    r30,r30,-4
    2dc4:	3b bd ff fc 	addi    r29,r29,-4
    2dc8:	3b ff ff ff 	addi    r31,r31,-1
    2dcc:	40 9e ff dc 	bne+    cr7,2da8 <__call_exitprocs+0x78>
    2dd0:	81 81 00 10 	lwz     r12,16(r1)
    2dd4:	80 01 00 34 	lwz     r0,52(r1)
    2dd8:	83 21 00 14 	lwz     r25,20(r1)
    2ddc:	83 41 00 18 	lwz     r26,24(r1)
    2de0:	7d 81 01 20 	mtcrf   16,r12
    2de4:	83 61 00 1c 	lwz     r27,28(r1)
    2de8:	7c 08 03 a6 	mtlr    r0
    2dec:	83 81 00 20 	lwz     r28,32(r1)
    2df0:	7d 80 81 20 	mtcrf   8,r12
    2df4:	83 a1 00 24 	lwz     r29,36(r1)
    2df8:	83 c1 00 28 	lwz     r30,40(r1)
    2dfc:	83 e1 00 2c 	lwz     r31,44(r1)
    2e00:	38 21 00 30 	addi    r1,r1,48
    2e04:	4e 80 00 20 	blr
    2e08:	81 3c 00 04 	lwz     r9,4(r28)
    2e0c:	81 7d 00 00 	lwz     r11,0(r29)
    2e10:	39 29 ff ff 	addi    r9,r9,-1
    2e14:	7f 89 f8 00 	cmpw    cr7,r9,r31
    2e18:	41 9e 00 54 	beq-    cr7,2e6c <__call_exitprocs+0x13c>
    2e1c:	38 00 00 00 	li      r0,0
    2e20:	90 1d 00 00 	stw     r0,0(r29)
    2e24:	2f 8b 00 00 	cmpwi   cr7,r11,0
    2e28:	41 be ff 94 	beq-    cr7,2dbc <__call_exitprocs+0x8c>
    2e2c:	41 92 00 34 	beq-    cr4,2e60 <__call_exitprocs+0x130>
    2e30:	80 1b 01 00 	lwz     r0,256(r27)
    2e34:	39 20 00 01 	li      r9,1
    2e38:	7d 29 f8 30 	slw     r9,r9,r31
    2e3c:	7d 2a 00 39 	and.    r10,r9,r0
    2e40:	41 82 00 20 	beq-    2e60 <__call_exitprocs+0x130>
    2e44:	80 1b 01 04 	lwz     r0,260(r27)
    2e48:	7d 2a 00 39 	and.    r10,r9,r0
    2e4c:	41 82 00 28 	beq-    2e74 <__call_exitprocs+0x144>
    2e50:	80 7e ff 80 	lwz     r3,-128(r30)
    2e54:	7d 69 03 a6 	mtctr   r11
    2e58:	4e 80 04 21 	bctrl
    2e5c:	4b ff ff 60 	b       2dbc <__call_exitprocs+0x8c>
    2e60:	7d 69 03 a6 	mtctr   r11
    2e64:	4e 80 04 21 	bctrl
    2e68:	4b ff ff 54 	b       2dbc <__call_exitprocs+0x8c>
    2e6c:	93 fc 00 04 	stw     r31,4(r28)
    2e70:	4b ff ff b4 	b       2e24 <__call_exitprocs+0xf4>
    2e74:	7f 23 cb 78 	mr      r3,r25
    2e78:	80 9e ff 80 	lwz     r4,-128(r30)
    2e7c:	7d 69 03 a6 	mtctr   r11
    2e80:	4e 80 04 21 	bctrl
    2e84:	4b ff ff 38 	b       2dbc <__call_exitprocs+0x8c>

00002e88 <__do_global_ctors_aux>:
    2e88:	94 21 ff f0 	stwu    r1,-16(r1)
    2e8c:	7c 08 02 a6 	mflr    r0
    2e90:	3d 20 00 00 	lis     r9,0
    2e94:	39 29 34 e0 	addi    r9,r9,13536
    2e98:	90 01 00 14 	stw     r0,20(r1)
    2e9c:	93 e1 00 0c 	stw     r31,12(r1)
    2ea0:	3b e9 ff fc 	addi    r31,r9,-4
    2ea4:	80 09 ff fc 	lwz     r0,-4(r9)
    2ea8:	2f 80 ff ff 	cmpwi   cr7,r0,-1
    2eac:	41 9e 00 18 	beq-    cr7,2ec4 <__do_global_ctors_aux+0x3c>
    2eb0:	7c 09 03 a6 	mtctr   r0
    2eb4:	4e 80 04 21 	bctrl
    2eb8:	84 1f ff fc 	lwzu    r0,-4(r31)
    2ebc:	2f 80 ff ff 	cmpwi   cr7,r0,-1
    2ec0:	40 9e ff f0 	bne+    cr7,2eb0 <__do_global_ctors_aux+0x28>
    2ec4:	80 01 00 14 	lwz     r0,20(r1)
    2ec8:	83 e1 00 0c 	lwz     r31,12(r1)
    2ecc:	38 21 00 10 	addi    r1,r1,16
    2ed0:	7c 08 03 a6 	mtlr    r0
    2ed4:	4e 80 00 20 	blr

Disassembly of section .init:

00002ed8 <__init>:
    2ed8:	94 21 ff f0 	stwu    r1,-16(r1)
    2edc:	7c 08 02 a6 	mflr    r0
    2ee0:	90 01 00 14 	stw     r0,20(r1)
    2ee4:	4b ff d2 81 	bl      164 <frame_dummy>
    2ee8:	4b ff ff a1 	bl      2e88 <__do_global_ctors_aux>
    2eec:	80 01 00 14 	lwz     r0,20(r1)
    2ef0:	7c 08 03 a6 	mtlr    r0
    2ef4:	38 21 00 10 	addi    r1,r1,16
    2ef8:	4e 80 00 20 	blr

Disassembly of section .fini:

00002efc <__fini>:
    2efc:	94 21 ff f0 	stwu    r1,-16(r1)
    2f00:	7c 08 02 a6 	mflr    r0
    2f04:	90 01 00 14 	stw     r0,20(r1)
    2f08:	4b ff d1 c9 	bl      d0 <__do_global_dtors_aux>
    2f0c:	80 01 00 14 	lwz     r0,20(r1)
    2f10:	7c 08 03 a6 	mtlr    r0
    2f14:	38 21 00 10 	addi    r1,r1,16
    2f18:	4e 80 00 20 	blr

Disassembly of section .boot0:

ffffff00 <__boot0_start>:
ffffff00:	38 00 00 00 	li      r0,0
ffffff04:	7c 00 03 8c 	.long 0x7c00038c
ffffff08:	3c 40 00 20 	lis     r2,32
ffffff0c:	60 42 00 00 	ori     r2,r2,0
ffffff10:	7c 53 eb a6 	mtspr   947,r2
ffffff14:	7c 18 db a6 	mtspr   888,r0
ffffff18:	7c 12 eb a6 	mtspr   946,r0
ffffff1c:	7c 00 07 8c 	.long 0x7c00078c
ffffff20:	7c 0f f1 20 	mtcr    r0
ffffff24:	7c 01 03 a6 	mtxer   r0
ffffff28:	7c 09 03 a6 	mtctr   r0
ffffff2c:	3c c0 10 00 	lis     r6,4096
ffffff30:	60 c6 00 00 	ori     r6,r6,0
ffffff34:	7c 05 03 78 	mr      r5,r0
ffffff38:	7c 04 03 78 	mr      r4,r0
ffffff3c:	3d 20 c0 00 	lis     r9,-16384
ffffff40:	61 29 00 01 	ori     r9,r9,1

ffffff44 <tlbloop>:
ffffff44:	38 e0 04 3f 	li      r7,1087
ffffff48:	7c 83 23 78 	mr      r3,r4
ffffff4c:	60 63 02 90 	ori     r3,r3,656
ffffff50:	7c 65 07 a4 	.long 0x7c6507a4
ffffff54:	7c 85 0f a4 	.long 0x7c850fa4
ffffff58:	39 00 00 03 	li      r8,3
ffffff5c:	21 45 00 1e 	subfic  r10,r5,30
ffffff60:	7d 08 50 30 	slw     r8,r8,r10
ffffff64:	7d 28 40 38 	and     r8,r9,r8
ffffff68:	2c 08 00 00 	cmpwi   r8,0
ffffff6c:	40 82 00 08 	bne-    ffffff74 <tlbloop+0x30>
ffffff70:	60 e7 01 00 	ori     r7,r7,256
ffffff74:	7c e5 17 a4 	.long 0x7ce517a4
ffffff78:	68 63 01 00 	xori    r3,r3,256
ffffff7c:	38 a5 00 01 	addi    r5,r5,1
ffffff80:	7c 65 07 a4 	.long 0x7c6507a4
ffffff84:	7c 85 0f a4 	.long 0x7c850fa4
ffffff88:	7c e5 17 a4 	.long 0x7ce517a4
ffffff8c:	7c 84 32 14 	add     r4,r4,r6
ffffff90:	38 a5 00 01 	addi    r5,r5,1
ffffff94:	2c 05 00 20 	cmpwi   r5,32
ffffff98:	40 82 ff ac 	bne+    ffffff44 <tlbloop>

ffffff9c <tlbzero>:
ffffff9c:	7c 05 07 a4 	.long 0x7c0507a4
ffffffa0:	7c 05 0f a4 	.long 0x7c050fa4
ffffffa4:	7c 05 17 a4 	.long 0x7c0517a4
ffffffa8:	38 a5 00 01 	addi    r5,r5,1
ffffffac:	2c 05 00 40 	cmpwi   r5,64
ffffffb0:	40 82 ff ec 	bne+    ffffff9c <tlbzero>
ffffffb4:	3c 20 00 00 	lis     r1,0
ffffffb8:	60 21 00 00 	ori     r1,r1,0
ffffffbc:	7c 3a 03 a6 	mtsrr0  r1
ffffffc0:	38 20 00 10 	li      r1,16
ffffffc4:	7c 3b 03 a6 	mtsrr1  r1
ffffffc8:	4c 00 00 64 	rfi

Disassembly of section .boot:

fffffffc <__boot_start>:
fffffffc:	4b ff ff 04 	b       ffffff00 <__boot0_start>
